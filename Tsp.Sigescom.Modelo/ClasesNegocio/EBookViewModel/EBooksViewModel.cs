


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
namespace Tsp.Sigescom.Modelo.Entidades
{
    /*
/// <summary>
///
/// </summary>
public partial class EBookCajaEfectivoModel
{
int IdPeriodo=0;
/// <summary>
///  1. Obligatorio
///2. Validar formato AAAAMM00
///3. 01 <= MM <= 12
///4. Menor o igual al periodo informado
///5. Si el periodo es igual a periodo informado, campo 8 es igual a '1' 
///6. Si periodo es menor a periodo informado, entonces campo 7 es diferente a '1'
/// </summary>
[RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(1. Obligatorio
2. Validar formato AAAAMM00
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
5. Si el periodo es igual a periodo informado, campo 8 es igual a '1' 
6. Si periodo es menor a periodo informado, entonces campo 7 es diferente a '1')")]
public string Periodo{ get; set; }

/// <summary>
///  Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable. Debe ser el mismo consignado en el Libro Diario.
///
///1. Obligatorio
///2. Si el campo 8 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando
///3. Si el campo 8 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación. 
///Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
///4. Si el campo 8 es igual a '9', consignar el Código Único de la Operación (CUO) de la operación original que se modifica
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,40}$", ErrorMessage = @"(Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable. Debe ser el mismo consignado en el Libro Diario.

1. Obligatorio
2. Si el campo 8 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando
3. Si el campo 8 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación. 
Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
4. Si el campo 8 es igual a '9', consignar el Código Único de la Operación (CUO) de la operación original que se modifica)")]
public string CUO{ get; set; }

/// <summary>
///  Número correlativo del asiento contable identificado en el campo 2. 
///El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
///
///1. Obligatorio
///2. El primer dígito debe ser: 'A', 'M' o 'C'
///
/// </summary>
[RegularExpression(@"^[Aa|Mm|Cc]\d{1,10}$", ErrorMessage = @"(Número correlativo del asiento contable identificado en el campo 2. 
El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.

1. Obligatorio
2. El primer dígito debe ser: 'A', 'M' o 'C'
)")]
public string NumeroCorrelativo{ get; set; }

/// <summary>
///  Fecha de la operación
///1. Obligatorio
///2. Menor o igual al periodo informado
///3. Menor o igual al periodo señalado en el campo 1.
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(Fecha de la operación
1. Obligatorio
2. Menor o igual al periodo informado
3. Menor o igual al periodo señalado en el campo 1.)")]
public string FechaOperacion{ get; set; }

/// <summary>
///  Descripción de la operación.
///1. Obligatorio
/// </summary>
[RegularExpression(@"^[^|]{1,100}$", ErrorMessage = @"(Descripción de la operación.
1. Obligatorio)")]
public string DescripcionOperacion{ get; set; }

/// <summary>
///  Movimientos del Debe
///1. Positivo o '0.00'
///2. Excluyente con campo 7
///3. Campo 6 y 7 pueden ser ambos 0.00
///4. La suma del campo 6 (correspondiente al estado 1) debe ser igual a la suma del campo 7
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Movimientos del Debe
1. Positivo o '0.00'
2. Excluyente con campo 7
3. Campo 6 y 7 pueden ser ambos 0.00
4. La suma del campo 6 (correspondiente al estado 1) debe ser igual a la suma del campo 7)")]
public string MovimientosDebe{ get; set; }

/// <summary>
///  Movimientos del Haber
///1. Positivo o '0.00'
///2. Excluyente con campo 6
///3. Campo 6 y 7 pueden ser ambos 0.00
///4. La suma del campo 7 (correspondiente al estado 1) debe ser igual a la suma del campo 6
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Movimientos del Haber
1. Positivo o '0.00'
2. Excluyente con campo 6
3. Campo 6 y 7 pueden ser ambos 0.00
4. La suma del campo 7 (correspondiente al estado 1) debe ser igual a la suma del campo 6)")]
public string MovimientosHaber{ get; set; }

/// <summary>
///  Indica el estado de la operación
/// </summary>
[RegularExpression(@"^\d{1}", ErrorMessage = @"(Indica el estado de la operación)")]
public string EstadoOperacion{ get; set; }

    public EBookCajaEfectivoModel()
    {
    }
    public EBookCajaEfectivoModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==223).value; 
        CUO = bookLog.Details.Single(d=>d.fieldId==224).value; 
        NumeroCorrelativo = bookLog.Details.Single(d=>d.fieldId==225).value; 
        FechaOperacion = bookLog.Details.Single(d=>d.fieldId==226).value; 
        DescripcionOperacion = bookLog.Details.Single(d=>d.fieldId==227).value; 
        MovimientosDebe = bookLog.Details.Single(d=>d.fieldId==228).value; 
        MovimientosHaber = bookLog.Details.Single(d=>d.fieldId==229).value; 
        EstadoOperacion = bookLog.Details.Single(d=>d.fieldId==230).value; 
    }
    public static List<EBookCajaEfectivoModel> convert(List<BookLog> bookLogs)
    {

        List<EBookCajaEfectivoModel> eBookCajaEfectivoModel = new List<EBookCajaEfectivoModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookCajaEfectivoModel.Add(new EBookCajaEfectivoModel(bookLog));
        }
        return eBookCajaEfectivoModel;
    }

    public static List<BookLog> convert(List<EBookCajaEfectivoModel> eBookCajaEfectivoModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookCajaEfectivoModel in eBookCajaEfectivoModels)
        {
            bookLogs.Add(EBookCajaEfectivoModel.convert(eBookCajaEfectivoModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookCajaEfectivoModel eBookCajaEfectivoModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(223, eBookCajaEfectivoModel.Periodo)) ;
        bookLog.Details.Add(new Detail(224, eBookCajaEfectivoModel.CUO)) ;
        bookLog.Details.Add(new Detail(225, eBookCajaEfectivoModel.NumeroCorrelativo)) ;
        bookLog.Details.Add(new Detail(226, eBookCajaEfectivoModel.FechaOperacion)) ;
        bookLog.Details.Add(new Detail(227, eBookCajaEfectivoModel.DescripcionOperacion)) ;
        bookLog.Details.Add(new Detail(228, eBookCajaEfectivoModel.MovimientosDebe)) ;
        bookLog.Details.Add(new Detail(229, eBookCajaEfectivoModel.MovimientosHaber)) ;
        bookLog.Details.Add(new Detail(230, eBookCajaEfectivoModel.EstadoOperacion)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EBookCajaCuentaCorrienteModel
{
int IdPeriodo=0;
/// <summary>
///  1. Obligatorio
///2. Validar formato AAAAMM00
///3. 01 <= MM <= 12
///4. Menor o igual al periodo informado
///5. Si el periodo es igual a periodo informado, campo 8 es igual a '1' 
///6. Si periodo es menor a periodo informado, entonces campo 7 es diferente a '1'
/// </summary>
[RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(1. Obligatorio
2. Validar formato AAAAMM00
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
5. Si el periodo es igual a periodo informado, campo 8 es igual a '1' 
6. Si periodo es menor a periodo informado, entonces campo 7 es diferente a '1')")]
public string Periodo{ get; set; }

/// <summary>
///  Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable. Debe ser el mismo consignado en el Libro Diario.
///
///1. Obligatorio
///2. Si el campo 8 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando
///3. Si el campo 8 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación. 
///Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
///4. Si el campo 8 es igual a '9', consignar el Código Único de la Operación (CUO) de la operación original que se modifica
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,40}$", ErrorMessage = @"(Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable. Debe ser el mismo consignado en el Libro Diario.

1. Obligatorio
2. Si el campo 8 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando
3. Si el campo 8 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación. 
Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
4. Si el campo 8 es igual a '9', consignar el Código Único de la Operación (CUO) de la operación original que se modifica)")]
public string CUO{ get; set; }

/// <summary>
///  Número correlativo del asiento contable identificado en el campo 2. 
///El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
///
///1. Obligatorio
///2. El primer dígito debe ser: 'A', 'M' o 'C'
///
/// </summary>
[RegularExpression(@"^[Aa|Mm|Cc]\d{1,10}$", ErrorMessage = @"(Número correlativo del asiento contable identificado en el campo 2. 
El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.

1. Obligatorio
2. El primer dígito debe ser: 'A', 'M' o 'C'
)")]
public string NumeroCorrelativo{ get; set; }

/// <summary>
///  Código de la entidad financiera donde se encuentra su cuenta bancaria
///1. Obligatorio
///2. Validar con parámetro tabla 3
///
/// </summary>
[RegularExpression(@"^\d{2}", ErrorMessage = @"(Código de la entidad financiera donde se encuentra su cuenta bancaria
1. Obligatorio
2. Validar con parámetro tabla 3
)")]
public string CodigoEntidadFinanciera{ get; set; }

/// <summary>
///  Código de la cuenta bancaria del contribuyente
///1. Obligatorio
///
/// </summary>
[RegularExpression(@"^[^|]{1,30}$", ErrorMessage = @"(Código de la cuenta bancaria del contribuyente
1. Obligatorio
)")]
public string CodigoCuentaBancaria{ get; set; }

/// <summary>
///  Fecha de la operación
///Formato: DD/MM/AAAA
///1. Obligatorio
///2. Menor o igual al periodo informado
///3. Menor o igual al periodo señalado en el campo 1.
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(Fecha de la operación
Formato: DD/MM/AAAA
1. Obligatorio
2. Menor o igual al periodo informado
3. Menor o igual al periodo señalado en el campo 1.)")]
public string Fecha{ get; set; }

/// <summary>
///  Medio de pago utilizado en la operación bancaria
///Formato: Numérico
///1. Obligatorio
///2. Validar con parámetro tabla 1
/// </summary>
[RegularExpression(@"^\d{3}$", ErrorMessage = @"(Medio de pago utilizado en la operación bancaria
Formato: Numérico
1. Obligatorio
2. Validar con parámetro tabla 1)")]
public string MedioPago{ get; set; }

/// <summary>
///  Descripción de la operación bancaria.
///Formato: Alfanumérico
///Longitud: Hasta 100
///1. Obligatorio
/// </summary>
[RegularExpression(@"^[^|]{1,100}$", ErrorMessage = @"(Descripción de la operación bancaria.
Formato: Alfanumérico
Longitud: Hasta 100
1. Obligatorio)")]
public string Descripcion{ get; set; }

/// <summary>
///  Tipo de Documento de Identidad del girador o beneficiario
///Formato: Alfanumérico
///Longitud: 1
///1. Obligatorio
///2. Validar con parámetro tabla 2
///3. En caso de no existir o de tratarse de operaciones múltiples, registrar '-'
/// </summary>
[RegularExpression(@"^[^|]{1}$", ErrorMessage = @"(Tipo de Documento de Identidad del girador o beneficiario
Formato: Alfanumérico
Longitud: 1
1. Obligatorio
2. Validar con parámetro tabla 2
3. En caso de no existir o de tratarse de operaciones múltiples, registrar '-')")]
public string TipoDocumentoIdentidad{ get; set; }

/// <summary>
///  Número de Documento de Identidad del girador o beneficiario
///Formato: Alfanumérico
///Longitud: Hasta 15
/// </summary>
[RegularExpression(@"^[^|]{1,15}$", ErrorMessage = @"(Número de Documento de Identidad del girador o beneficiario
Formato: Alfanumérico
Longitud: Hasta 15)")]
public string NumeroDocumentoIdentidad{ get; set; }

/// <summary>
///  Apellidos y nombres, Denominación o Razón Social del girador o beneficiario. 
///Formato: Alfanumérico
///Longitud: hasta 100
///1. Obligatorio
///2. De tratarse de operaciones múltiples se podrá consignar 'varios'
///
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9\s]{1,100}$", ErrorMessage = @"(Apellidos y nombres, Denominación o Razón Social del girador o beneficiario. 
Formato: Alfanumérico
Longitud: hasta 100
1. Obligatorio
2. De tratarse de operaciones múltiples se podrá consignar 'varios'
)")]
public string ApellidosNombresDenominacionRazonSocial{ get; set; }

/// <summary>
///  Número de transacción bancaria, número de documento sustentatorio o número de control interno de la operación bancaria
///Formato: Alfanumérico
///Longitud: Hasta 20
///1. Obligatorio
/// </summary>
[RegularExpression(@"^[^|]{1,20}$", ErrorMessage = @"(Número de transacción bancaria, número de documento sustentatorio o número de control interno de la operación bancaria
Formato: Alfanumérico
Longitud: Hasta 20
1. Obligatorio)")]
public string NumeroTransaccion{ get; set; }

/// <summary>
///  Parte deudora de saldos y movimientos
///Formato: Numérico
///Longitud: Hasta 20 enteros y hasta 2 decimales, sin separador de miles
///
///1. Positivo o '0.00'
///2. Excluyente con campo 14
///3. Campo 13 y 14 no pueden ser ambos 0.00
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Parte deudora de saldos y movimientos
Formato: Numérico
Longitud: Hasta 20 enteros y hasta 2 decimales, sin separador de miles

1. Positivo o '0.00'
2. Excluyente con campo 14
3. Campo 13 y 14 no pueden ser ambos 0.00)")]
public string ParteDeudoraSaldosMovimientos{ get; set; }

/// <summary>
///  Parte acreedora de saldos y movimientos
///Formato: numérico
///Longitud:Hasta 20 enteros y hasta 2 decimales, sin comas de miles
///
///1. Positivo o '0.00'
///2. Excluyente con campo 14
///3. Campo 13 y 14 no pueden ser ambos 0.00
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Parte acreedora de saldos y movimientos
Formato: numérico
Longitud:Hasta 20 enteros y hasta 2 decimales, sin comas de miles

1. Positivo o '0.00'
2. Excluyente con campo 14
3. Campo 13 y 14 no pueden ser ambos 0.00)")]
public string ParteAcreedoraSaldosMovimientos{ get; set; }

/// <summary>
///  Indica el estado de la operación
///Formato: Numérico
///Longitud: 1
///
///1. Obligatorio
///2. Registrar '1' cuando la operación corresponde al periodo.
///3. Registrar '8' cuando la operación corresponde a un periodo anterior y NO ha sido anotada en dicho periodo.
///4. Registrar '9' cuando la operación corresponde a un periodo anterior y SI ha sido anotada en dicho periodo.
/// </summary>
[RegularExpression(@"^\d{1}", ErrorMessage = @"(Indica el estado de la operación
Formato: Numérico
Longitud: 1

1. Obligatorio
2. Registrar '1' cuando la operación corresponde al periodo.
3. Registrar '8' cuando la operación corresponde a un periodo anterior y NO ha sido anotada en dicho periodo.
4. Registrar '9' cuando la operación corresponde a un periodo anterior y SI ha sido anotada en dicho periodo.)")]
public string Estado{ get; set; }

    public EBookCajaCuentaCorrienteModel()
    {
    }
    public EBookCajaCuentaCorrienteModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==231).value; 
        CUO = bookLog.Details.Single(d=>d.fieldId==232).value; 
        NumeroCorrelativo = bookLog.Details.Single(d=>d.fieldId==233).value; 
        CodigoEntidadFinanciera = bookLog.Details.Single(d=>d.fieldId==234).value; 
        CodigoCuentaBancaria = bookLog.Details.Single(d=>d.fieldId==235).value; 
        Fecha = bookLog.Details.Single(d=>d.fieldId==236).value; 
        MedioPago = bookLog.Details.Single(d=>d.fieldId==237).value; 
        Descripcion = bookLog.Details.Single(d=>d.fieldId==238).value; 
        TipoDocumentoIdentidad = bookLog.Details.Single(d=>d.fieldId==239).value; 
        NumeroDocumentoIdentidad = bookLog.Details.Single(d=>d.fieldId==240).value; 
        ApellidosNombresDenominacionRazonSocial = bookLog.Details.Single(d=>d.fieldId==241).value; 
        NumeroTransaccion = bookLog.Details.Single(d=>d.fieldId==242).value; 
        ParteDeudoraSaldosMovimientos = bookLog.Details.Single(d=>d.fieldId==243).value; 
        ParteAcreedoraSaldosMovimientos = bookLog.Details.Single(d=>d.fieldId==244).value; 
        Estado = bookLog.Details.Single(d=>d.fieldId==245).value; 
    }
    public static List<EBookCajaCuentaCorrienteModel> convert(List<BookLog> bookLogs)
    {

        List<EBookCajaCuentaCorrienteModel> eBookCajaCuentaCorrienteModel = new List<EBookCajaCuentaCorrienteModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookCajaCuentaCorrienteModel.Add(new EBookCajaCuentaCorrienteModel(bookLog));
        }
        return eBookCajaCuentaCorrienteModel;
    }

    public static List<BookLog> convert(List<EBookCajaCuentaCorrienteModel> eBookCajaCuentaCorrienteModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookCajaCuentaCorrienteModel in eBookCajaCuentaCorrienteModels)
        {
            bookLogs.Add(EBookCajaCuentaCorrienteModel.convert(eBookCajaCuentaCorrienteModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookCajaCuentaCorrienteModel eBookCajaCuentaCorrienteModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(231, eBookCajaCuentaCorrienteModel.Periodo)) ;
        bookLog.Details.Add(new Detail(232, eBookCajaCuentaCorrienteModel.CUO)) ;
        bookLog.Details.Add(new Detail(233, eBookCajaCuentaCorrienteModel.NumeroCorrelativo)) ;
        bookLog.Details.Add(new Detail(234, eBookCajaCuentaCorrienteModel.CodigoEntidadFinanciera)) ;
        bookLog.Details.Add(new Detail(235, eBookCajaCuentaCorrienteModel.CodigoCuentaBancaria)) ;
        bookLog.Details.Add(new Detail(236, eBookCajaCuentaCorrienteModel.Fecha)) ;
        bookLog.Details.Add(new Detail(237, eBookCajaCuentaCorrienteModel.MedioPago)) ;
        bookLog.Details.Add(new Detail(238, eBookCajaCuentaCorrienteModel.Descripcion)) ;
        bookLog.Details.Add(new Detail(239, eBookCajaCuentaCorrienteModel.TipoDocumentoIdentidad)) ;
        bookLog.Details.Add(new Detail(240, eBookCajaCuentaCorrienteModel.NumeroDocumentoIdentidad)) ;
        bookLog.Details.Add(new Detail(241, eBookCajaCuentaCorrienteModel.ApellidosNombresDenominacionRazonSocial)) ;
        bookLog.Details.Add(new Detail(242, eBookCajaCuentaCorrienteModel.NumeroTransaccion)) ;
        bookLog.Details.Add(new Detail(243, eBookCajaCuentaCorrienteModel.ParteDeudoraSaldosMovimientos)) ;
        bookLog.Details.Add(new Detail(244, eBookCajaCuentaCorrienteModel.ParteAcreedoraSaldosMovimientos)) ;
        bookLog.Details.Add(new Detail(245, eBookCajaCuentaCorrienteModel.Estado)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EBookInventariosYBalancesModel
{
int IdPeriodo=0;
    public EBookInventariosYBalancesModel()
    {
    }
    public EBookInventariosYBalancesModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
    }
    public static List<EBookInventariosYBalancesModel> convert(List<BookLog> bookLogs)
    {

        List<EBookInventariosYBalancesModel> eBookInventariosYBalancesModel = new List<EBookInventariosYBalancesModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookInventariosYBalancesModel.Add(new EBookInventariosYBalancesModel(bookLog));
        }
        return eBookInventariosYBalancesModel;
    }

    public static List<BookLog> convert(List<EBookInventariosYBalancesModel> eBookInventariosYBalancesModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookInventariosYBalancesModel in eBookInventariosYBalancesModels)
        {
            bookLogs.Add(EBookInventariosYBalancesModel.convert(eBookInventariosYBalancesModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookInventariosYBalancesModel eBookInventariosYBalancesModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EBookRetencionesModel
{
int IdPeriodo=0;
    public EBookRetencionesModel()
    {
    }
    public EBookRetencionesModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
    }
    public static List<EBookRetencionesModel> convert(List<BookLog> bookLogs)
    {

        List<EBookRetencionesModel> eBookRetencionesModel = new List<EBookRetencionesModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookRetencionesModel.Add(new EBookRetencionesModel(bookLog));
        }
        return eBookRetencionesModel;
    }

    public static List<BookLog> convert(List<EBookRetencionesModel> eBookRetencionesModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookRetencionesModel in eBookRetencionesModels)
        {
            bookLogs.Add(EBookRetencionesModel.convert(eBookRetencionesModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookRetencionesModel eBookRetencionesModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EBookDiarioModel
{
int IdPeriodo=0;
/// <summary>
///  Periodo
///Formato: Alfanumérico
///Longitud: 8
///
///1. Obligatorio
///2. Validar formato AAAAMM00
///3. 01 <= MM <= 12
///4. Menor o igual al periodo informado
///5. Si el periodo es igual a periodo informado, campo 13 es igual a '1' 
///6. Si periodo es menor a periodo informado, entonces campo 13 es diferente a '1'
/// </summary>
[RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(Periodo
Formato: Alfanumérico
Longitud: 8

1. Obligatorio
2. Validar formato AAAAMM00
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
5. Si el periodo es igual a periodo informado, campo 13 es igual a '1' 
6. Si periodo es menor a periodo informado, entonces campo 13 es diferente a '1')")]
public string Periodo{ get; set; }

/// <summary>
///  Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable.
///Formato: Alfanumérico
///Longitud: Hasta 40
///
///1. Obligatorio

///2. Si el campo 13 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando'
///3. Si el campo 13 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación. Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
///4. Si el campo 13 es igual a '9', consignar el Código Único de la Operación (CUO) de la operación original que se modifica
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,40}$", ErrorMessage = @"(Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable.
Formato: Alfanumérico
Longitud: Hasta 40

1. Obligatorio

2. Si el campo 13 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando'
3. Si el campo 13 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación. Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
4. Si el campo 13 es igual a '9', consignar el Código Único de la Operación (CUO) de la operación original que se modifica)")]
public string CUO{ get; set; }

/// <summary>
///  Número correlativo del asiento contable identificado en el campo 2. 
///El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
///Formato: Alfanumérico
///Longitud: De 2 hasta 10
///
///1. Obligatorio
///2. El primer dígito debe ser: A, M o C
/// </summary>
[RegularExpression(@"^[Aa|Mm|Cc]\d{1,10}$", ErrorMessage = @"(Número correlativo del asiento contable identificado en el campo 2. 
El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
Formato: Alfanumérico
Longitud: De 2 hasta 10

1. Obligatorio
2. El primer dígito debe ser: A, M o C)")]
public string NumeroCorrelativo{ get; set; }

/// <summary>
///  Código del Plan de Cuentas utilizado por el deudor tributario
///Formato: Numérico
///Longitud: 2
///1. Obligatorio
///2. Validar con parámetro tabla 17
/// </summary>
[RegularExpression(@"^\d{2}$", ErrorMessage = @"(Código del Plan de Cuentas utilizado por el deudor tributario
Formato: Numérico
Longitud: 2
1. Obligatorio
2. Validar con parámetro tabla 17)")]
public string CodigoPlanCuentas{ get; set; }

/// <summary>
///  Código de la cuenta contable desagregado en subcuentas al nivel máximo de dígitos utilizado, según la estructura 5.3 - Detalle del Plan Contable utilizado.
///Formato: Numérico
///Longitud: Hasta 24
/// </summary>
[RegularExpression(@"^\d{3,24}$", ErrorMessage = @"(Código de la cuenta contable desagregado en subcuentas al nivel máximo de dígitos utilizado, según la estructura 5.3 - Detalle del Plan Contable utilizado.
Formato: Numérico
Longitud: Hasta 24)")]
public string CodigoCuenta{ get; set; }

/// <summary>
///  Fecha de la operación
///Formato: DD/MM/AAAA
///Longtud: 10
///1. Obligatorio
///2. Menor o igual al periodo informado
///3. Menor o igual al periodo señalado en el campo 1.
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(Fecha de la operación
Formato: DD/MM/AAAA
Longtud: 10
1. Obligatorio
2. Menor o igual al periodo informado
3. Menor o igual al periodo señalado en el campo 1.)")]
public string FechaOperacion{ get; set; }

/// <summary>
///  Glosa o descripción de la naturaleza de la operación registrada, de ser el caso.
///Formato: Alfanumérico
///Longitud: Hasta 100
///1. Obligatorio
/// </summary>
[RegularExpression(@"^[^|]{1,100}$", ErrorMessage = @"(Glosa o descripción de la naturaleza de la operación registrada, de ser el caso.
Formato: Alfanumérico
Longitud: Hasta 100
1. Obligatorio)")]
public string Glosa{ get; set; }

/// <summary>
///  Formato:Numérico
///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
///1. Positivo o '0.00'
///2. Excluyente con campo 9
///3. Campo 8 y 9 pueden ser ambos 0.00
///4. La suma del campo 8 (correspondiente al estado 1) debe ser igual a la suma del campo 9
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Formato:Numérico
Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
1. Positivo o '0.00'
2. Excluyente con campo 9
3. Campo 8 y 9 pueden ser ambos 0.00
4. La suma del campo 8 (correspondiente al estado 1) debe ser igual a la suma del campo 9)")]
public string MovimientosDebe{ get; set; }

/// <summary>
///  Formato:Numérico
///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
///1. Positivo o '0.00'
///2. Excluyente con campo 8
///3. Campo 8 y 9 pueden ser ambos 0.00
///4. La suma del campo 9 (correspondiente al estado 1) debe ser igual a la suma del campo 8
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Formato:Numérico
Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
1. Positivo o '0.00'
2. Excluyente con campo 8
3. Campo 8 y 9 pueden ser ambos 0.00
4. La suma del campo 9 (correspondiente al estado 1) debe ser igual a la suma del campo 8)")]
public string MovimientosHaber{ get; set; }

/// <summary>
///  Número correlativo utilizado en el Registro de Ventas e Ingresos. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. 
///
///Formato: Alfanumérico
///Longitud: Hasta 40
///
/// </summary>
[RegularExpression(@"^\d{1,40}$", ErrorMessage = @"(Número correlativo utilizado en el Registro de Ventas e Ingresos. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. 

Formato: Alfanumérico
Longitud: Hasta 40
)")]
public string NumeroCorrelativoRegistroVentasIngresos{ get; set; }

/// <summary>
///  Número correlativo utilizado en el Registro de Compras. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. 
/// </summary>
[RegularExpression(@"^\d{1,40}$", ErrorMessage = @"(Número correlativo utilizado en el Registro de Compras. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. )")]
public string NumeroCorrelativoRegistroCompras{ get; set; }

/// <summary>
///  Número correlativo utilizado en el Registro de Consignaciones. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro.
///Formato: Alfanumérico
///Longitud: Hasta 40.
/// </summary>
[RegularExpression(@"^\d{1,40}$", ErrorMessage = @"(Número correlativo utilizado en el Registro de Consignaciones. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro.
Formato: Alfanumérico
Longitud: Hasta 40.)")]
public string NumeroCorrelativoRegistroConsignaciones{ get; set; }

/// <summary>
///  Indica el estado de la operación
///Formato: Numérico
///Longitud: 1
///
///1. Obligatorio
///2. Registrar '1' cuando la operación corresponde al periodo.
///3. Registrar '8' cuando la operación corresponde a un periodo anterior y NO ha sido anotada en dicho periodo.
///4. Registrar '9' cuando la operación corresponde a un periodo anterior y SI ha sido anotada en dicho periodo.
///
/// </summary>
[RegularExpression(@"^\d{1}", ErrorMessage = @"(Indica el estado de la operación
Formato: Numérico
Longitud: 1

1. Obligatorio
2. Registrar '1' cuando la operación corresponde al periodo.
3. Registrar '8' cuando la operación corresponde a un periodo anterior y NO ha sido anotada en dicho periodo.
4. Registrar '9' cuando la operación corresponde a un periodo anterior y SI ha sido anotada en dicho periodo.
)")]
public string Estado{ get; set; }

    public EBookDiarioModel()
    {
    }
    public EBookDiarioModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==246).value; 
        CUO = bookLog.Details.Single(d=>d.fieldId==247).value; 
        NumeroCorrelativo = bookLog.Details.Single(d=>d.fieldId==248).value; 
        CodigoPlanCuentas = bookLog.Details.Single(d=>d.fieldId==249).value; 
        CodigoCuenta = bookLog.Details.Single(d=>d.fieldId==250).value; 
        FechaOperacion = bookLog.Details.Single(d=>d.fieldId==251).value; 
        Glosa = bookLog.Details.Single(d=>d.fieldId==252).value; 
        MovimientosDebe = bookLog.Details.Single(d=>d.fieldId==253).value; 
        MovimientosHaber = bookLog.Details.Single(d=>d.fieldId==254).value; 
        NumeroCorrelativoRegistroVentasIngresos = bookLog.Details.Single(d=>d.fieldId==255).value; 
        NumeroCorrelativoRegistroCompras = bookLog.Details.Single(d=>d.fieldId==256).value; 
        NumeroCorrelativoRegistroConsignaciones = bookLog.Details.Single(d=>d.fieldId==257).value; 
        Estado = bookLog.Details.Single(d=>d.fieldId==258).value; 
    }
    public static List<EBookDiarioModel> convert(List<BookLog> bookLogs)
    {

        List<EBookDiarioModel> eBookDiarioModel = new List<EBookDiarioModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookDiarioModel.Add(new EBookDiarioModel(bookLog));
        }
        return eBookDiarioModel;
    }

    public static List<BookLog> convert(List<EBookDiarioModel> eBookDiarioModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookDiarioModel in eBookDiarioModels)
        {
            bookLogs.Add(EBookDiarioModel.convert(eBookDiarioModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookDiarioModel eBookDiarioModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(246, eBookDiarioModel.Periodo)) ;
        bookLog.Details.Add(new Detail(247, eBookDiarioModel.CUO)) ;
        bookLog.Details.Add(new Detail(248, eBookDiarioModel.NumeroCorrelativo)) ;
        bookLog.Details.Add(new Detail(249, eBookDiarioModel.CodigoPlanCuentas)) ;
        bookLog.Details.Add(new Detail(250, eBookDiarioModel.CodigoCuenta)) ;
        bookLog.Details.Add(new Detail(251, eBookDiarioModel.FechaOperacion)) ;
        bookLog.Details.Add(new Detail(252, eBookDiarioModel.Glosa)) ;
        bookLog.Details.Add(new Detail(253, eBookDiarioModel.MovimientosDebe)) ;
        bookLog.Details.Add(new Detail(254, eBookDiarioModel.MovimientosHaber)) ;
        bookLog.Details.Add(new Detail(255, eBookDiarioModel.NumeroCorrelativoRegistroVentasIngresos)) ;
        bookLog.Details.Add(new Detail(256, eBookDiarioModel.NumeroCorrelativoRegistroCompras)) ;
        bookLog.Details.Add(new Detail(257, eBookDiarioModel.NumeroCorrelativoRegistroConsignaciones)) ;
        bookLog.Details.Add(new Detail(258, eBookDiarioModel.Estado)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EBookDiarioPlanContableModel
{
int IdPeriodo=0;
/// <summary>
///  Formato: Numérico
///Longitud: 8
///1. Obligatorio
///2. Validar formato AAAAMMDD
///3. 01 <= MM <= 12
///4. Menor o igual al periodo informado
///Longitud: 8
///5. Si el periodo es igual a periodo informado, campo 6 es igual a '1'.
///6. Si periodo es menor a periodo informado, entonces campo 6 es diferente a '1'
/// </summary>
[RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(Formato: Numérico
Longitud: 8
1. Obligatorio
2. Validar formato AAAAMMDD
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
Longitud: 8
5. Si el periodo es igual a periodo informado, campo 6 es igual a '1'.
6. Si periodo es menor a periodo informado, entonces campo 6 es diferente a '1')")]
public string Periodo{ get; set; }

/// <summary>
///  Código de la Cuenta Contable desagregada hasta el nivel máximo de dígitos utilizado
///Formato: Numérico
///Longitud 24
///
///1. Obligatorio
///2. Desde tres dígitos hasta el nivel el nivel máximo de dígitos utilizado por cuenta contable.
///
/// </summary>
[RegularExpression(@"^\d{3,24}$", ErrorMessage = @"(Código de la Cuenta Contable desagregada hasta el nivel máximo de dígitos utilizado
Formato: Numérico
Longitud 24

1. Obligatorio
2. Desde tres dígitos hasta el nivel el nivel máximo de dígitos utilizado por cuenta contable.
)")]
public string CodigoCuenta{ get; set; }

/// <summary>
///  Descripción de la Cuenta Contable desagregada al nivel máximo de dígitos utilizado
///Formato: alfanumérico
///Longitud: Hasta 100
/// </summary>
[RegularExpression(@"^[^|]{1,100}$", ErrorMessage = @"(Descripción de la Cuenta Contable desagregada al nivel máximo de dígitos utilizado
Formato: alfanumérico
Longitud: Hasta 100)")]
public string Descripcion{ get; set; }

/// <summary>
///  Código del Plan de Cuentas utilizado por el deudor tributario
///Formato:Numérico
///Longitud: 2
///
///1. Obligatorio
///2. Validar con parámetro tabla 17
///
/// </summary>
[RegularExpression(@"^\d{2}", ErrorMessage = @"(Código del Plan de Cuentas utilizado por el deudor tributario
Formato:Numérico
Longitud: 2

1. Obligatorio
2. Validar con parámetro tabla 17
)")]
public string CodigoPlan{ get; set; }

/// <summary>
///  Descripción del Plan de Cuentas utilizado por el deudor tributario
///Formato:Alfanumérico
///Longitud: Hasta 60
///1. Obligatorio
///2. Si campo4 = 99 entonces campo5 será <> “-“
///3. Si campo4 <>99 entonces campo5 = “-“
///
/// </summary>
[RegularExpression(@"^[^|]{1,60}$", ErrorMessage = @"(Descripción del Plan de Cuentas utilizado por el deudor tributario
Formato:Alfanumérico
Longitud: Hasta 60
1. Obligatorio
2. Si campo4 = 99 entonces campo5 será <> “-“
3. Si campo4 <>99 entonces campo5 = “-“
)")]
public string DescripcionPlan{ get; set; }

/// <summary>
///  Indica el estado de la operación
///Formato: Numérico
///Longitud: 1
///1. Obligatorio
///2. Registrar '1' cuando la Cuenta Contable se informa en el periodo.
///3. Registrar '8' cuando la Cuenta Contable se debió informar en un periodo anterior y NO se informó en dicho periodo.
///4. Registrar '9' cuando la Cuenta Contable se informó en un periodo anterior y se desea corregir.
/// </summary>
[RegularExpression(@"^\d{1}$", ErrorMessage = @"(Indica el estado de la operación
Formato: Numérico
Longitud: 1
1. Obligatorio
2. Registrar '1' cuando la Cuenta Contable se informa en el periodo.
3. Registrar '8' cuando la Cuenta Contable se debió informar en un periodo anterior y NO se informó en dicho periodo.
4. Registrar '9' cuando la Cuenta Contable se informó en un periodo anterior y se desea corregir.)")]
public string Estado{ get; set; }

    public EBookDiarioPlanContableModel()
    {
    }
    public EBookDiarioPlanContableModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==259).value; 
        CodigoCuenta = bookLog.Details.Single(d=>d.fieldId==260).value; 
        Descripcion = bookLog.Details.Single(d=>d.fieldId==261).value; 
        CodigoPlan = bookLog.Details.Single(d=>d.fieldId==262).value; 
        DescripcionPlan = bookLog.Details.Single(d=>d.fieldId==263).value; 
        Estado = bookLog.Details.Single(d=>d.fieldId==264).value; 
    }
    public static List<EBookDiarioPlanContableModel> convert(List<BookLog> bookLogs)
    {

        List<EBookDiarioPlanContableModel> eBookDiarioPlanContableModel = new List<EBookDiarioPlanContableModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookDiarioPlanContableModel.Add(new EBookDiarioPlanContableModel(bookLog));
        }
        return eBookDiarioPlanContableModel;
    }

    public static List<BookLog> convert(List<EBookDiarioPlanContableModel> eBookDiarioPlanContableModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookDiarioPlanContableModel in eBookDiarioPlanContableModels)
        {
            bookLogs.Add(EBookDiarioPlanContableModel.convert(eBookDiarioPlanContableModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookDiarioPlanContableModel eBookDiarioPlanContableModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(259, eBookDiarioPlanContableModel.Periodo)) ;
        bookLog.Details.Add(new Detail(260, eBookDiarioPlanContableModel.CodigoCuenta)) ;
        bookLog.Details.Add(new Detail(261, eBookDiarioPlanContableModel.Descripcion)) ;
        bookLog.Details.Add(new Detail(262, eBookDiarioPlanContableModel.CodigoPlan)) ;
        bookLog.Details.Add(new Detail(263, eBookDiarioPlanContableModel.DescripcionPlan)) ;
        bookLog.Details.Add(new Detail(264, eBookDiarioPlanContableModel.Estado)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EBookDiarioSimplificadoModel
{
int IdPeriodo=0;
/// <summary>
///  1. Obligatorio
///2. Validar formato AAAAMM00
///3. 01 <= MM <= 12
///4. Menor o igual al periodo informado
///5. Si el periodo es igual a periodo informado, campo 13 es igual a '1'
///6. Si periodo es menor a periodo informado, entonces campo 13 es diferente a '1'
/// </summary>
[RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(1. Obligatorio
2. Validar formato AAAAMM00
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
5. Si el periodo es igual a periodo informado, campo 13 es igual a '1'
6. Si periodo es menor a periodo informado, entonces campo 13 es diferente a '1')")]
public string Periodo{ get; set; }

/// <summary>
///  Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable.
///3. Si el campo 13 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación.
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,40}$", ErrorMessage = @"(Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable.
3. Si el campo 13 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación.)")]
public string CUO{ get; set; }

/// <summary>
///  Número correlativo del asiento contable identificado en el campo 2.
///1. Obligatorio
///2. El primer dígito debe ser: A, M o C
/// </summary>
[RegularExpression(@"^[Aa|Mm|Cc]\d{1,10}$", ErrorMessage = @"(Número correlativo del asiento contable identificado en el campo 2.
1. Obligatorio
2. El primer dígito debe ser: A, M o C)")]
public string NumeroCorrelativo{ get; set; }

/// <summary>
///  Código de la cuenta contable desagregado en subcuentas al nivel máximo de dígitos utilizado, según la estructura 5.4 - Detalle del Plan Contable utilizado
///
///1. Obligatorio
/// </summary>
[RegularExpression(@"^\d{3,24}$", ErrorMessage = @"(Código de la cuenta contable desagregado en subcuentas al nivel máximo de dígitos utilizado, según la estructura 5.4 - Detalle del Plan Contable utilizado

1. Obligatorio)")]
public string CodigoCuentaContable { get; set; }

/// <summary>
///  1. Obligatorio
///2. Menor o igual al periodo informado
///3. Menor o igual al periodo señalado en el campo 1.
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(1. Obligatorio
2. Menor o igual al periodo informado
3. Menor o igual al periodo señalado en el campo 1.)")]
public string FechaOperaciónOEmisión{ get; set; }

/// <summary>
///  Glosa o descripción de la naturaleza de la operación registrada, de ser el caso.
///
///1. Obligatorio
/// </summary>
[RegularExpression(@"^[^|]{1,200}$", ErrorMessage = @"(Glosa o descripción de la naturaleza de la operación registrada, de ser el caso.

1. Obligatorio)")]
public string Glosa{ get; set; }

/// <summary>
///  1. Positivo o '0.00'
///2. Excluyente con campo 9
///3. Campo 8 y 9 pueden ser ambos 0.00
///4. La suma del campo 8 (correspondiente al estado 1) debe ser igual a la suma del campo 9
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Positivo o '0.00'
2. Excluyente con campo 9
3. Campo 8 y 9 pueden ser ambos 0.00
4. La suma del campo 8 (correspondiente al estado 1) debe ser igual a la suma del campo 9)")]
public string MovimientosDebe{ get; set; }

/// <summary>
///  1. Positivo o '0.00'
///2. Excluyente con campo 8
///3. Campo 8 y 9 pueden ser ambos 0.00
///4. La suma del campo 9 (correspondiente al estado 1) debe ser igual a la suma del campo 8
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Positivo o '0.00'
2. Excluyente con campo 8
3. Campo 8 y 9 pueden ser ambos 0.00
4. La suma del campo 9 (correspondiente al estado 1) debe ser igual a la suma del campo 8)")]
public string MovimientosHaber{ get; set; }

/// <summary>
///  Indica el estado de la operación
///
///1. Obligatorio
///2. Registrar '1' cuando la operación corresponde al periodo.
///3. Registrar '8' cuando la operación corresponde a un periodo anterior y NO ha sido anotada en dicho periodo.
///4. Registrar '9' cuando la operación corresponde a un periodo anterior y SI ha sido anotada en dicho periodo.
/// </summary>
[RegularExpression(@"^\d{1}", ErrorMessage = @"(Indica el estado de la operación

1. Obligatorio
2. Registrar '1' cuando la operación corresponde al periodo.
3. Registrar '8' cuando la operación corresponde a un periodo anterior y NO ha sido anotada en dicho periodo.
4. Registrar '9' cuando la operación corresponde a un periodo anterior y SI ha sido anotada en dicho periodo.)")]
public string Estado{ get; set; }

/// <summary>
///  Código de la Unidad de Operación, de la Unidad Económica Administrativa, de la Unidad de Negocio, de la Unidad de Producción, de la Línea, de la Concesión, del Local o del Lote, de corresponder. Se puede utilizar varios códigos a la vez en este campo, separandolos con el carácter '&'.
/// </summary>
[RegularExpression(@" ^[^|]{1,24}$", ErrorMessage = @"(Código de la Unidad de Operación, de la Unidad Económica Administrativa, de la Unidad de Negocio, de la Unidad de Producción, de la Línea, de la Concesión, del Local o del Lote, de corresponder. Se puede utilizar varios códigos a la vez en este campo, separandolos con el carácter '&'.)")]
public string CodigoUnidadOperacion{ get; set; }

/// <summary>
///  Código del Centro de Costos, Centro de Utilidades o Centro de Inversión, de corresponder
/// </summary>
[RegularExpression(@"^[^|]{1,24}$", ErrorMessage = @"(Código del Centro de Costos, Centro de Utilidades o Centro de Inversión, de corresponder)")]
public string CodigoCentroCostos{ get; set; }

/// <summary>
///  1. Obligatorio
///2. Validar con parámetro tabla 4
/// </summary>
[RegularExpression(@" ^\d{2}$", ErrorMessage = @"(1. Obligatorio
2. Validar con parámetro tabla 4)")]
public string TipoMonedaOrigen{ get; set; }

/// <summary>
///  Tipo de documento de identidad del emisor
///
///1. Aplicar Regla general
/// </summary>
[RegularExpression(@" ", ErrorMessage = @"(Tipo de documento de identidad del emisor

1. Aplicar Regla general)")]
public string TipoDocumentoIdentidadEmisor{ get; set; }

/// <summary>
///  numero de documento de identidad del emisor
///1. Aplicar Regla general
/// </summary>
[RegularExpression(@" ", ErrorMessage = @"(numero de documento de identidad del emisor
1. Aplicar Regla general)")]
public string NumeroDocumentoIdentidadEmisor{ get; set; }

/// <summary>
///  Tipo de Comprobante de Pago o Documento asociada a la operación, de corresponder
///1. Obligatorio
///2. Validar con parámetro tabla 10
/// </summary>
[RegularExpression(@" ", ErrorMessage = @"(Tipo de Comprobante de Pago o Documento asociada a la operación, de corresponder
1. Obligatorio
2. Validar con parámetro tabla 10)")]
public string TipoComprobantePago{ get; set; }

/// <summary>
///  Número de serie del comprobante de pago o documento asociada a la operación, de corresponder
///1. Aplicar Regla General (tipo y nro. doc.)
/// </summary>
[RegularExpression(@" ", ErrorMessage = @"(Número de serie del comprobante de pago o documento asociada a la operación, de corresponder
1. Aplicar Regla General (tipo y nro. doc.))")]
public string NumeroSerieComprobantePago{ get; set; }

/// <summary>
///  Número del comprobante de pago o documento asociada a la operación
/// </summary>
[RegularExpression(@" ", ErrorMessage = @"(Número del comprobante de pago o documento asociada a la operación)")]
public string NumeroComprobantePago{ get; set; }

/// <summary>
///  1. Menor o igual al periodo informado.
///2. Menor o igual al periodo señalado en el campo 1.
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(1. Menor o igual al periodo informado.
2. Menor o igual al periodo señalado en el campo 1.)")]
public string FechaContable{ get; set; }

/// <summary>
///  Fecha de vencimiento
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(Fecha de vencimiento)")]
public string FechaVencimiento{ get; set; }

/// <summary>
///  Glosa referencial, de ser el caso
/// </summary>
[RegularExpression(@"^[^|]{1,200}$", ErrorMessage = @"(Glosa referencial, de ser el caso)")]
public string GlosaReferencial{ get; set; }

/// <summary>
///  Dato Estructurado: Código del libro, campo 1, campo 2 y campo 3 del Registro de Ventas e Ingresos o del Registro de Compras, separados con el carácter '&', de corresponder.
/// </summary>
[RegularExpression(@" ", ErrorMessage = @"(Dato Estructurado: Código del libro, campo 1, campo 2 y campo 3 del Registro de Ventas e Ingresos o del Registro de Compras, separados con el carácter '&', de corresponder.)")]
public string DatoEstructurado{ get; set; }

    public EBookDiarioSimplificadoModel()
    {
    }
    public EBookDiarioSimplificadoModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==4).value; 
        CUO = bookLog.Details.Single(d=>d.fieldId==5).value; 
        NumeroCorrelativo = bookLog.Details.Single(d=>d.fieldId==8).value; 
        CodigoCuentaContable  = bookLog.Details.Single(d=>d.fieldId==10).value; 
        FechaOperaciónOEmisión = bookLog.Details.Single(d=>d.fieldId==11).value; 
        Glosa = bookLog.Details.Single(d=>d.fieldId==12).value; 
        MovimientosDebe = bookLog.Details.Single(d=>d.fieldId==13).value; 
        MovimientosHaber = bookLog.Details.Single(d=>d.fieldId==14).value; 
        Estado = bookLog.Details.Single(d=>d.fieldId==18).value; 
        CodigoUnidadOperacion = bookLog.Details.Single(d=>d.fieldId==265).value; 
        CodigoCentroCostos = bookLog.Details.Single(d=>d.fieldId==266).value; 
        TipoMonedaOrigen = bookLog.Details.Single(d=>d.fieldId==267).value; 
        TipoDocumentoIdentidadEmisor = bookLog.Details.Single(d=>d.fieldId==268).value; 
        NumeroDocumentoIdentidadEmisor = bookLog.Details.Single(d=>d.fieldId==269).value; 
        TipoComprobantePago = bookLog.Details.Single(d=>d.fieldId==270).value; 
        NumeroSerieComprobantePago = bookLog.Details.Single(d=>d.fieldId==271).value; 
        NumeroComprobantePago = bookLog.Details.Single(d=>d.fieldId==272).value; 
        FechaContable = bookLog.Details.Single(d=>d.fieldId==273).value; 
        FechaVencimiento = bookLog.Details.Single(d=>d.fieldId==274).value; 
        GlosaReferencial = bookLog.Details.Single(d=>d.fieldId==275).value; 
        DatoEstructurado = bookLog.Details.Single(d=>d.fieldId==276).value; 
    }
    public static List<EBookDiarioSimplificadoModel> convert(List<BookLog> bookLogs)
    {

        List<EBookDiarioSimplificadoModel> eBookDiarioSimplificadoModel = new List<EBookDiarioSimplificadoModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookDiarioSimplificadoModel.Add(new EBookDiarioSimplificadoModel(bookLog));
        }
        return eBookDiarioSimplificadoModel;
    }

    public static List<BookLog> convert(List<EBookDiarioSimplificadoModel> eBookDiarioSimplificadoModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookDiarioSimplificadoModel in eBookDiarioSimplificadoModels)
        {
            bookLogs.Add(EBookDiarioSimplificadoModel.convert(eBookDiarioSimplificadoModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookDiarioSimplificadoModel eBookDiarioSimplificadoModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(4, eBookDiarioSimplificadoModel.Periodo)) ;
        bookLog.Details.Add(new Detail(5, eBookDiarioSimplificadoModel.CUO)) ;
        bookLog.Details.Add(new Detail(8, eBookDiarioSimplificadoModel.NumeroCorrelativo)) ;
        bookLog.Details.Add(new Detail(10, eBookDiarioSimplificadoModel.CodigoCuentaContable )) ;
        bookLog.Details.Add(new Detail(11, eBookDiarioSimplificadoModel.FechaOperaciónOEmisión)) ;
        bookLog.Details.Add(new Detail(12, eBookDiarioSimplificadoModel.Glosa)) ;
        bookLog.Details.Add(new Detail(13, eBookDiarioSimplificadoModel.MovimientosDebe)) ;
        bookLog.Details.Add(new Detail(14, eBookDiarioSimplificadoModel.MovimientosHaber)) ;
        bookLog.Details.Add(new Detail(18, eBookDiarioSimplificadoModel.Estado)) ;
        bookLog.Details.Add(new Detail(265, eBookDiarioSimplificadoModel.CodigoUnidadOperacion)) ;
        bookLog.Details.Add(new Detail(266, eBookDiarioSimplificadoModel.CodigoCentroCostos)) ;
        bookLog.Details.Add(new Detail(267, eBookDiarioSimplificadoModel.TipoMonedaOrigen)) ;
        bookLog.Details.Add(new Detail(268, eBookDiarioSimplificadoModel.TipoDocumentoIdentidadEmisor)) ;
        bookLog.Details.Add(new Detail(269, eBookDiarioSimplificadoModel.NumeroDocumentoIdentidadEmisor)) ;
        bookLog.Details.Add(new Detail(270, eBookDiarioSimplificadoModel.TipoComprobantePago)) ;
        bookLog.Details.Add(new Detail(271, eBookDiarioSimplificadoModel.NumeroSerieComprobantePago)) ;
        bookLog.Details.Add(new Detail(272, eBookDiarioSimplificadoModel.NumeroComprobantePago)) ;
        bookLog.Details.Add(new Detail(273, eBookDiarioSimplificadoModel.FechaContable)) ;
        bookLog.Details.Add(new Detail(274, eBookDiarioSimplificadoModel.FechaVencimiento)) ;
        bookLog.Details.Add(new Detail(275, eBookDiarioSimplificadoModel.GlosaReferencial)) ;
        bookLog.Details.Add(new Detail(276, eBookDiarioSimplificadoModel.DatoEstructurado)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EBookDiarioSimplificadoPlanContableModel
{
int IdPeriodo=0;
/// <summary>
///  Formato: Numérico
///Longitud: 8
///1. Obligatorio
///2. Validar formato AAAAMMDD
///3. 01 <= MM <= 12
///4. Menor o igual al periodo informado
///Longitud: 8
///5. Si el periodo es igual a periodo informado, campo 6 es igual a '1'.
///6. Si periodo es menor a periodo informado, entonces campo 6 es diferente a '1'
/// </summary>
[RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(Formato: Numérico
Longitud: 8
1. Obligatorio
2. Validar formato AAAAMMDD
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
Longitud: 8
5. Si el periodo es igual a periodo informado, campo 6 es igual a '1'.
6. Si periodo es menor a periodo informado, entonces campo 6 es diferente a '1')")]
public string Periodo{ get; set; }

/// <summary>
///  Código de la Cuenta Contable desagregada hasta el nivel máximo de dígitos utilizado
///Formato: Numérico
///Longitud 24
///
///1. Obligatorio
///2. Desde tres dígitos hasta el nivel el nivel máximo de dígitos utilizado por cuenta contable.
///
/// </summary>
[RegularExpression(@"^\d{3,24}$", ErrorMessage = @"(Código de la Cuenta Contable desagregada hasta el nivel máximo de dígitos utilizado
Formato: Numérico
Longitud 24

1. Obligatorio
2. Desde tres dígitos hasta el nivel el nivel máximo de dígitos utilizado por cuenta contable.
)")]
public string CodigoCuentaContable { get; set; }

/// <summary>
///  Descripción de la Cuenta Contable desagregada al nivel máximo de dígitos utilizado
///Longitud: Hasta 100
///1. Obligatorio
///
/// </summary>
[RegularExpression(@"^[^|]{1,100}$", ErrorMessage = @"(Descripción de la Cuenta Contable desagregada al nivel máximo de dígitos utilizado
Longitud: Hasta 100
1. Obligatorio
)")]
public string DescripcionCuentaContable{ get; set; }

/// <summary>
///  Código del Plan de Cuentas utilizado por el deudor tributario
///Longitud: 2
///1. Obligatorio
///2. Validar con parámetro tabla 17
///
/// </summary>
[RegularExpression(@"^\d{2}", ErrorMessage = @"(Código del Plan de Cuentas utilizado por el deudor tributario
Longitud: 2
1. Obligatorio
2. Validar con parámetro tabla 17
)")]
public string CodigoPlanCuentas{ get; set; }

/// <summary>
///  Descripción del Plan de Cuentas utilizado por el deudor tributario
///Formato:Alfanumérico
///Longitud: Hasta 60
///1. Obligatorio
///2. Si campo4 = 99 entonces campo5 será <> “-“
///3. Si campo4 <>99 entonces campo5 = “-“
///
/// </summary>
[RegularExpression(@"^[^|]{1,60}$", ErrorMessage = @"(Descripción del Plan de Cuentas utilizado por el deudor tributario
Formato:Alfanumérico
Longitud: Hasta 60
1. Obligatorio
2. Si campo4 = 99 entonces campo5 será <> “-“
3. Si campo4 <>99 entonces campo5 = “-“
)")]
public string DescripcionPlan{ get; set; }

/// <summary>
///  Indica el estado de la operación
///Formato: Numérico
///Longitud: 1
///1. Obligatorio
///2. Registrar '1' cuando la Cuenta Contable se informa en el periodo.
///3. Registrar '8' cuando la Cuenta Contable se debió informar en un periodo anterior y NO se informó en dicho periodo.
///4. Registrar '9' cuando la Cuenta Contable se informó en un periodo anterior y se desea corregir.
/// </summary>
[RegularExpression(@"^\d{1}$", ErrorMessage = @"(Indica el estado de la operación
Formato: Numérico
Longitud: 1
1. Obligatorio
2. Registrar '1' cuando la Cuenta Contable se informa en el periodo.
3. Registrar '8' cuando la Cuenta Contable se debió informar en un periodo anterior y NO se informó en dicho periodo.
4. Registrar '9' cuando la Cuenta Contable se informó en un periodo anterior y se desea corregir.)")]
public string Estado{ get; set; }

    public EBookDiarioSimplificadoPlanContableModel()
    {
    }
    public EBookDiarioSimplificadoPlanContableModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==6).value; 
        CodigoCuentaContable  = bookLog.Details.Single(d=>d.fieldId==7).value; 
        DescripcionCuentaContable = bookLog.Details.Single(d=>d.fieldId==19).value; 
        CodigoPlanCuentas = bookLog.Details.Single(d=>d.fieldId==20).value; 
        DescripcionPlan = bookLog.Details.Single(d=>d.fieldId==21).value; 
        Estado = bookLog.Details.Single(d=>d.fieldId==22).value; 
    }
    public static List<EBookDiarioSimplificadoPlanContableModel> convert(List<BookLog> bookLogs)
    {

        List<EBookDiarioSimplificadoPlanContableModel> eBookDiarioSimplificadoPlanContableModel = new List<EBookDiarioSimplificadoPlanContableModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookDiarioSimplificadoPlanContableModel.Add(new EBookDiarioSimplificadoPlanContableModel(bookLog));
        }
        return eBookDiarioSimplificadoPlanContableModel;
    }

    public static List<BookLog> convert(List<EBookDiarioSimplificadoPlanContableModel> eBookDiarioSimplificadoPlanContableModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookDiarioSimplificadoPlanContableModel in eBookDiarioSimplificadoPlanContableModels)
        {
            bookLogs.Add(EBookDiarioSimplificadoPlanContableModel.convert(eBookDiarioSimplificadoPlanContableModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookDiarioSimplificadoPlanContableModel eBookDiarioSimplificadoPlanContableModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(6, eBookDiarioSimplificadoPlanContableModel.Periodo)) ;
        bookLog.Details.Add(new Detail(7, eBookDiarioSimplificadoPlanContableModel.CodigoCuentaContable )) ;
        bookLog.Details.Add(new Detail(19, eBookDiarioSimplificadoPlanContableModel.DescripcionCuentaContable)) ;
        bookLog.Details.Add(new Detail(20, eBookDiarioSimplificadoPlanContableModel.CodigoPlanCuentas)) ;
        bookLog.Details.Add(new Detail(21, eBookDiarioSimplificadoPlanContableModel.DescripcionPlan)) ;
        bookLog.Details.Add(new Detail(22, eBookDiarioSimplificadoPlanContableModel.Estado)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}


/// <summary>
///
/// </summary>
public partial class EbookComprasModel
{
int IdPeriodo=0;
/// <summary>
///  1. Obligatorio
///2. Validar formato AAAAMM00
///3. 01 <= MM <= 12
///4. Menor o igual al periodo informado
///5. Si periodo es menor a periodo informado, entonces campo 34 es igual a '9'
///6. Si el periodo es igual a periodo informado, campo 34 es diferente a '9'
///
///Longitud:8
/// </summary>
[RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(1. Obligatorio
2. Validar formato AAAAMM00
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
5. Si periodo es menor a periodo informado, entonces campo 34 es igual a '9'
6. Si el periodo es igual a periodo informado, campo 34 es diferente a '9'

Longitud:8)")]
public string Periodo{ get; set; }

/// <summary>
///  1. Contribuyentes del Régimen General: Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable en el Libro Diario o  en el Libro Diario de Formato Simplificado en que se registró la operación.
///2. Contribuyentes del Régimen Especial de Renta - RER:  Consignar la frase 'RER'.
///
///Longitud: Hasta 40
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,40}$", ErrorMessage = @"(1. Contribuyentes del Régimen General: Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable en el Libro Diario o  en el Libro Diario de Formato Simplificado en que se registró la operación.
2. Contribuyentes del Régimen Especial de Renta - RER:  Consignar la frase 'RER'.

Longitud: Hasta 40)")]
public string CUO{ get; set; }

/// <summary>
///  1. Contribuyentes del Régimen General: Número correlativo del asiento contable identificado en el campo 2, cuando se utilice el Código Único de la Operación (CUO). El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
///2. Contribuyentes del Régimen Especial de Renta - RER:  Número correlativo. El primer dígito debe ser: 'M'.
///
///
///Longitud: de 2 hasta 10
/// </summary>
[RegularExpression(@"^[Aa|Mm|Cc]\d{1,10}$", ErrorMessage = @"(1. Contribuyentes del Régimen General: Número correlativo del asiento contable identificado en el campo 2, cuando se utilice el Código Único de la Operación (CUO). El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
2. Contribuyentes del Régimen Especial de Renta - RER:  Número correlativo. El primer dígito debe ser: 'M'.


Longitud: de 2 hasta 10)")]
public string Correlativo{ get; set; }

/// <summary>
///  1. Obligatorio
///2. Menor o igual al periodo informado
///3. Menor o igual al periodo señalado en el campo 1.
///4. Si fecha de emisión corresponde al periodo señalado en el campo 1, entonces campo 34 = '1'
///5. Si fecha de emisión está dentro de los doce meses anteriores al periodo señalado en el campo 1, entonces campo 34 = '6'
///6. Si fecha de emisión está fuera de los doce meses anteriores al periodo señalado en el campo 1, entonces campo 34 = '7'
///
///Formato:DD/MM/AAAA
///Longitud: 10
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(1. Obligatorio
2. Menor o igual al periodo informado
3. Menor o igual al periodo señalado en el campo 1.
4. Si fecha de emisión corresponde al periodo señalado en el campo 1, entonces campo 34 = '1'
5. Si fecha de emisión está dentro de los doce meses anteriores al periodo señalado en el campo 1, entonces campo 34 = '6'
6. Si fecha de emisión está fuera de los doce meses anteriores al periodo señalado en el campo 1, entonces campo 34 = '7'

Formato:DD/MM/AAAA
Longitud: 10)")]
public string FechaEmisiónComprobantePagoODocumento{ get; set; }

/// <summary>
///  1. Opcional, excepto cuando el campo 6 = '14' en cuyo caso es obligatorio
///2. Menor o igual al mes siguiente del periodo informado
///3. Menor o igual al mes siguiente del periodo señalado en el campo 1.
///
///Formato: DD/MM/AAAA
///Longitud: 10
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(1. Opcional, excepto cuando el campo 6 = '14' en cuyo caso es obligatorio
2. Menor o igual al mes siguiente del periodo informado
3. Menor o igual al mes siguiente del periodo señalado en el campo 1.

Formato: DD/MM/AAAA
Longitud: 10)")]
public string FechaVencimientoOFechaPago{ get; set; }

/// <summary>
///  1. Obligatorio
///2. Validar con parámetro tabla 10
///
///Longitud: 2 
/// </summary>
[RegularExpression(@"^\d{2}$", ErrorMessage = @"(1. Obligatorio
2. Validar con parámetro tabla 10

Longitud: 2 )")]
public string TipoComprobantePagoODocumento{ get; set; }

/// <summary>
///  Serie del comprobante de pago o documento. En los casos de la Declaración Aduanera de Mercancias - Importación definitiva, de la Despacho Simplificado - Importación Simplificada o de la Importación Courier -  Envios de Entrega Rápida, se consignará el código de la dependencia Aduanera.
///
///1. Obligatorio, de acuerdo al tipo de documento
///2. Aplicar Regla General (tipo y nro. doc.)
///
///Longitud: Hasta 20
/// </summary>
[RegularExpression(@"^\d{4,20}$", ErrorMessage = @"(Serie del comprobante de pago o documento. En los casos de la Declaración Aduanera de Mercancias - Importación definitiva, de la Despacho Simplificado - Importación Simplificada o de la Importación Courier -  Envios de Entrega Rápida, se consignará el código de la dependencia Aduanera.

1. Obligatorio, de acuerdo al tipo de documento
2. Aplicar Regla General (tipo y nro. doc.)

Longitud: Hasta 20)")]
public string SerieComprobantePagoODocumento{ get; set; }

/// <summary>
///  Año de emisión de la Declaración Aduanera de Mercancias - Importación definitiva o de la Despacho Simplificado - Importación Simplificada
///
///1. Obligatorio solo si campo 6 = '50' , '52'
///2.   Si campo 6 = '50' , '52' registrar número mayor a  1981 y menor o igual al año del periodo informado o al año del periodo señalado en el campo 1.
///
///Longitud: 4
/// </summary>
[RegularExpression(@"^\d{4}$", ErrorMessage = @"(Año de emisión de la Declaración Aduanera de Mercancias - Importación definitiva o de la Despacho Simplificado - Importación Simplificada

1. Obligatorio solo si campo 6 = '50' , '52'
2.   Si campo 6 = '50' , '52' registrar número mayor a  1981 y menor o igual al año del periodo informado o al año del periodo señalado en el campo 1.

Longitud: 4)")]
public string AnyoEmisionDeclaracionAduaneraMercancias{ get; set; }

/// <summary>
///  Número del comprobante de pago o documento o número de orden del formulario físico o virtual donde conste el pago del impuesto, tratándose de liquidaciones de compra, utilización de servicios prestados por no domiciliados u otros, número de la Declaración
///Longitud: Hasta 20
/// </summary>
[RegularExpression(@"^\d{1,20}$", ErrorMessage = @"(Número del comprobante de pago o documento o número de orden del formulario físico o virtual donde conste el pago del impuesto, tratándose de liquidaciones de compra, utilización de servicios prestados por no domiciliados u otros, número de la Declaración
Longitud: Hasta 20)")]
public string NumeroComprobantePago{ get; set; }

/// <summary>
///  1. Si campo 6 = '00','03','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88', campo 10 debe ser positivo o cero
///
///Longitud: Hasta 20
/// </summary>
[RegularExpression(@"^\d{1,20}$", ErrorMessage = @"(1. Si campo 6 = '00','03','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88', campo 10 debe ser positivo o cero

Longitud: Hasta 20)")]
public string NumeroFinalComprobante{ get; set; }

/// <summary>
///  1. Obligatorio, excepto cuando
///a. campo 6 = '00','03','05','06','07','08','11','12','13','14','15','16','18','19','22','23','26','28','30','34','35','36','37','55','56','87','88', '91', '97' y '98' o
///b. campo 6 = '07', '08', '87', '88', '97', '98' y campo 25 = '03', '12', '13', '14' y '36'
///en cuyos casos será opcional
///2. Validar con parámetro tabla 2
///
///Longitud: 1
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]$", ErrorMessage = @"(1. Obligatorio, excepto cuando
a. campo 6 = '00','03','05','06','07','08','11','12','13','14','15','16','18','19','22','23','26','28','30','34','35','36','37','55','56','87','88', '91', '97' y '98' o
b. campo 6 = '07', '08', '87', '88', '97', '98' y campo 25 = '03', '12', '13', '14' y '36'
en cuyos casos será opcional
2. Validar con parámetro tabla 2

Longitud: 1)")]
public string TipoDocumentoIdentidadProveedor{ get; set; }

/// <summary>
///  1. Obligatorio, excepto cuando
///a. campo 6 = 
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{8,15}$", ErrorMessage = @"(1. Obligatorio, excepto cuando
a. campo 6 = )")]
public string NumeroRUCProveedorONumeroDocumentoIdentidad{ get; set; }

/// <summary>
///  Apellidos y nombres, denominación o razón social  del proveedor. En caso de personas naturales se debe consignar los datos en el siguiente orden: apellido paterno, apellido materno y nombre completo.
///
///1. Obligatorio, excepto cuando
///a. campo 6 = Longitud: Hasta 100
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9\s]{1,100}$", ErrorMessage = @"(Apellidos y nombres, denominación o razón social  del proveedor. En caso de personas naturales se debe consignar los datos en el siguiente orden: apellido paterno, apellido materno y nombre completo.

1. Obligatorio, excepto cuando
a. campo 6 = Longitud: Hasta 100)")]
public string ApellidosNombresDenominacionORazonSocialProveedor{ get; set; }

/// <summary>
///  Base imponible de las adquisiciones gravadas que dan derecho a crédito fiscal y/o saldo a favor por exportación, destinadas exclusivamente a operaciones gravadas y/o de exportación
///
///1. Acepta negativos
///Longitud: Hasta 20 enteros y 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Base imponible de las adquisiciones gravadas que dan derecho a crédito fiscal y/o saldo a favor por exportación, destinadas exclusivamente a operaciones gravadas y/o de exportación

1. Acepta negativos
Longitud: Hasta 20 enteros y 2 decimales)")]
public string BaseImponibleAdquisicionesGravadasDestinadasAGravadas{ get; set; }

/// <summary>
///  Monto del Impuesto General a las Ventas y/o Impuesto de Promoción Municipal
///
///1. Acepta negativos
///2. Impuesto que corresponde a la adquisición registrada conforme lo dispuesto en el campo 14.
///Longitud: Hasta 20 enteros y 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Monto del Impuesto General a las Ventas y/o Impuesto de Promoción Municipal

1. Acepta negativos
2. Impuesto que corresponde a la adquisición registrada conforme lo dispuesto en el campo 14.
Longitud: Hasta 20 enteros y 2 decimales)")]
public string MontoImpuestoGeneralVentasDestinadasAGravadas{ get; set; }

/// <summary>
///  Base imponible de las adquisiciones gravadas que dan derecho a crédito fiscal y/o saldo a favor por exportación, destinadas a operaciones gravadas y/o de exportación y a operaciones no gravadas
///
///1. Acepta negativos
///Longitud: Hasta 20 entero y 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Base imponible de las adquisiciones gravadas que dan derecho a crédito fiscal y/o saldo a favor por exportación, destinadas a operaciones gravadas y/o de exportación y a operaciones no gravadas

1. Acepta negativos
Longitud: Hasta 20 entero y 2 decimales)")]
public string BaseImponibleAdquisicionesGravadasDestinadasGravadasYNoGravadas{ get; set; }

/// <summary>
///  Monto del Impuesto General a las Ventas y/o Impuesto de Promoción Municipal
///1. Acepta negativos
///2. Impuesto que corresponde a la adquisición registrada conforme lo dispuesto en el campo 16.
///
///Longitud: Hasta 20 enteros y 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Monto del Impuesto General a las Ventas y/o Impuesto de Promoción Municipal
1. Acepta negativos
2. Impuesto que corresponde a la adquisición registrada conforme lo dispuesto en el campo 16.

Longitud: Hasta 20 enteros y 2 decimales)")]
public string MontoImpuestoGeneralVentasDestinadasAGravadasYNoGravadas{ get; set; }

/// <summary>
///  Base imponible de las adquisiciones gravadas que no dan derecho a crédito fiscal y/o saldo a favor por exportación, por no estar destinadas a operaciones gravadas y/o de exportación.
///
///1. Acepta negativos
///Longitud: Hasta 20 enteros y hasta 2 
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Base imponible de las adquisiciones gravadas que no dan derecho a crédito fiscal y/o saldo a favor por exportación, por no estar destinadas a operaciones gravadas y/o de exportación.

1. Acepta negativos
Longitud: Hasta 20 enteros y hasta 2 )")]
public string BaseImponibleAdquisicionesGravadasDestinadasANoGravadas{ get; set; }

/// <summary>
///  Monto del Impuesto General a las Ventas y/o Impuesto de Promoción Municipal
///1. Acepta negativos
///2. Impuesto que corresponde a la adquisición registrada conforme lo dispuesto en el campo 18.
///
///Longitud:Hasta 20 enteros y hasta 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Monto del Impuesto General a las Ventas y/o Impuesto de Promoción Municipal
1. Acepta negativos
2. Impuesto que corresponde a la adquisición registrada conforme lo dispuesto en el campo 18.

Longitud:Hasta 20 enteros y hasta 2 decimales)")]
public string MontoImpuestoGeneralVentasDestinadasANoGravadas{ get; set; }

/// <summary>
///  1. Acepta negativos
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos)")]
public string ValorAdquisicionesNoGravadas{ get; set; }

/// <summary>
///  Monto del Impuesto Selectivo al Consumo en los casos en que el sujeto pueda utilizarlo como deducción.
///
///1. Acepta negativos
///
///Longitud: Hasta 20 enteros y hasta 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Monto del Impuesto Selectivo al Consumo en los casos en que el sujeto pueda utilizarlo como deducción.

1. Acepta negativos

Longitud: Hasta 20 enteros y hasta 2 decimales)")]
public string MontoImpuestoSelectivoConsumo { get; set; }

/// <summary>
///  1. Acepta negativos
///
///Longitud: Hasta 20 enteros y hasta 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos

Longitud: Hasta 20 enteros y hasta 2 decimales)")]
public string OtrosConceptosTributosCargosNoFormanParteBaseImponible{ get; set; }

/// <summary>
///  1. Acepta negativos
///
///Longitud: Hasta 20 enteros y hasta 2 decimales
/// </summary>
[RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos

Longitud: Hasta 20 enteros y hasta 2 decimales)")]
public string ImporteTotalAdquisicionesRegistradasSegunComprobantePago{ get; set; }

/// <summary>
///  '1.  #.###
///2. Positivo'
///
///Longitud: 1 entero y 3 decimales
///
/// </summary>
[RegularExpression(@"^\d{1}.\d{3}$", ErrorMessage = @"('1.  #.###
2. Positivo'

Longitud: 1 entero y 3 decimales
)")]
public string TipoCambio{ get; set; }

/// <summary>
///  '1. Obligatorio, si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
///2. Menor o igual al periodo informado
///3. Menor o igual al periodo señalado en el campo 1.'
///
///Formato: DD/MM/AAAA
///Longitud: 10
/// </summary>
[RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"('1. Obligatorio, si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
2. Menor o igual al periodo informado
3. Menor o igual al periodo señalado en el campo 1.'

Formato: DD/MM/AAAA
Longitud: 10)")]
public string FechaEmisionComprobantePagoQueSeModifica{ get; set; }

/// <summary>
///  '1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
///2. Validar con parámetro tabla 10'
///
///Longitud: 2
/// </summary>
[RegularExpression(@"^{2}$", ErrorMessage = @"('1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
2. Validar con parámetro tabla 10'

Longitud: 2)")]
public string TipoComprobantePagoQueSeModifica{ get; set; }

/// <summary>
///  '1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
///2. Aplicar Regla General (por tipo de doc.)'
///
///Longitud: Hasta 20
///
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,20}$", ErrorMessage = @"('1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
2. Aplicar Regla General (por tipo de doc.)'

Longitud: Hasta 20
)")]
public string NumeroSerieComprobantePagoQueSeModifica{ get; set; }

/// <summary>
///  Código de la dependencia Aduanera de la Declaración Única de Aduanas (DUA) o de la Declaración Simplificada de Importación (DSI) .
///
///'1. Validar con parámetro tabla 11
///2. Obligatorio si campo 26 = '50' , '52'. '
///
///Longitud: 3
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{3}$", ErrorMessage = @"(Código de la dependencia Aduanera de la Declaración Única de Aduanas (DUA) o de la Declaración Simplificada de Importación (DSI) .

'1. Validar con parámetro tabla 11
2. Obligatorio si campo 26 = '50' , '52'. '

Longitud: 3)")]
public string CodigoDependenciaAduaneraDeclaraciónUnicaAduanasDUA { get; set; }

/// <summary>
///  1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
///
///Longitud: Hasta 20
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,20}$", ErrorMessage = @"(1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'

Longitud: Hasta 20)")]
public string NumeroComprobantePagoQueSeModifica{ get; set; }

        /// <summary>
        ///  1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'
        ///
        ///Longitud: Hasta 20
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,20}$", ErrorMessage = @"(1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98'

Longitud: Hasta 20)")]
        public string NumeroComprobantePagoEmitidoSujetoNoDomiciliado { get; set; }

        /// <summary>
        ///  '1. Menor o igual al mes siguiente del periodo informado
        ///2. Menor o igual al mes siguiente del periodo señalado en el campo 1.'
        ///
        ///Formato: DD/MM/AAAA
        ///
        ///Longitud: 10
        ///
        /// </summary>
        [RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"('1. Menor o igual al mes siguiente del periodo informado
2. Menor o igual al mes siguiente del periodo señalado en el campo 1.'

Formato: DD/MM/AAAA

Longitud: 10
)")]
public string FechaEmisionConstanciaDepositoDetraccion{ get; set; }

/// <summary>
///  1. Positivo, de ser numérico
///Longitud: Hasta 24
/// </summary>
[RegularExpression(@"^[a-zA-Z0-9]{1,24}$", ErrorMessage = @"(1. Positivo, de ser numérico
Longitud: Hasta 24)")]
public string NumeroConstanciaDepositoDetraccion{ get; set; }

/// <summary>
///  '1. Obligatorio
///2. Si identifica el comprobante sujeto a retención consignar '1', caso contrario '0''
///
///Longitud: 1
///
/// </summary>
[RegularExpression(@"^\d{1}", ErrorMessage = @"('1. Obligatorio
2. Si identifica el comprobante sujeto a retención consignar '1', caso contrario '0''

Longitud: 1
)")]
public string MarcaComprobantePagoSujetoARetencion{ get; set; }

/// <summary>
///  1. Obligatorio
///2. Registrar '0' cuando la operación (anotación optativa sin efecto en el IGV) corresponde al periodo.
///3. Registrar '1' cuando se anota el Comprobante de Pago o documento en el periodo que se emitió o que se pagó el impuesto, según corresponda.
///Longitud: 1
///POSIBLES VALORES:
///1: La operación corresponde al periodo.
///6: La fecha de emisión del CdP o del pago del impuesto por operaciones que otorguen derecho a credito fiscal, es anterior al periodo de anotación y esta se produce dentro de los doce meses siguientes a la emisión o pago del impuesto, según corresponda.
///7: La fecha de emisión del CdP o del pago del impuesto por operaciones que otorgaban derecho a credito fiscal, es anterior al periodo de anotación y esta se produce dentro de los doce meses siguientes a la emisión o pago del impuesto, según corresponda.
///9: La operación (CdP) corresponde a un periodo anterior y SI ha sido anotad en dicho
///
///periodo.
///0:La operación (anotación optativa sin efecto en el IGV corresponde al periodo, emitidas
///
///en el periodo)
/// </summary>
[RegularExpression(@"^\d{1}", ErrorMessage = @"(1. Obligatorio
2. Registrar '0' cuando la operación (anotación optativa sin efecto en el IGV) corresponde al periodo.
3. Registrar '1' cuando se anota el Comprobante de Pago o documento en el periodo que se emitió o que se pagó el impuesto, según corresponda.
Longitud: 1
POSIBLES VALORES:
1: La operación corresponde al periodo.
6: La fecha de emisión del CdP o del pago del impuesto por operaciones que otorguen derecho a credito fiscal, es anterior al periodo de anotación y esta se produce dentro de los doce meses siguientes a la emisión o pago del impuesto, según corresponda.
7: La fecha de emisión del CdP o del pago del impuesto por operaciones que otorgaban derecho a credito fiscal, es anterior al periodo de anotación y esta se produce dentro de los doce meses siguientes a la emisión o pago del impuesto, según corresponda.
9: La operación (CdP) corresponde a un periodo anterior y SI ha sido anotad en dicho

periodo.
0:La operación (anotación optativa sin efecto en el IGV corresponde al periodo, emitidas

en el periodo))")]
public string EstadoQueIdentificaOportunidadAnotaciónOIndicacionSiCorrespondeAAjuste{ get; set; }

/// <summary>
///  1. Validar con parámetro tabla 4
/// </summary>
[RegularExpression(@" ^\d{2}$", ErrorMessage = @"(1. Validar con parámetro tabla 4)")]
public string CodigoMoneda{ get; set; }

/// <summary>
///  Aplicable solo a los contribuyentes que hayan obtenido ingresos mayores a 1,500 UIT en el ejercicio anterior
///1. Validar con parámetro tabla 30
/// </summary>
[RegularExpression(@"^\d{2}$", ErrorMessage = @"(Aplicable solo a los contribuyentes que hayan obtenido ingresos mayores a 1,500 UIT en el ejercicio anterior
1. Validar con parámetro tabla 30)")]
public string ClasificacionBienesServiciosAdquiridos{ get; set; }

/// <summary>
///  Identificación del Contrato o del proyecto en el caso de los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente.
///
///1. Uso exclusivo para los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente. En este caso, deberán identificar cada contrato o proyecto.
/// </summary>
[RegularExpression(@" ^[a-zA-Z0-9\s]{1,12}$", ErrorMessage = @"(Identificación del Contrato o del proyecto en el caso de los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente.

1. Uso exclusivo para los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente. En este caso, deberán identificar cada contrato o proyecto.)")]
public string IdentificacionContratoProyecto{ get; set; }

/// <summary>
///  1. El tipo de cambio (campo 25) correspondiente a la fecha de emisión (campo 4) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago, excepto el tipo 14 (tabla 10).
///2. El tipo de cambio (campo 25) correspondiente a la fecha de vencimiento (campo 5) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica sólo al tipo de comprobantes de pago 14 (tabla 10).
/// </summary>
[RegularExpression(@"^\d{1}$", ErrorMessage = @"(1. El tipo de cambio (campo 25) correspondiente a la fecha de emisión (campo 4) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago, excepto el tipo 14 (tabla 10).
2. El tipo de cambio (campo 25) correspondiente a la fecha de vencimiento (campo 5) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica sólo al tipo de comprobantes de pago 14 (tabla 10).)")]
public string ErrorTipo1{ get; set; }

/// <summary>
///  1. El número de RUC (campo 12) no debe ser igual al número de RUC (campo 1) de la Estructura 2 Padrón de RUCs no Habidos, siempre que la fecha (campo 4) se encuentre comprendida entre la fecha de inicio en que adquirió la condición de no habido (campo 2) y la la fecha de fin de la condición de no habido (campo3) de la  Estructura 2 Padrón de RUCs no Habidos, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago (tabla 10).
/// </summary>
[RegularExpression(@"^\d{1}$", ErrorMessage = @"(1. El número de RUC (campo 12) no debe ser igual al número de RUC (campo 1) de la Estructura 2 Padrón de RUCs no Habidos, siempre que la fecha (campo 4) se encuentre comprendida entre la fecha de inicio en que adquirió la condición de no habido (campo 2) y la la fecha de fin de la condición de no habido (campo3) de la  Estructura 2 Padrón de RUCs no Habidos, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago (tabla 10).)")]
public string ErrorTipo2{ get; set; }

/// <summary>
///  1. El número de RUC (campo 12) no debe ser igual al número de RUC (campo 1) de la Estructura 3 Padrón de RUCs que renunciaron a la exoneración del IGV, siempre que la fecha (campo 4) sea menor a la fecha que renunció a la exoneración del IGV (campo 2) de la  Estructura 3 Padrón de RUCs que renunciaron a la exoneración del IGV, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago (tabla 10).
/// </summary>
[RegularExpression(@"^\d{1}$", ErrorMessage = @"(1. El número de RUC (campo 12) no debe ser igual al número de RUC (campo 1) de la Estructura 3 Padrón de RUCs que renunciaron a la exoneración del IGV, siempre que la fecha (campo 4) sea menor a la fecha que renunció a la exoneración del IGV (campo 2) de la  Estructura 3 Padrón de RUCs que renunciaron a la exoneración del IGV, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago (tabla 10).)")]
public string ErrorTipo3{ get; set; }

/// <summary>
///  Error tipo 4: inconsistencia por DNIs que fueron utilizados en las Liquidaciones de Compra y que ya cuentan con RUC
///1. El número de DNI (campo 12) no debe ser igual al número de DNI (campo 1) de la Estructura 4 Padrón de RUCs asociados al DNI, siempre que la fecha (campo 4) sea menor a la fecha que se crea el RUC (campo 3) de la  Estructura 4 Padrón de RUCs asociados al DNI, caso contrario se debe consignar '1'. Esto se aplica sólo al tipo de comprobante de pago 04 'Liquidaciones de Compra' (tabla 10).
/// </summary>
[RegularExpression(@"^\d{1}$", ErrorMessage = @"(Error tipo 4: inconsistencia por DNIs que fueron utilizados en las Liquidaciones de Compra y que ya cuentan con RUC
1. El número de DNI (campo 12) no debe ser igual al número de DNI (campo 1) de la Estructura 4 Padrón de RUCs asociados al DNI, siempre que la fecha (campo 4) sea menor a la fecha que se crea el RUC (campo 3) de la  Estructura 4 Padrón de RUCs asociados al DNI, caso contrario se debe consignar '1'. Esto se aplica sólo al tipo de comprobante de pago 04 'Liquidaciones de Compra' (tabla 10).)")]
public string ErrorTipo4{ get; set; }

/// <summary>
///  1. Consignar '1' si el comprobante de pago fue cancelado con algún medio de pago establecido en la tabla 1, caso contrario no consignar nada
/// </summary>
[RegularExpression(@"^\d{1}$", ErrorMessage = @"(1. Consignar '1' si el comprobante de pago fue cancelado con algún medio de pago establecido en la tabla 1, caso contrario no consignar nada)")]
public string IndicadorComprobantesPagoCanceladosConMedioPago{ get; set; }

    public EbookComprasModel()
    {
    }
    public EbookComprasModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==55).value; 
        CUO = bookLog.Details.Single(d=>d.fieldId==56).value; 
        Correlativo = bookLog.Details.Single(d=>d.fieldId==57).value; 
        FechaEmisiónComprobantePagoODocumento = bookLog.Details.Single(d=>d.fieldId==58).value; 
        FechaVencimientoOFechaPago = bookLog.Details.Single(d=>d.fieldId==59).value; 
        TipoComprobantePagoODocumento = bookLog.Details.Single(d=>d.fieldId==60).value; 
        SerieComprobantePagoODocumento = bookLog.Details.Single(d=>d.fieldId==61).value; 
        AnyoEmisionDeclaracionAduaneraMercancias = bookLog.Details.Single(d=>d.fieldId==62).value; 
        NumeroComprobantePago = bookLog.Details.Single(d=>d.fieldId==63).value; 
        NumeroFinalComprobante = bookLog.Details.Single(d=>d.fieldId==64).value; 
        TipoDocumentoIdentidadProveedor = bookLog.Details.Single(d=>d.fieldId==65).value; 
        NumeroRUCProveedorONumeroDocumentoIdentidad = bookLog.Details.Single(d=>d.fieldId==68).value; 
        ApellidosNombresDenominacionORazonSocialProveedor = bookLog.Details.Single(d=>d.fieldId==69).value; 
        BaseImponibleAdquisicionesGravadasDestinadasAGravadas = bookLog.Details.Single(d=>d.fieldId==90).value; 
        MontoImpuestoGeneralVentasDestinadasAGravadas = bookLog.Details.Single(d=>d.fieldId==91).value; 
        BaseImponibleAdquisicionesGravadasDestinadasGravadasYNoGravadas = bookLog.Details.Single(d=>d.fieldId==92).value; 
        MontoImpuestoGeneralVentasDestinadasAGravadasYNoGravadas = bookLog.Details.Single(d=>d.fieldId==93).value; 
        BaseImponibleAdquisicionesGravadasDestinadasANoGravadas = bookLog.Details.Single(d=>d.fieldId==94).value; 
        MontoImpuestoGeneralVentasDestinadasANoGravadas = bookLog.Details.Single(d=>d.fieldId==95).value; 
        ValorAdquisicionesNoGravadas = bookLog.Details.Single(d=>d.fieldId==96).value; 
        MontoImpuestoSelectivoConsumo  = bookLog.Details.Single(d=>d.fieldId==97).value; 
        OtrosConceptosTributosCargosNoFormanParteBaseImponible = bookLog.Details.Single(d=>d.fieldId==98).value; 
        ImporteTotalAdquisicionesRegistradasSegunComprobantePago = bookLog.Details.Single(d=>d.fieldId==99).value; 
        TipoCambio = bookLog.Details.Single(d=>d.fieldId==100).value; 
        FechaEmisionComprobantePagoQueSeModifica = bookLog.Details.Single(d=>d.fieldId==101).value; 
        TipoComprobantePagoQueSeModifica = bookLog.Details.Single(d=>d.fieldId==102).value; 
        NumeroSerieComprobantePagoQueSeModifica = bookLog.Details.Single(d=>d.fieldId==103).value; 
        CodigoDependenciaAduaneraDeclaraciónUnicaAduanasDUA  = bookLog.Details.Single(d=>d.fieldId==104).value; 
        NumeroComprobantePagoQueSeModifica = bookLog.Details.Single(d=>d.fieldId==105).value; 
        FechaEmisionConstanciaDepositoDetraccion = bookLog.Details.Single(d=>d.fieldId==107).value; 
        NumeroConstanciaDepositoDetraccion = bookLog.Details.Single(d=>d.fieldId==108).value; 
        MarcaComprobantePagoSujetoARetencion = bookLog.Details.Single(d=>d.fieldId==109).value; 
        EstadoQueIdentificaOportunidadAnotaciónOIndicacionSiCorrespondeAAjuste = bookLog.Details.Single(d=>d.fieldId==110).value; 
        CodigoMoneda = bookLog.Details.Single(d=>d.fieldId==283).value; 
        ClasificacionBienesServiciosAdquiridos = bookLog.Details.Single(d=>d.fieldId==291).value; 
        IdentificacionContratoProyecto = bookLog.Details.Single(d=>d.fieldId==292).value; 
        ErrorTipo1 = bookLog.Details.Single(d=>d.fieldId==293).value; 
        ErrorTipo2 = bookLog.Details.Single(d=>d.fieldId==294).value; 
        ErrorTipo3 = bookLog.Details.Single(d=>d.fieldId==295).value; 
        ErrorTipo4 = bookLog.Details.Single(d=>d.fieldId==296).value; 
        IndicadorComprobantesPagoCanceladosConMedioPago = bookLog.Details.Single(d=>d.fieldId==297).value; 
    }
    public static List<EbookComprasModel> convert(List<BookLog> bookLogs)
    {

        List<EbookComprasModel> ebookComprasModel = new List<EbookComprasModel>();
        foreach(var bookLog in bookLogs)
        {
            ebookComprasModel.Add(new EbookComprasModel(bookLog));
        }
        return ebookComprasModel;
    }

    public static List<BookLog> convert(List<EbookComprasModel> ebookComprasModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var ebookComprasModel in ebookComprasModels)
        {
            bookLogs.Add(EbookComprasModel.convert(ebookComprasModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EbookComprasModel ebookComprasModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(55, ebookComprasModel.Periodo)) ;
        bookLog.Details.Add(new Detail(56, ebookComprasModel.CUO)) ;
        bookLog.Details.Add(new Detail(57, ebookComprasModel.Correlativo)) ;
        bookLog.Details.Add(new Detail(58, ebookComprasModel.FechaEmisiónComprobantePagoODocumento)) ;
        bookLog.Details.Add(new Detail(59, ebookComprasModel.FechaVencimientoOFechaPago)) ;
        bookLog.Details.Add(new Detail(60, ebookComprasModel.TipoComprobantePagoODocumento)) ;
        bookLog.Details.Add(new Detail(61, ebookComprasModel.SerieComprobantePagoODocumento)) ;
        bookLog.Details.Add(new Detail(62, ebookComprasModel.AnyoEmisionDeclaracionAduaneraMercancias)) ;
        bookLog.Details.Add(new Detail(63, ebookComprasModel.NumeroComprobantePago)) ;
        bookLog.Details.Add(new Detail(64, ebookComprasModel.NumeroFinalComprobante)) ;
        bookLog.Details.Add(new Detail(65, ebookComprasModel.TipoDocumentoIdentidadProveedor)) ;
        bookLog.Details.Add(new Detail(68, ebookComprasModel.NumeroRUCProveedorONumeroDocumentoIdentidad)) ;
        bookLog.Details.Add(new Detail(69, ebookComprasModel.ApellidosNombresDenominacionORazonSocialProveedor)) ;
        bookLog.Details.Add(new Detail(90, ebookComprasModel.BaseImponibleAdquisicionesGravadasDestinadasAGravadas)) ;
        bookLog.Details.Add(new Detail(91, ebookComprasModel.MontoImpuestoGeneralVentasDestinadasAGravadas)) ;
        bookLog.Details.Add(new Detail(92, ebookComprasModel.BaseImponibleAdquisicionesGravadasDestinadasGravadasYNoGravadas)) ;
        bookLog.Details.Add(new Detail(93, ebookComprasModel.MontoImpuestoGeneralVentasDestinadasAGravadasYNoGravadas)) ;
        bookLog.Details.Add(new Detail(94, ebookComprasModel.BaseImponibleAdquisicionesGravadasDestinadasANoGravadas)) ;
        bookLog.Details.Add(new Detail(95, ebookComprasModel.MontoImpuestoGeneralVentasDestinadasANoGravadas)) ;
        bookLog.Details.Add(new Detail(96, ebookComprasModel.ValorAdquisicionesNoGravadas)) ;
        bookLog.Details.Add(new Detail(97, ebookComprasModel.MontoImpuestoSelectivoConsumo )) ;
        bookLog.Details.Add(new Detail(98, ebookComprasModel.OtrosConceptosTributosCargosNoFormanParteBaseImponible)) ;
        bookLog.Details.Add(new Detail(99, ebookComprasModel.ImporteTotalAdquisicionesRegistradasSegunComprobantePago)) ;
        bookLog.Details.Add(new Detail(100, ebookComprasModel.TipoCambio)) ;
        bookLog.Details.Add(new Detail(101, ebookComprasModel.FechaEmisionComprobantePagoQueSeModifica)) ;
        bookLog.Details.Add(new Detail(102, ebookComprasModel.TipoComprobantePagoQueSeModifica)) ;
        bookLog.Details.Add(new Detail(103, ebookComprasModel.NumeroSerieComprobantePagoQueSeModifica)) ;
        bookLog.Details.Add(new Detail(104, ebookComprasModel.CodigoDependenciaAduaneraDeclaraciónUnicaAduanasDUA )) ;
        bookLog.Details.Add(new Detail(105, ebookComprasModel.NumeroComprobantePagoQueSeModifica)) ;
        bookLog.Details.Add(new Detail(107, ebookComprasModel.FechaEmisionConstanciaDepositoDetraccion)) ;
        bookLog.Details.Add(new Detail(108, ebookComprasModel.NumeroConstanciaDepositoDetraccion)) ;
        bookLog.Details.Add(new Detail(109, ebookComprasModel.MarcaComprobantePagoSujetoARetencion)) ;
        bookLog.Details.Add(new Detail(110, ebookComprasModel.EstadoQueIdentificaOportunidadAnotaciónOIndicacionSiCorrespondeAAjuste)) ;
        bookLog.Details.Add(new Detail(283, ebookComprasModel.CodigoMoneda)) ;
        bookLog.Details.Add(new Detail(291, ebookComprasModel.ClasificacionBienesServiciosAdquiridos)) ;
        bookLog.Details.Add(new Detail(292, ebookComprasModel.IdentificacionContratoProyecto)) ;
        bookLog.Details.Add(new Detail(293, ebookComprasModel.ErrorTipo1)) ;
        bookLog.Details.Add(new Detail(294, ebookComprasModel.ErrorTipo2)) ;
        bookLog.Details.Add(new Detail(295, ebookComprasModel.ErrorTipo3)) ;
        bookLog.Details.Add(new Detail(296, ebookComprasModel.ErrorTipo4)) ;
        bookLog.Details.Add(new Detail(297, ebookComprasModel.IndicadorComprobantesPagoCanceladosConMedioPago)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }

    public string ToStringPLE()
    {
         string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
    }



}
    */

    /// <summary>
    ///
    /// </summary>
    public partial class EBookVentasIngresosModel
    {
        int IdPeriodo = 0;
        /// <summary>
        ///  1. Obligatorio
        ///
        ///2. Validar formato AAAAMM00
        ///
        ///3. 01 <= MM <= 12
        ///
        ///4. Menor o igual al periodo informado
        ///
        ///5. Si el periodo es igual a periodo informado, campo 29 es igual a '1'  o '2'
        ///
        ///6. Si periodo es menor a periodo informado, entonces campo 29 es diferente a a '1'
        ///'
        ///Longitud: 8
        /// </summary>
        [RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(1. Obligatorio

2. Validar formato AAAAMM00

3. 01 <= MM <= 12

4. Menor o igual al periodo informado

5. Si el periodo es igual a periodo informado, campo 29 es igual a '1'  o '2'

6. Si periodo es menor a periodo informado, entonces campo 29 es diferente a a '1'
'
Longitud: 8)")]
        public string Periodo { get; set; }

        /// <summary>
        ///  1. Contribuyentes del Régimen General: Número correlativo del mes o Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable en el Libro Diario o del Libro Diario de Formato Simplificado en que se registró la operación
        ///Longitud: Hasta 40
        ///
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,40}$", ErrorMessage = @"(1. Contribuyentes del Régimen General: Número correlativo del mes o Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable en el Libro Diario o del Libro Diario de Formato Simplificado en que se registró la operación
Longitud: Hasta 40
)")]
        public string CUO { get; set; }

        /// <summary>
        ///  '1. Contribuyentes del Régimen General: Número correlativo del asiento contable identificado en el campo
        ///2, cuando se utilice el Código Único de la Operación (CUO). El primer dígito debe ser: ''A'' para el asiento de apertura del ejercicio, ''M'' para los asientos de movimientos o ajustes del mes o ''C'' para el asiento de cierre del ejercicio.
        ///Longitud: de 2 hasta 10
        /// </summary>
        [RegularExpression(@"^[Aa|Mm|Cc]\d{1,10}$", ErrorMessage = @"('1. Contribuyentes del Régimen General: Número correlativo del asiento contable identificado en el campo
2, cuando se utilice el Código Único de la Operación (CUO). El primer dígito debe ser: ''A'' para el asiento de apertura del ejercicio, ''M'' para los asientos de movimientos o ajustes del mes o ''C'' para el asiento de cierre del ejercicio.
Longitud: de 2 hasta 10)")]
        public string NumeroCorrelativo { get; set; }

        /// <summary>
        ///  1. Obligatorio, excepto cuando el campo 29 = '2'
        ///
        ///2. Menor o igual al periodo informado
        ///
        ///3. Menor o igual al periodo señalado en el campo 1.'
        ///
        ///Formato: DD/MM/AAAA
        ///Longitud: 10
        /// </summary>
        [RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(1. Obligatorio, excepto cuando el campo 29 = '2'

2. Menor o igual al periodo informado

3. Menor o igual al periodo señalado en el campo 1.'

Formato: DD/MM/AAAA
Longitud: 10)")]
        public string FechaEmisionComprobantePago { get; set; }

        /// <summary>
        ///  1. Solo es obligatorio cuando el campo 6 = '14' y campo 29 <> '2'
        ///
        ///2. Menor o igual al mes siguiente del periodo informado
        ///
        ///3. Menor o igual al mes siguiente del periodo señalado en el campo 1.'
        ///Formato: DD/MM/AAAA
        ///Longitud: 10
        /// </summary>
        [RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(1. Solo es obligatorio cuando el campo 6 = '14' y campo 29 <> '2'

2. Menor o igual al mes siguiente del periodo informado

3. Menor o igual al mes siguiente del periodo señalado en el campo 1.'
Formato: DD/MM/AAAA
Longitud: 10)")]
        public string FechaVencimientoOFechaPago { get; set; }

        /// <summary>
        ///  1. Obligatorio
        ///
        ///2. Validar con parámetro tabla 10'
        ///Longitud: 2
        ///
        /// </summary>
        [RegularExpression(@"^\d{2}", ErrorMessage = @"(1. Obligatorio

2. Validar con parámetro tabla 10'
Longitud: 2
)")]
        public string TipoComprobantePagoODocumento { get; set; }

        /// <summary>
        ///  1. Obligatorio de acuerdo al tipo de documento
        ///
        ///2. Aplicar Regla General (tipo y nro. doc.)'
        ///Longitud: Hasta 20
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,20}$", ErrorMessage = @"(1. Obligatorio de acuerdo al tipo de documento

2. Aplicar Regla General (tipo y nro. doc.)'
Longitud: Hasta 20)")]
        public string NumeroSerieComprobantePagoODocumento { get; set; }

        /// <summary>
        ///  'Número del comprobante de pago o documento.
        ///Para efectos del registro de tickets o cintas emitidos por máquinas registradoras que no otorguen derecho a crédito fiscal de acuerdo a las normas de Comprobantes de Pago y opten por anotar el importe total de las operaciones realizadas por día y por máquina registradora, registrar el número inicial (2)
        ///'
        ///1. Obligatorio
        ///
        ///2. Aplicar Regla General (por tipo de doc.)'
        ///Longitud: Hasta 20
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,20}$", ErrorMessage = @"('Número del comprobante de pago o documento.
Para efectos del registro de tickets o cintas emitidos por máquinas registradoras que no otorguen derecho a crédito fiscal de acuerdo a las normas de Comprobantes de Pago y opten por anotar el importe total de las operaciones realizadas por día y por máquina registradora, registrar el número inicial (2)
'
1. Obligatorio

2. Aplicar Regla General (por tipo de doc.)'
Longitud: Hasta 20)")]
        public string NumeroComprobantePagoODocumento { get; set; }

        /// <summary>
        ///  Para efectos del registro de tickets o cintas emitidos por máquinas registradoras que no otorguen derecho a crédito fiscal de acuerdo a las normas de Comprobantes de Pago
        ///Longitud: Hasta 20
        /// </summary>
        [RegularExpression(@"^\d{1,20}$", ErrorMessage = @"(Para efectos del registro de tickets o cintas emitidos por máquinas registradoras que no otorguen derecho a crédito fiscal de acuerdo a las normas de Comprobantes de Pago
Longitud: Hasta 20)")]
        public string NumeroFinal { get; set; }

        /// <summary>
        ///  1. Obligatorio, excepto cuando
        ///
        ///a. campo 6 = '00','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88' o
        ///
        ///b. campo 29 = '2' o
        ///
        ///c. campo 6 = '07', '08', '87', '88', '97', '98' y campo 29 = '03', '12', '13', '14' y '36'
        ///d. campo 13 > 0.00
        ///e. campo 22 < 1500.00
        ///2.
        ///Validar con parámetro tabla 2'
        ///Longitud: 1
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]", ErrorMessage = @"(1. Obligatorio, excepto cuando

a. campo 6 = '00','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88' o

b. campo 29 = '2' o

c. campo 6 = '07', '08', '87', '88', '97', '98' y campo 29 = '03', '12', '13', '14' y '36'
d. campo 13 > 0.00
e. campo 22 < 1500.00
2.
Validar con parámetro tabla 2'
Longitud: 1)")]
        public string TipoDocumentoIdentidadCliente { get; set; }

        /// <summary>
        ///  1. Obligatorio excepto cuando
        ///
        ///a. campo 6 = '00','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88' o
        ///
        ///b. campo 29 = '2' o
        ///
        ///c. campo 6 = '07', '08', '87', '88', '97', '98' y campo 29 = '03', '12', '13', '14' y '36'
        ///d. campo 13 > 0.00
        ///
        ///e. campo 22 < 1500.00
        ///2.
        ///Aplicar Regla General (tipo y nro. doc.)'
        ///Longitud: Hasta 15
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,15}$", ErrorMessage = @"(1. Obligatorio excepto cuando

a. campo 6 = '00','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88' o

b. campo 29 = '2' o

c. campo 6 = '07', '08', '87', '88', '97', '98' y campo 29 = '03', '12', '13', '14' y '36'
d. campo 13 > 0.00

e. campo 22 < 1500.00
2.
Aplicar Regla General (tipo y nro. doc.)'
Longitud: Hasta 15)")]
        public string NumeroDocumentoIdentidadCliente { get; set; }

        /// <summary>
        ///  Apellidos y nombres, denominación o razón social  del cliente. En caso de personas naturales se debe consignar los datos en el siguiente orden: Apellido paterno, apellido materno y nombre completo.
        ///1. Obligatorio excepto cuando
        ///a. campo 6 = '00','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88' o
        ///b. campo 29 = '2' o
        ///c. campo 6 = '07', '08', '87', '88', '97', '98' y campo 29 = '03', '12', '13', '14' y '36'
        ///d. campo 13 > 0.00
        ///e. campo 22 < 1500.00
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,100}$", ErrorMessage = @"(Apellidos y nombres, denominación o razón social  del cliente. En caso de personas naturales se debe consignar los datos en el siguiente orden: Apellido paterno, apellido materno y nombre completo.
1. Obligatorio excepto cuando
a. campo 6 = '00','05','06','07','08','11','12','13','14','15','16','18','19','23','26','28','30','34','35','36','37','55','56','87' y '88' o
b. campo 29 = '2' o
c. campo 6 = '07', '08', '87', '88', '97', '98' y campo 29 = '03', '12', '13', '14' y '36'
d. campo 13 > 0.00
e. campo 22 < 1500.00)")]
        public string ApellidosYNombres { get; set; }

        /// <summary>
        ///  Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string ValorFacturadoExportacion { get; set; }

        /// <summary>
        ///  Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string BaseImponibleOperacionGravada { get; set; }

        /// <summary>
        ///  1. Acepta negativos
        ///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos
Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string ImporteTotalOperacionExonerada { get; set; }

        /// <summary>
        ///  1. Acepta negativos
        ///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos
Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string ImporteTotalOperacionInafecta { get; set; }

        /// <summary>
        ///  1. Acepta negativos
        ///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos
Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string ImpuestoSelectivoConsumo { get; set; }

        /// <summary>
        ///  1. Acepta negativos
        ///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos
Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string ImpuestoGeneralVentasYOImpuestoPromocionMunicipal { get; set; }

        /// <summary>
        ///  '1. Obligatorio si campo 6 = '40' y campo 29 <> '2'
        ///2. Acepta negativos '
        ///
        ///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"('1. Obligatorio si campo 6 = '40' y campo 29 <> '2'
2. Acepta negativos '

Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string BaseImponibleOperacionGravadaImpuestoVentasArrozPilado { get; set; }

        /// <summary>
        ///  '1. Obligatorio si campo 6 = '40'  y campo 29 <> '2'
        ///2. Acepta negativos'
        ///
        ///Longitud:Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"('1. Obligatorio si campo 6 = '40'  y campo 29 <> '2'
2. Acepta negativos'

Longitud:Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string ImpuestoVentasArrozPilado { get; set; }

        /// <summary>
        ///  
        ///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(
Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string OtrosConceptosTributosCargosNoFormanParteBaseImponible { get; set; }

        /// <summary>
        ///  1. Acepta negativos
        ///
        ///Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
        ///
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos

Longitud: Hasta 20 enteros y hasta 2 decimales, sin comas de miles
)")]
        public string ImporteTotalComprobantePago { get; set; }

        /// <summary>
        ///  '1. #.###
        ///2. Positivo'
        ///
        ///Longitud:1 entero y 3 decimales
        ///
        /// </summary>
        [RegularExpression(@"^\d{1}.\d{3}$", ErrorMessage = @"('1. #.###
2. Positivo'

Longitud:1 entero y 3 decimales
)")]
        public string TipoCambio { get; set; }

        /// <summary>
        ///  Fecha de emisión del comprobante de pago o documento original que se modifica (6) o documento referencial al documento que sustenta el crédito fiscal
        ///1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98' y campo 29 <> '2'
        ///
        ///2. Menor o igual al periodo informado
        ///
        ///3. Menor o igual al periodo señalado en el campo 1.
        ///
        ///
        ///Formato: DD/MM/AAAA
        ///Longitud:10
        /// </summary>
        [RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(Fecha de emisión del comprobante de pago o documento original que se modifica (6) o documento referencial al documento que sustenta el crédito fiscal
1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98' y campo 29 <> '2'

2. Menor o igual al periodo informado

3. Menor o igual al periodo señalado en el campo 1.


Formato: DD/MM/AAAA
Longitud:10)")]
        public string FechaEmisionComprobantePagoQueSeModifica { get; set; }

        /// <summary>
        ///  '1. Validar con parámetro tabla 10
        ///
        ///2. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98' y campo 29 <> '2', campo 25 <> '00''
        ///
        ///Longitud: 2
        /// </summary>
        [RegularExpression(@"^\d{2}$", ErrorMessage = @"('1. Validar con parámetro tabla 10

2. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98' y campo 29 <> '2', campo 25 <> '00''

Longitud: 2)")]
        public string TipoComprobantePagoQueSeModifica { get; set; }

        /// <summary>
        ///  1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98' y campo 29 <> '2'
        ///
        ///Longitud:  20
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,20}$", ErrorMessage = @"(1. Obligatorio si campo 6 = '07' o '08' o '87' o '88' o '97' o '98' y campo 29 <> '2'

Longitud:  20)")]
        public string NumeroSerieComprobantePagoQueSeModificaCódigoDependenciaAduanera { get; set; }

        /// <summary>
        ///  1. Positivo, de ser numérico
        ///
        ///Longitud: Hasta 20
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,20}$", ErrorMessage = @"(1. Positivo, de ser numérico

Longitud: Hasta 20)")]
        public string NumeroComprobantePagoQueSeModificaNúmeroDUA { get; set; }

        /// <summary>
        ///  Estado que identifica la oportunidad de la anotación o indicación si ésta corresponde a alguna de las situaciones previstas en el inciso e) del artículo 8° de la Resolución de Superintendencia N.° 286-2009/SUNAT
        ///longitud: 1
        ///POSIBLES VALORES:
        ///
        ///1: La operación corresponde al periodo.
        ///2: El documento (CdP) ha sido inutilizado (anulado) durante el periodo previamente a ser
        ///
        ///entregado, emitido o durante su emisión.
        ///8: La operación (CdP) corresponde a un periodo anterior y NO ha sido anotad en dicho
        ///
        ///periodo.
        ///9: La operación (CdP) corresponde a un periodo anterior y SI ha sido anotad en dicho
        ///
        ///periodo.
        ///0:La operación (anotación optativa sin efecto en el IGV corresponde al periodo, emitidas
        ///
        ///en el periodo)
        /// </summary>
        [RegularExpression(@"^\d{1}$", ErrorMessage = @"(Estado que identifica la oportunidad de la anotación o indicación si ésta corresponde a alguna de las situaciones previstas en el inciso e) del artículo 8° de la Resolución de Superintendencia N.° 286-2009/SUNAT
longitud: 1
POSIBLES VALORES:

1: La operación corresponde al periodo.
2: El documento (CdP) ha sido inutilizado (anulado) durante el periodo previamente a ser

entregado, emitido o durante su emisión.
8: La operación (CdP) corresponde a un periodo anterior y NO ha sido anotad en dicho

periodo.
9: La operación (CdP) corresponde a un periodo anterior y SI ha sido anotad en dicho

periodo.
0:La operación (anotación optativa sin efecto en el IGV corresponde al periodo, emitidas

en el periodo))")]
        public string EstadoIdentificaOportunidadAnotaciónIndicación { get; set; }

        /// <summary>
        ///  1. Acepta negativos
        /// </summary>
        [RegularExpression(@" (^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos)")]
        public string DescuentoBaseImponible { get; set; }

        /// <summary>
        ///  1. Acepta negativos
        /// </summary>
        [RegularExpression(@" (^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(1. Acepta negativos)")]
        public string DescuentoImpuestoGeneralVentasImpuestoPromociónMunicipal { get; set; }

        /// <summary>
        ///  1. Validar con parámetro tabla 4
        /// </summary>
        [RegularExpression(@" ^\d{2}", ErrorMessage = @"(1. Validar con parámetro tabla 4)")]
        public string CodigoMoneda { get; set; }

        /// <summary>
        ///  Identificación del Contrato o del proyecto en el caso de los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente.
        ///
        ///1. Uso exclusivo para los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente. En este caso, deberán identificar cada contrato o proyecto.
        /// </summary>
        [RegularExpression(@" ^[a-zA-Z0-9]{1,12}$", ErrorMessage = @"(Identificación del Contrato o del proyecto en el caso de los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente.

1. Uso exclusivo para los Operadores de las sociedades irregulares, consorcios, joint ventures u otras formas de contratos de colaboración empresarial, que no lleven contabilidad independiente. En este caso, deberán identificar cada contrato o proyecto.)")]
        public string IdentificacionContratoColaboracionEmpresarial { get; set; }

        /// <summary>
        ///  1. El tipo de cambio (campo 26) correspondiente a la fecha de emisión (campo 4) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago, excepto el tipo 14 (tabla 10).2. El tipo de cambio (campo 26) correspondiente a la fecha de vencimiento (campo 5) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica sólo al tipo de comprobantes de pago 14 (tabla 10).
        /// </summary>
        [RegularExpression(@"^\d{1}", ErrorMessage = @"(1. El tipo de cambio (campo 26) correspondiente a la fecha de emisión (campo 4) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica a todos los tipos de comprobantes de pago, excepto el tipo 14 (tabla 10).2. El tipo de cambio (campo 26) correspondiente a la fecha de vencimiento (campo 5) debe ser igual al tipo de cambio (campo 3) correspondiente a la fecha (campo 1) de la Estructura 1 Tipo de Cambio, del mismo periodo, caso contrario se debe consignar '1'. Esto se aplica sólo al tipo de comprobantes de pago 14 (tabla 10).)")]
        public string ErrorTipo1 { get; set; }

        /// <summary>
        ///  1. Consignar '1' si el comprobante de pago fue cancelado con algún medio de pago establecido en la tabla 1, caso contrario no consignar nada
        /// </summary>
        [RegularExpression(@"^\d{1}", ErrorMessage = @"(1. Consignar '1' si el comprobante de pago fue cancelado con algún medio de pago establecido en la tabla 1, caso contrario no consignar nada)")]
        public string IndicadorComprobantesPagoCanceladosMediosPago { get; set; }

        public EBookVentasIngresosModel()
        {
        }
        /*
    public EBookVentasIngresosModel(BookLog bookLog)
    {
        IdPeriodo = bookLog.periodId;
        Periodo = bookLog.Details.Single(d=>d.fieldId==181).value; 
        CUO = bookLog.Details.Single(d=>d.fieldId==182).value; 
        NumeroCorrelativo = bookLog.Details.Single(d=>d.fieldId==183).value; 
        FechaEmisionComprobantePago = bookLog.Details.Single(d=>d.fieldId==184).value; 
        FechaVencimientoOFechaPago = bookLog.Details.Single(d=>d.fieldId==185).value; 
        TipoComprobantePagoODocumento = bookLog.Details.Single(d=>d.fieldId==186).value; 
        NumeroSerieComprobantePagoODocumento = bookLog.Details.Single(d=>d.fieldId==187).value; 
        NumeroComprobantePagoODocumento = bookLog.Details.Single(d=>d.fieldId==188).value; 
        NumeroFinal = bookLog.Details.Single(d=>d.fieldId==189).value; 
        TipoDocumentoIdentidadCliente = bookLog.Details.Single(d=>d.fieldId==190).value; 
        NumeroDocumentoIdentidadCliente = bookLog.Details.Single(d=>d.fieldId==191).value; 
        ApellidosYNombres = bookLog.Details.Single(d=>d.fieldId==192).value; 
        ValorFacturadoExportacion = bookLog.Details.Single(d=>d.fieldId==193).value; 
        BaseImponibleOperacionGravada = bookLog.Details.Single(d=>d.fieldId==194).value; 
        ImporteTotalOperacionExonerada = bookLog.Details.Single(d=>d.fieldId==195).value; 
        ImporteTotalOperacionInafecta  = bookLog.Details.Single(d=>d.fieldId==196).value; 
        ImpuestoSelectivoConsumo = bookLog.Details.Single(d=>d.fieldId==197).value; 
        ImpuestoGeneralVentasYOImpuestoPromocionMunicipal = bookLog.Details.Single(d=>d.fieldId==198).value; 
        BaseImponibleOperacionGravadaImpuestoVentasArrozPilado = bookLog.Details.Single(d=>d.fieldId==199).value; 
        ImpuestoVentasArrozPilado  = bookLog.Details.Single(d=>d.fieldId==200).value; 
        OtrosConceptosTributosCargosNoFormanParteBaseImponible = bookLog.Details.Single(d=>d.fieldId==201).value; 
        ImporteTotalComprobantePago = bookLog.Details.Single(d=>d.fieldId==202).value; 
        TipoCambio = bookLog.Details.Single(d=>d.fieldId==203).value; 
        FechaEmisionComprobantePagoQueSeModifica = bookLog.Details.Single(d=>d.fieldId==204).value; 
        TipoComprobantePagoQueSeModifica = bookLog.Details.Single(d=>d.fieldId==205).value; 
        NumeroSerieComprobantePagoQueSeModificaCódigoDependenciaAduanera = bookLog.Details.Single(d=>d.fieldId==206).value; 
        NumeroComprobantePagoQueSeModificaNúmeroDUA = bookLog.Details.Single(d=>d.fieldId==207).value; 
        EstadoIdentificaOportunidadAnotaciónIndicación = bookLog.Details.Single(d=>d.fieldId==209).value; 
        DescuentoBaseImponible = bookLog.Details.Single(d=>d.fieldId==277).value; 
        DescuentoImpuestoGeneralVentasImpuestoPromociónMunicipal = bookLog.Details.Single(d=>d.fieldId==278).value; 
        CodigoMoneda = bookLog.Details.Single(d=>d.fieldId==279).value; 
        IdentificacionContratoColaboracionEmpresarial = bookLog.Details.Single(d=>d.fieldId==280).value; 
        ErrorTipo1 = bookLog.Details.Single(d=>d.fieldId==281).value; 
        IndicadorComprobantesPagoCanceladosMediosPago = bookLog.Details.Single(d=>d.fieldId==282).value; 
    }
    public static List<EBookVentasIngresosModel> convert(List<BookLog> bookLogs)
    {

        List<EBookVentasIngresosModel> eBookVentasIngresosModel = new List<EBookVentasIngresosModel>();
        foreach(var bookLog in bookLogs)
        {
            eBookVentasIngresosModel.Add(new EBookVentasIngresosModel(bookLog));
        }
        return eBookVentasIngresosModel;
    }

    public static List<BookLog> convert(List<EBookVentasIngresosModel> eBookVentasIngresosModels, int idPeriodo, int idLibro )
    {
        List<BookLog> bookLogs = new List<BookLog>();
        foreach(var eBookVentasIngresosModel in eBookVentasIngresosModels)
        {
            bookLogs.Add(EBookVentasIngresosModel.convert(eBookVentasIngresosModel, idPeriodo, idLibro));
            
        }
        return bookLogs;
    }

    public static BookLog convert(EBookVentasIngresosModel eBookVentasIngresosModel, int idPeriodo, int idLibro)
    {
        BookLog bookLog = new BookLog();
        bookLog.periodId = idPeriodo;
        bookLog.bookId = idLibro;
        bookLog.Details.Add(new Detail(181, eBookVentasIngresosModel.Periodo)) ;
        bookLog.Details.Add(new Detail(182, eBookVentasIngresosModel.CUO)) ;
        bookLog.Details.Add(new Detail(183, eBookVentasIngresosModel.NumeroCorrelativo)) ;
        bookLog.Details.Add(new Detail(184, eBookVentasIngresosModel.FechaEmisionComprobantePago)) ;
        bookLog.Details.Add(new Detail(185, eBookVentasIngresosModel.FechaVencimientoOFechaPago)) ;
        bookLog.Details.Add(new Detail(186, eBookVentasIngresosModel.TipoComprobantePagoODocumento)) ;
        bookLog.Details.Add(new Detail(187, eBookVentasIngresosModel.NumeroSerieComprobantePagoODocumento)) ;
        bookLog.Details.Add(new Detail(188, eBookVentasIngresosModel.NumeroComprobantePagoODocumento)) ;
        bookLog.Details.Add(new Detail(189, eBookVentasIngresosModel.NumeroFinal)) ;
        bookLog.Details.Add(new Detail(190, eBookVentasIngresosModel.TipoDocumentoIdentidadCliente)) ;
        bookLog.Details.Add(new Detail(191, eBookVentasIngresosModel.NumeroDocumentoIdentidadCliente)) ;
        bookLog.Details.Add(new Detail(192, eBookVentasIngresosModel.ApellidosYNombres)) ;
        bookLog.Details.Add(new Detail(193, eBookVentasIngresosModel.ValorFacturadoExportacion)) ;
        bookLog.Details.Add(new Detail(194, eBookVentasIngresosModel.BaseImponibleOperacionGravada)) ;
        bookLog.Details.Add(new Detail(195, eBookVentasIngresosModel.ImporteTotalOperacionExonerada)) ;
        bookLog.Details.Add(new Detail(196, eBookVentasIngresosModel.ImporteTotalOperacionInafecta )) ;
        bookLog.Details.Add(new Detail(197, eBookVentasIngresosModel.ImpuestoSelectivoConsumo)) ;
        bookLog.Details.Add(new Detail(198, eBookVentasIngresosModel.ImpuestoGeneralVentasYOImpuestoPromocionMunicipal)) ;
        bookLog.Details.Add(new Detail(199, eBookVentasIngresosModel.BaseImponibleOperacionGravadaImpuestoVentasArrozPilado)) ;
        bookLog.Details.Add(new Detail(200, eBookVentasIngresosModel.ImpuestoVentasArrozPilado )) ;
        bookLog.Details.Add(new Detail(201, eBookVentasIngresosModel.OtrosConceptosTributosCargosNoFormanParteBaseImponible)) ;
        bookLog.Details.Add(new Detail(202, eBookVentasIngresosModel.ImporteTotalComprobantePago)) ;
        bookLog.Details.Add(new Detail(203, eBookVentasIngresosModel.TipoCambio)) ;
        bookLog.Details.Add(new Detail(204, eBookVentasIngresosModel.FechaEmisionComprobantePagoQueSeModifica)) ;
        bookLog.Details.Add(new Detail(205, eBookVentasIngresosModel.TipoComprobantePagoQueSeModifica)) ;
        bookLog.Details.Add(new Detail(206, eBookVentasIngresosModel.NumeroSerieComprobantePagoQueSeModificaCódigoDependenciaAduanera)) ;
        bookLog.Details.Add(new Detail(207, eBookVentasIngresosModel.NumeroComprobantePagoQueSeModificaNúmeroDUA)) ;
        bookLog.Details.Add(new Detail(209, eBookVentasIngresosModel.EstadoIdentificaOportunidadAnotaciónIndicación)) ;
        bookLog.Details.Add(new Detail(277, eBookVentasIngresosModel.DescuentoBaseImponible)) ;
        bookLog.Details.Add(new Detail(278, eBookVentasIngresosModel.DescuentoImpuestoGeneralVentasImpuestoPromociónMunicipal)) ;
        bookLog.Details.Add(new Detail(279, eBookVentasIngresosModel.CodigoMoneda)) ;
        bookLog.Details.Add(new Detail(280, eBookVentasIngresosModel.IdentificacionContratoColaboracionEmpresarial)) ;
        bookLog.Details.Add(new Detail(281, eBookVentasIngresosModel.ErrorTipo1)) ;
        bookLog.Details.Add(new Detail(282, eBookVentasIngresosModel.IndicadorComprobantesPagoCanceladosMediosPago)) ;
        foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
        return bookLog;        
    }
*/
        public string ToStringPLE()
        {
            string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
        }



    }

    /*
    /// <summary>
    ///
    /// </summary>
    public partial class EBookMayorModel
    {
        int IdPeriodo = 0;
        /// <summary>
        ///  1. Obligatorio
        ///2. Validar formato AAAAMM00
        ///3. 01 <= MM <= 12
        ///4. Menor o igual al periodo informado
        ///5. Si el periodo es igual a periodo informado, campo 13 es igual a '1'
        ///6. Si periodo es menor a periodo informado, entonces campo 13 es diferente a '1'
        /// </summary>
        [RegularExpression(@"^[2][0]\d{2}([0]\d|([1][0-2]))([0-2]\d|[3][0-1])$", ErrorMessage = @"(1. Obligatorio
2. Validar formato AAAAMM00
3. 01 <= MM <= 12
4. Menor o igual al periodo informado
5. Si el periodo es igual a periodo informado, campo 13 es igual a '1'
6. Si periodo es menor a periodo informado, entonces campo 13 es diferente a '1')")]
        public string Periodo { get; set; }

        /// <summary>
        ///  Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable. Debe ser el mismo consignado en el Libro Diario.
        ///1. Obligatorio
        ///2. Si el campo 13 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando
        ///3. Si el campo 13 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación
        ///Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
        ///4. Si el campo 13 es igual a '9', consignar el Código Único de la Operación (CUO)  de la operación original que se modifica
        ///
        /// </summary>
        [RegularExpression(@"^[a-zA-Z0-9]{1,40}$", ErrorMessage = @"(Código Único de la Operación (CUO), que es la llave única o clave única o clave primaria del sofware contable que identifica de manera únivoca el asiento contable. Debe ser el mismo consignado en el Libro Diario.
1. Obligatorio
2. Si el campo 13 es igual a '1', consignar el Código Único de la Operación (CUO) de la operación que se está informando
3. Si el campo 13 es igual a '8', consignar el Código Único de la Operación (CUO) que corresponda al periodo en que se omitió la anotación
Para modificaciones posteriores se hará referencia a este Código Único de la Operación (CUO)
4. Si el campo 13 es igual a '9', consignar el Código Único de la Operación (CUO)  de la operación original que se modifica
)")]
        public string CUO { get; set; }

        /// <summary>
        ///  Número correlativo del asiento contable identificado en el campo 2.
        ///El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
        ///1. Obligatorio
        ///2. El primer dígito debe ser: A, M o C
        /// </summary>
        [RegularExpression(@"^[Aa|Mm|Cc]\d{1,10}$", ErrorMessage = @"(Número correlativo del asiento contable identificado en el campo 2.
El primer dígito debe ser: 'A' para el asiento de apertura del ejercicio, 'M' para los asientos de movimientos o ajustes del mes o 'C' para el asiento de cierre del ejercicio.
1. Obligatorio
2. El primer dígito debe ser: A, M o C)")]
        public string NumeroCorrelativo { get; set; }

        /// <summary>
        ///  Código del Plan de Cuentas utilizado por el deudor tributario
        ///
        ///1. Obligatorio
        ///2. Validar con parámetro tabla 17
        /// </summary>
        [RegularExpression(@"^\d{2}$", ErrorMessage = @"(Código del Plan de Cuentas utilizado por el deudor tributario

1. Obligatorio
2. Validar con parámetro tabla 17)")]
        public string CodigoPlanCuentas { get; set; }

        /// <summary>
        ///  Código de la cuenta contable desagregado en subcuentas al nivel máximo de dígitos utilizado, según la estructura 5.3 - Detalle del Plan Contable utilizado
        ///1. Obligatorio
        /// </summary>
        [RegularExpression(@"^\d{3,24}$", ErrorMessage = @"(Código de la cuenta contable desagregado en subcuentas al nivel máximo de dígitos utilizado, según la estructura 5.3 - Detalle del Plan Contable utilizado
1. Obligatorio)")]
        public string CodigoCuenta { get; set; }

        /// <summary>
        ///  1. Obligatorio
        ///2. Menor o igual al periodo informado
        ///3. Menor o igual al periodo señalado en el campo 1.
        /// </summary>
        [RegularExpression(@"^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$", ErrorMessage = @"(1. Obligatorio
2. Menor o igual al periodo informado
3. Menor o igual al periodo señalado en el campo 1.)")]
        public string FechaOperacion { get; set; }

        /// <summary>
        ///  Glosa o descripción de la naturaleza de la operación registrada
        ///1. Obligatorio
        ///
        /// </summary>
        [RegularExpression(@"^[^|]{1,100}$", ErrorMessage = @"(Glosa o descripción de la naturaleza de la operación registrada
1. Obligatorio
)")]
        public string Glosa { get; set; }

        /// <summary>
        ///  Movimientos del Debe
        ///1. Positivo o '0.00'
        ///2. Excluyente con campo 9
        ///3. Campo 8 y 9 pueden ser ambos 0.00
        ///4. La suma del campo 8 (correspondiente al estado 1) debe ser igual a la suma del campo 9
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Movimientos del Debe
1. Positivo o '0.00'
2. Excluyente con campo 9
3. Campo 8 y 9 pueden ser ambos 0.00
4. La suma del campo 8 (correspondiente al estado 1) debe ser igual a la suma del campo 9)")]
        public string Debe { get; set; }

        /// <summary>
        ///  Movimientos del Haber
        ///1. Positivo o '0.00'
        ///2. Excluyente con campo 8
        ///3. Campo 8 y 9 pueden ser ambos 0.00
        ///4. La suma del campo 9 (correspondiente al estado 1) debe ser igual a la suma del campo 8
        /// </summary>
        [RegularExpression(@"(^\d{1,20}.\d{1,2}$)|(^\d{1,20}$)", ErrorMessage = @"(Movimientos del Haber
1. Positivo o '0.00'
2. Excluyente con campo 8
3. Campo 8 y 9 pueden ser ambos 0.00
4. La suma del campo 9 (correspondiente al estado 1) debe ser igual a la suma del campo 8)")]
        public string Haber { get; set; }

        /// <summary>
        ///  Número correlativo utilizado en el Registro de Ventas e Ingresos. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. 
        /// </summary>
        [RegularExpression(@"^\d{1,40}$", ErrorMessage = @"(Número correlativo utilizado en el Registro de Ventas e Ingresos. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. )")]
        public string NumeroCorrelativoRegistroVentas { get; set; }

        /// <summary>
        ///  Número correlativo utilizado en el Registro de Compras. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. 
        /// </summary>
        [RegularExpression(@"^\d{1,40}$", ErrorMessage = @"(Número correlativo utilizado en el Registro de Compras. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro. )")]
        public string NumeroCorrelativoRegistroCompras { get; set; }

        /// <summary>
        ///  Número correlativo utilizado en el Registro de Consignaciones. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro.
        /// </summary>
        [RegularExpression(@"^\d{1,40}$", ErrorMessage = @"(Número correlativo utilizado en el Registro de Consignaciones. No consignar nada si en el referido registro se referenció el Código Único de Operación (CUO) de este libro.)")]
        public string NumeroCorrelativoRegistroConsignaciones { get; set; }

        /// <summary>
        ///  Indica el estado de la operación
        /// </summary>
        [RegularExpression(@"^\d{1}", ErrorMessage = @"(Indica el estado de la operación)")]
        public string EstadoOperacion { get; set; }

        public EBookMayorModel()
        {
        }
        public EBookMayorModel(BookLog bookLog)
        {
            IdPeriodo = bookLog.periodId;
            Periodo = bookLog.Details.Single(d => d.fieldId == 210).value;
            CUO = bookLog.Details.Single(d => d.fieldId == 211).value;
            NumeroCorrelativo = bookLog.Details.Single(d => d.fieldId == 212).value;
            CodigoPlanCuentas = bookLog.Details.Single(d => d.fieldId == 213).value;
            CodigoCuenta = bookLog.Details.Single(d => d.fieldId == 214).value;
            FechaOperacion = bookLog.Details.Single(d => d.fieldId == 215).value;
            Glosa = bookLog.Details.Single(d => d.fieldId == 216).value;
            Debe = bookLog.Details.Single(d => d.fieldId == 217).value;
            Haber = bookLog.Details.Single(d => d.fieldId == 218).value;
            NumeroCorrelativoRegistroVentas = bookLog.Details.Single(d => d.fieldId == 219).value;
            NumeroCorrelativoRegistroCompras = bookLog.Details.Single(d => d.fieldId == 220).value;
            NumeroCorrelativoRegistroConsignaciones = bookLog.Details.Single(d => d.fieldId == 221).value;
            EstadoOperacion = bookLog.Details.Single(d => d.fieldId == 222).value;
        }
        public static List<EBookMayorModel> convert(List<BookLog> bookLogs)
        {

            List<EBookMayorModel> eBookMayorModel = new List<EBookMayorModel>();
            foreach (var bookLog in bookLogs)
            {
                eBookMayorModel.Add(new EBookMayorModel(bookLog));
            }
            return eBookMayorModel;
        }

        public static List<BookLog> convert(List<EBookMayorModel> eBookMayorModels, int idPeriodo, int idLibro)
        {
            List<BookLog> bookLogs = new List<BookLog>();
            foreach (var eBookMayorModel in eBookMayorModels)
            {
                bookLogs.Add(EBookMayorModel.convert(eBookMayorModel, idPeriodo, idLibro));

            }
            return bookLogs;
        }

        public static BookLog convert(EBookMayorModel eBookMayorModel, int idPeriodo, int idLibro)
        {
            BookLog bookLog = new BookLog();
            bookLog.periodId = idPeriodo;
            bookLog.bookId = idLibro;
            bookLog.Details.Add(new Detail(210, eBookMayorModel.Periodo));
            bookLog.Details.Add(new Detail(211, eBookMayorModel.CUO));
            bookLog.Details.Add(new Detail(212, eBookMayorModel.NumeroCorrelativo));
            bookLog.Details.Add(new Detail(213, eBookMayorModel.CodigoPlanCuentas));
            bookLog.Details.Add(new Detail(214, eBookMayorModel.CodigoCuenta));
            bookLog.Details.Add(new Detail(215, eBookMayorModel.FechaOperacion));
            bookLog.Details.Add(new Detail(216, eBookMayorModel.Glosa));
            bookLog.Details.Add(new Detail(217, eBookMayorModel.Debe));
            bookLog.Details.Add(new Detail(218, eBookMayorModel.Haber));
            bookLog.Details.Add(new Detail(219, eBookMayorModel.NumeroCorrelativoRegistroVentas));
            bookLog.Details.Add(new Detail(220, eBookMayorModel.NumeroCorrelativoRegistroCompras));
            bookLog.Details.Add(new Detail(221, eBookMayorModel.NumeroCorrelativoRegistroConsignaciones));
            bookLog.Details.Add(new Detail(222, eBookMayorModel.EstadoOperacion));
            foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
            return bookLog;
        }

        public string ToStringPLE()
        {
            string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
        }



    }


    /// <summary>
    ///
    /// </summary>
    public partial class EBookComprasNoDomiciliadosModel
    {
        int IdPeriodo = 0;
        public EBookComprasNoDomiciliadosModel()
        {
        }
        public EBookComprasNoDomiciliadosModel(BookLog bookLog)
        {
            IdPeriodo = bookLog.periodId;
        }
        public static List<EBookComprasNoDomiciliadosModel> convert(List<BookLog> bookLogs)
        {

            List<EBookComprasNoDomiciliadosModel> eBookComprasNoDomiciliadosModel = new List<EBookComprasNoDomiciliadosModel>();
            foreach (var bookLog in bookLogs)
            {
                eBookComprasNoDomiciliadosModel.Add(new EBookComprasNoDomiciliadosModel(bookLog));
            }
            return eBookComprasNoDomiciliadosModel;
        }

        public static List<BookLog> convert(List<EBookComprasNoDomiciliadosModel> eBookComprasNoDomiciliadosModels, int idPeriodo, int idLibro)
        {
            List<BookLog> bookLogs = new List<BookLog>();
            foreach (var eBookComprasNoDomiciliadosModel in eBookComprasNoDomiciliadosModels)
            {
                bookLogs.Add(EBookComprasNoDomiciliadosModel.convert(eBookComprasNoDomiciliadosModel, idPeriodo, idLibro));

            }
            return bookLogs;
        }

        public static BookLog convert(EBookComprasNoDomiciliadosModel eBookComprasNoDomiciliadosModel, int idPeriodo, int idLibro)
        {
            BookLog bookLog = new BookLog();
            bookLog.periodId = idPeriodo;
            bookLog.bookId = idLibro;
            foreach (var detail in bookLog.Details)
            {
                detail.BookLog = bookLog;
            }
            return bookLog;
        }

        public string ToStringPLE()
        {
            string retString = String.Empty;

            var bindingFlags = System.Reflection.BindingFlags.Instance |
                                System.Reflection.BindingFlags.NonPublic |
                                System.Reflection.BindingFlags.Public;
            List<object> listValues = this.GetType().GetFields(bindingFlags).Select(field => field.GetValue(this)).Where(value => value != null).ToList();

            foreach (var item in listValues)
            {
                // Note that you need to cast to string on objects that don't support ToSting() native! Maybe a new method to cast.
                retString += item.GetType().Name + ": " + item.ToString() + "|";
            }

            return retString;
        }



    }
    */
}