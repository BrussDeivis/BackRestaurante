<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>

<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>

<#

    //**********************************************************************************************
    // This T4 generates POCOs from the specified DB and saves them to the specified folder which 
    // is relative to the template's location. One file per table/POCO.
    //**********************************************************************************************
    //****************************
    // DEFINE YOUR VARIABLES HERE
    //****************************
    // The SQL server name or IP
    //string sqlServer = "BABY2-PC";
    //// The SQL username
    //string sqlLogin = "sa";
    //// The SQL password
    //string sqlPassword = "tsp";
    //// The SQL database to generate the POCOs for
    //string sqlDatabase = "tsolperu_sigescom_dev";
    //// The namespace to apply to the generated classes
    //string classNamespace = "Your.Namespace.Here";
    //// The destination folder for the generated classes, relative to this file's location.
    //string destinationFolder = "PocoFolder";
    //// Loop over each table and create a class file!
    //Server server = new Server(sqlServer);
    //server.ConnectionContext.LoginSecure = false;
    //server.ConnectionContext.Login = sqlLogin;
    //server.ConnectionContext.Password = sqlPassword;
    //server.ConnectionContext.Connect();
    string connectionString = "data source=WIN-8LBJ5U658OQ;initial catalog=tsolperu_siges_principal_desarrolloferreteria;persist security info=True;user id=calidad_siges;password=calidad1$2$;MultipleActiveResultSets=true";

    int configuracionId;
    string configuracionColumnId = "id";
    string configuracionColumnName = "nombre";
    string parametroConfiguracionColumnId = "id";
    string parametroConfiguracionColumnName = "nombre";
    SqlConnection conn = new SqlConnection(connectionString);
    string configuracionQuery = string.Format("select {0}, {1}, {2} from {3} order by {0}", configuracionColumnId, configuracionColumnName, "descripcion", "Configuracion");    
    SqlCommand configuracionCommand = new SqlCommand(configuracionQuery, conn);
    conn.Open();
    SqlDataReader configuracionReader = configuracionCommand.ExecuteReader();
    bool configuracionLoop = configuracionReader.Read();
#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//     Author: TECH SOLUTIONS PERU EIRL
//     Developer: Ronald Ibarra
//     Generated at: <#=DateTime.Now#>
//     All Right reserved
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;

namespace Tsp.Sigescom.Config
{

<#
    List<string> configuraciones= new List<string>();

    while(configuracionLoop)
    {
        configuracionId= (int)configuracionReader[configuracionColumnId];        
        string parametroConfiguracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", parametroConfiguracionColumnId, parametroConfiguracionColumnName, "valor","descripcion","tipo","parametro_de_configuracion",configuracionId);
        SqlCommand parametroConfiguracionCommand = new SqlCommand(parametroConfiguracionQuery, conn);
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
#>

<#        string className = (string)configuracionReader[configuracionColumnName];
        configuraciones.Add(className);

        var parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
#>

/// <summary>
///  <#=(string)configuracionReader["descripcion"]#>
/// </summary>
public sealed class <#=className#>Settings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public <#=className#>Settings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",<#= configuracionId#>);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static <#=className#>Settings defaultInstance = new <#=className#>Settings();
        
        public static <#=className#>Settings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new <#=className#>Settings();
        }
<#


        while(parametroConfiguracionLoop)
        {
            string parametroConfiguracionColumnName_= parametroConfiguracionReader[parametroConfiguracionColumnName].ToString();
parametrosConfiguracion.Add(new { Id = (int)parametroConfiguracionReader["id"], Nombre = parametroConfiguracionColumnName_, Valor=parametroConfiguracionReader["valor"].ToString(), Tipo=parametroConfiguracionReader["tipo"].ToString(), Descripcion=parametroConfiguracionReader["descripcion"].ToString() }); 
  
 #>
<#            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
#>





<#foreach(var field in parametrosConfiguracion)
        {
#>
        /// <summary>
        ///  <#=field.Descripcion#>
        /// </summary>
        public <#=field.Tipo#> <#=field.Nombre#> {
            get {
                  <#            if(field.Tipo=="bool"){ #>  
        return parametrosConfiguracion["<#=field.Nombre#>"].ToString()=="1";

<#            } else{ #>
               return Convert.To<#=field.Tipo=="int"?"Int32": (field.Tipo=="bool")?"Boolean":char.ToUpper(field.Tipo[0]) + field.Tipo.Substring(1)#>(parametrosConfiguracion["<#=field.Nombre#>"]);
<#            } #>
               
            }
        }
<#}    #>
    

<#
        parametroConfiguracionReader.Close();
        configuracionLoop = configuracionReader.Read(); #>
}

<#
    }
#>

public sealed class Configuraciones
{
 public static void Reset()
    {
<#foreach(var configuracion in configuraciones)
    {
#>
        <#=configuracion#>Settings.Reset();
<#
    }
#>
    }
}

}