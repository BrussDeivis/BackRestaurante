


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//     Author: TECH SOLUTIONS PERU EIRL
//     Developer: Ronald Ibarra
//     Generated at: 10/14/2022 08:38:17
//     All Right reserved
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;

namespace Tsp.Sigescom.Config
{



/// <summary>
///  abc
/// </summary>
public sealed class TransaccionSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public TransaccionSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",1);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static TransaccionSettings defaultInstance = new TransaccionSettings();
        
        public static TransaccionSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new TransaccionSettings();
        }





        /// <summary>
        ///  TasaIGV
        /// </summary>
        public decimal TasaIGV {
            get {
                                 return Convert.ToDecimal(parametrosConfiguracion["TasaIGV"]);
               
            }
        }
        /// <summary>
        ///  IdTransaccionVenta
        /// </summary>
        public int IdTipoTransaccionVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenDeVenta
        /// </summary>
        public int IdTipoTransaccionOrdenDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionCobranzaFacturasClientes
        /// </summary>
        public int IdTipoTransaccionCobranzaFacturasClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionCobranzaFacturasClientes"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionSalidaBienesPorVenta
        /// </summary>
        public int IdTipoTransaccionSalidaBienesPorVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaBienesPorVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOperacion
        /// </summary>
        public int IdTipoTransaccionOperacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOperacion"]);
               
            }
        }
        /// <summary>
        ///  IdCuentaContableIGV
        /// </summary>
        public int IdCuentaContableIGV {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCuentaContableIGV"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenDeCompra
        /// </summary>
        public int IdTipoTransaccionOrdenDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionCompra
        /// </summary>
        public int IdTipoTransaccionCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoFacturasProveedores
        /// </summary>
        public int IdTipoTransaccionPagoFacturasProveedores {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoFacturasProveedores"]);
               
            }
        }
        /// <summary>
        ///  OrdenDeAnulacionDeCompra
        /// </summary>
        public int IdTipoTransaccionOrdenDeAnulacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeAnulacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDescuentoSobreOrdenDeCompra
        /// </summary>
        public int IdTipoTransaccionDescuentoSobreOrdenDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDescuentoSobreOrdenDeCompra"]);
               
            }
        }
        /// <summary>
        ///  OrdenDeAnulacionDeVenta
        /// </summary>
        public int IdTipoTransaccionOrdenDeAnulacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeAnulacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDescuentoSobreOrdenDeVenta
        /// </summary>
        public int IdTipoTransaccionDescuentoSobreOrdenDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDescuentoSobreOrdenDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenGastoPersonal
        /// </summary>
        public int IdTipoTransaccionOrdenGastoPersonal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenGastoPersonal"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionAnticipo
        /// </summary>
        public int IdTipoTransaccionAnticipo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionAnticipo"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDevolucionAnticipo
        /// </summary>
        public int IdTipoTransaccionDevolucionAnticipo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDevolucionAnticipo"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionAnulacionDeVenta
        /// </summary>
        public int IdTipoTransaccionAnulacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionAnulacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionAnulacionDeCompra
        /// </summary>
        public int IdTipoTransaccionAnulacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionAnulacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDescuentoVenta
        /// </summary>
        public int IdTipoTransaccionDescuentoVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDescuentoVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDescuentoCompra
        /// </summary>
        public int IdTipoTransaccionDescuentoCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDescuentoCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionReferenciaAnulacionOrdenDeVenta
        /// </summary>
        public int IdTipoTransaccionReferenciaAnulacionOrdenDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionReferenciaAnulacionOrdenDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDebitoVenta
        /// </summary>
        public int IdTipoTransaccionDebitoVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDebitoVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDebitoOrdenDeVenta
        /// </summary>
        public int IdTipoTransaccionDebitoOrdenDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDebitoOrdenDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionReferenciaDebitoOrdenDeVenta
        /// </summary>
        public int IdTipoTransaccionReferenciaDebitoOrdenDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionReferenciaDebitoOrdenDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionReferenciaDescuentoOrdenDeVenta
        /// </summary>
        public int IdTipoTransaccionReferenciaDescuentoOrdenDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionReferenciaDescuentoOrdenDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDebitoCompra
        /// </summary>
        public int IdTipoTransaccionDebitoCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDebitoCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDebitoOrdenDeCompra
        /// </summary>
        public int IdTipoTransaccionDebitoOrdenDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDebitoOrdenDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionReferenciaDebitoOrdenDeCompra
        /// </summary>
        public int IdTipoTransaccionReferenciaDebitoOrdenDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionReferenciaDebitoOrdenDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionReferenciaDescuentoOrdenDeCompra
        /// </summary>
        public int IdTipoTransaccionReferenciaDescuentoOrdenDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionReferenciaDescuentoOrdenDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionReferenciaAnulacionOrdenDeCompra
        /// </summary>
        public int IdTipoTransaccionReferenciaAnulacionOrdenDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionReferenciaAnulacionOrdenDeCompra"]);
               
            }
        }
        /// <summary>
        ///  aplicaLeyAmazonia
        /// </summary>
        public bool AplicaLeyAmazonia {
            get {
                    
        return parametrosConfiguracion["AplicaLeyAmazonia"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  VentasSujetasADisponibilidadStock
        /// </summary>
        public bool VentasSujetasADisponibilidadStock {
            get {
                    
        return parametrosConfiguracion["VentasSujetasADisponibilidadStock"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  1:Gravadas 2:No Gravadas 3:Gravadas y No Gravadas
        /// </summary>
        public int ComprasDestinadasAPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ComprasDestinadasAPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoCuandoClienteEsGenerico
        /// </summary>
        public int IdTipoDocumentoCuandoClienteEsGenerico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoCuandoClienteEsGenerico"]);
               
            }
        }
        /// <summary>
        ///  PrecioContieneIGV
        /// </summary>
        public bool PrecioContieneIGV {
            get {
                    
        return parametrosConfiguracion["PrecioContieneIGV"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoPorDefectoParaVenta
        /// </summary>
        public int IdTipoDocumentoPorDefectoParaVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoPorDefectoParaVenta"]);
               
            }
        }
        /// <summary>
        ///  1: losp recios son los mismos para todos los puntos de venta, por lo que se guardan amarrados a la Sede
        /// </summary>
        public bool PreciosCentralizados {
            get {
                    
        return parametrosConfiguracion["PreciosCentralizados"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarAliasDeClienteGenerico
        /// </summary>
        public bool MostrarAliasDeClienteGenerico {
            get {
                    
        return parametrosConfiguracion["MostrarAliasDeClienteGenerico"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  RealizaCompraAlCredito
        /// </summary>
        public bool RealizaCompraAlCredito {
            get {
                    
        return parametrosConfiguracion["RealizaCompraAlCredito"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenDeDesplazamiento
        /// </summary>
        public int IdTipoTransaccionOrdenDeDesplazamiento {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeDesplazamiento"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGastoServiciosTerceros
        /// </summary>
        public int IdTipoTransaccionGastoServiciosTerceros {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGastoServiciosTerceros"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenGastoServiciosTerceros
        /// </summary>
        public int IdTipoTransaccionOrdenGastoServiciosTerceros {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenGastoServiciosTerceros"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoGastoServiciosTerceros
        /// </summary>
        public int IdTipoTransaccionPagoGastoServiciosTerceros {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoGastoServiciosTerceros"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGastoPorTributos
        /// </summary>
        public int IdTipoTransaccionGastoPorTributos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGastoPorTributos"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenGastoPorTributos
        /// </summary>
        public int IdTipoTransaccionOrdenGastoPorTributos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenGastoPorTributos"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoGastoPorTributos
        /// </summary>
        public int IdTipoTransaccionPagoGastoPorTributos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoGastoPorTributos"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGastoFinanciero
        /// </summary>
        public int IdTipoTransaccionGastoFinanciero {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGastoFinanciero"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenGastoFinanciero
        /// </summary>
        public int IdTipoTransaccionOrdenGastoFinanciero {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenGastoFinanciero"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoGastoFinanciero
        /// </summary>
        public int IdTipoTransaccionPagoGastoFinanciero {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoGastoFinanciero"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOtrosGastosGestion
        /// </summary>
        public int IdTipoTransaccionOtrosGastosGestion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOtrosGastosGestion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenOtrosGastosGestion
        /// </summary>
        public int IdTipoTransaccionOrdenOtrosGastosGestion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenOtrosGastosGestion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoOtrosGastosGestion
        /// </summary>
        public int IdTipoTransaccionPagoOtrosGastosGestion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoOtrosGastosGestion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionDesplazamientoInternoMercadería
        /// </summary>
        public int IdTipoTransaccionDesplazamientoInternoMercadería {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionDesplazamientoInternoMercadería"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionIngresoMercaderíaDesplazamientoInterno
        /// </summary>
        public int IdTipoTransaccionIngresoMercaderíaDesplazamientoInterno {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoMercaderíaDesplazamientoInterno"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionSalidaMercaderíaDesplazamientoInterno
        /// </summary>
        public int IdTipoTransaccionSalidaMercaderíaDesplazamientoInterno {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaMercaderíaDesplazamientoInterno"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionIngresoBienesPorCompra
        /// </summary>
        public int IdTipoTransaccionIngresoBienesPorCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoBienesPorCompra"]);
               
            }
        }
        /// <summary>
        ///  IdInventarioLogico
        /// </summary>
        public int IdTipoTransaccionInventarioHistorico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInventarioHistorico"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionIngresaBienOservicio
        /// </summary>
        public int IdTipoTransaccionIngresaBienOservicio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresaBienOservicio"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionSaleBienOservicio
        /// </summary>
        public int IdTipoTransaccionSaleBienOservicio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSaleBienOservicio"]);
               
            }
        }
        /// <summary>
        ///  IngresoDeMercaderiaPorAnulaciónDeVenta
        /// </summary>
        public int IdTipoTransaccionIngresoDeMercaderiaPorAnulaciónDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoDeMercaderiaPorAnulaciónDeVenta"]);
               
            }
        }
        /// <summary>
        ///  SalidaDeDineroPorAnulacionDeVenta
        /// </summary>
        public int IdTipoTransaccionSalidaDeDineroPorAnulacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaDeDineroPorAnulacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  SalidaDeMercaderiaPorAnulaciónDeCompra
        /// </summary>
        public int IdTipoTransaccionSalidaDeMercaderiaPorAnulaciónDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaDeMercaderiaPorAnulaciónDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IngresoDeDineroPorAnulacionDeCompra
        /// </summary>
        public int IdTipoTransaccionIngresoDeDineroPorAnulacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoDeDineroPorAnulacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  InvalidacionDeVenta
        /// </summary>
        public int IdTipoTransaccionInvalidacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInvalidacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IngresoDeMercaderiaPorInvalidacionDeVenta
        /// </summary>
        public int IdTipoTransaccionIngresoDeMercaderiaPorInvalidacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoDeMercaderiaPorInvalidacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  SalidaDeDineroPorInvalidacionDeVenta
        /// </summary>
        public int IdTipoTransaccionSalidaDeDineroPorInvalidacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaDeDineroPorInvalidacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  OrdenDeInvalidacionDeVenta
        /// </summary>
        public int IdTipoTransaccionOrdenDeInvalidacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeInvalidacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  InvalidacionDeCompra
        /// </summary>
        public int IdTipoTransaccionInvalidacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInvalidacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  SalidaDeMercaderiaPorInvalidacionDeCompra
        /// </summary>
        public int IdTipoTransaccionSalidaDeMercaderiaPorInvalidacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaDeMercaderiaPorInvalidacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IngresoDeDineroPorInvalidacionDeCompra
        /// </summary>
        public int IdTipoTransaccionIngresoDeDineroPorInvalidacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoDeDineroPorInvalidacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  OrdenDeInvalidacionDeCompra
        /// </summary>
        public int IdTipoTransaccionOrdenDeInvalidacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeInvalidacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  InvalidacionDeAnulacionDeVenta
        /// </summary>
        public int IdTipoTransaccionInvalidacionDeAnulacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInvalidacionDeAnulacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  InvalidacionDeAnulacionDeCompra
        /// </summary>
        public int IdTipoTransaccionInvalidacionDeAnulacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInvalidacionDeAnulacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  OrdenInvalidacionDeAnulacionDeVenta
        /// </summary>
        public int IdTipoTransaccionOrdenInvalidacionDeAnulacionDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenInvalidacionDeAnulacionDeVenta"]);
               
            }
        }
        /// <summary>
        ///  SalidaMercadInvalidacionDeAnulacionVenta
        /// </summary>
        public int IdTipoTransaccionSalidaMercadInvalidacionDeAnulacionVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaMercadInvalidacionDeAnulacionVenta"]);
               
            }
        }
        /// <summary>
        ///  IngresoDineroInvalidacionDeAnulacionVenta
        /// </summary>
        public int IdTipoTransaccionIngresoDineroInvalidacionDeAnulacionVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoDineroInvalidacionDeAnulacionVenta"]);
               
            }
        }
        /// <summary>
        ///  OrdenInvalidacionDeAnulacionDeCompra
        /// </summary>
        public int IdTipoTransaccionOrdenInvalidacionDeAnulacionDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenInvalidacionDeAnulacionDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IngresoMercadInvalidacionDeAnulacionCompra
        /// </summary>
        public int IdTipoTransaccionIngresoMercadInvalidacionDeAnulacionCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionIngresoMercadInvalidacionDeAnulacionCompra"]);
               
            }
        }
        /// <summary>
        ///  SalidaDineroInvalidacionDeAnulacionCompra
        /// </summary>
        public int IdTipoTransaccionSalidaDineroInvalidacionDeAnulacionCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaDineroInvalidacionDeAnulacionCompra"]);
               
            }
        }
        /// <summary>
        ///  CobroDeDineroQueNoTieneQueVerConVentas
        /// </summary>
        public int IdTipoTransaccionCobroVarios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionCobroVarios"]);
               
            }
        }
        /// <summary>
        ///  CompromisoDeCobroDeDinero
        /// </summary>
        public int IdTipoTransaccionOrdenDeCobroVarios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeCobroVarios"]);
               
            }
        }
        /// <summary>
        ///  CobroDeDireroEnEfectivo
        /// </summary>
        public int IdTipoTransaccionCobroDeCobroVarios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionCobroDeCobroVarios"]);
               
            }
        }
        /// <summary>
        ///  EsUnPagoDiferenteACompraYGasto
        /// </summary>
        public int IdTipoTransaccionPagoVarios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoVarios"]);
               
            }
        }
        /// <summary>
        ///  CompromisoDePagoEnEfectivo
        /// </summary>
        public int IdTipoTransaccionOrdenPagoVarios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenPagoVarios"]);
               
            }
        }
        /// <summary>
        ///  SalidaDeDineroEnEfectivo
        /// </summary>
        public int IdTipoTransaccionPagoDePagoVarios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoDePagoVarios"]);
               
            }
        }
        /// <summary>
        ///  Entrada, salida de dinero en caja, bancos, ya sea en efectivo, cheques, otros.
        /// </summary>
        public int IdAccionDeNegocioMovimientoEnCaja {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdAccionDeNegocioMovimientoEnCaja"]);
               
            }
        }
        /// <summary>
        ///  entrada, salida de bienes en almacenes, ya sea por venta, compra, donaciones, mermas, traslados entre sucursales, otros.
        /// </summary>
        public int IdAccionDeNegocioMovimientoEnAlmacen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdAccionDeNegocioMovimientoEnAlmacen"]);
               
            }
        }
        /// <summary>
        ///  IdAccionDeNegocioCompromisoDeCaja
        /// </summary>
        public int IdAccionDeNegocioCompromisoDeCaja {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdAccionDeNegocioCompromisoDeCaja"]);
               
            }
        }
        /// <summary>
        ///  IdAccionDeNegocioCompromisoDeAlmacen
        /// </summary>
        public int IdAccionDeNegocioCompromisoDeAlmacen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdAccionDeNegocioCompromisoDeAlmacen"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionCobranzaDeLetrasAClientes
        /// </summary>
        public int IdTipoTransaccionCobranzaDeLetrasAClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionCobranzaDeLetrasAClientes"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoDeGastos
        /// </summary>
        public int IdTipoTransaccionPagoDeGastos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoDeGastos"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoDeLetrasAProveedores
        /// </summary>
        public int IdTipoTransaccionPagoDeLetrasAProveedores {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoDeLetrasAProveedores"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoDePersonal
        /// </summary>
        public int IdTipoTransaccionPagoDePersonal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoDePersonal"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoPorDevolucionDeAnticipo
        /// </summary>
        public int IdTipoTransaccionPagoPorDevolucionDeAnticipo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoPorDevolucionDeAnticipo"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoPorDeterioroDeActivos
        /// </summary>
        public int IdTipoTransaccionPagoPorDeterioroDeActivos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoPorDeterioroDeActivos"]);
               
            }
        }
        /// <summary>
        ///  Id de Comprobante Generico que se usa para transacciones temporales o abstractas (inventario logico, etc)
        /// </summary>
        public int IdComprobanteGenerico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdComprobanteGenerico"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionAnulacionDeCompraPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionAnulacionDeCompraPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionAnulacionDeCompraPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeAnulacionDeCompraPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeAnulacionDeCompraPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeAnulacionDeCompraPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeDineroPorAnulacionDeCompraPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeDineroPorAnulacionDeCompraPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeDineroPorAnulacionDeCompraPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeMercaderiaPorAnulacionDeCompraPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeMercaderiaPorAnulacionDeCompraPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeMercaderiaPorAnulacionDeCompraPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionCorreccionDeCompraPorErrorEnLaDescripcion
        /// </summary>
        public int IdTipoDeTransaccionCorreccionDeCompraPorErrorEnLaDescripcion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionCorreccionDeCompraPorErrorEnLaDescripcion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeCorreccionDeCompraPorErrorEnLaDescripcion
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeCorreccionDeCompraPorErrorEnLaDescripcion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeCorreccionDeCompraPorErrorEnLaDescripcion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDescuentoGlobalEnCompra
        /// </summary>
        public int IdTipoDeTransaccionDescuentoGlobalEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDescuentoGlobalEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDescuentoGlobalEnCompra
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDescuentoGlobalEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDescuentoGlobalEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeDineroPorDescuentoGlobalEnCompra
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeDineroPorDescuentoGlobalEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeDineroPorDescuentoGlobalEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDescuentoPorItemEnCompra
        /// </summary>
        public int IdTipoDeTransaccionDescuentoPorItemEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDescuentoPorItemEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDescuentoPorItemEnCompra
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDescuentoPorItemEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDescuentoPorItemEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeDineroPorDescuentoPorItemEnCompra
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeDineroPorDescuentoPorItemEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeDineroPorDescuentoPorItemEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDevolucionTotalDeCompra
        /// </summary>
        public int IdTipoDeTransaccionDevolucionTotalDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDevolucionTotalDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDevolucionTotalDeCompra
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDevolucionTotalDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDevolucionTotalDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeDineroPorDevolucionTotalDeCompra
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeDineroPorDevolucionTotalDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeDineroPorDevolucionTotalDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeMercaderiaPorDevolucionTotalDeCompra
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeMercaderiaPorDevolucionTotalDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeMercaderiaPorDevolucionTotalDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDevolucionPorItemEnCompra
        /// </summary>
        public int IdTipoDeTransaccionDevolucionPorItemEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDevolucionPorItemEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDevolucionPorItemEnCompra
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDevolucionPorItemEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDevolucionPorItemEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeDineroPorDevolucionPorItemEnCompra
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeDineroPorDevolucionPorItemEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeDineroPorDevolucionPorItemEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeMercaderiaPorDevolucionPorItemEnCompra
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeMercaderiaPorDevolucionPorItemEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeMercaderiaPorDevolucionPorItemEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionAnulacionDeVentaPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionAnulacionDeVentaPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionAnulacionDeVentaPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeAnulacionDeVentaPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeAnulacionDeVentaPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeAnulacionDeVentaPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeDineroPorAnulacionDeVentaPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeDineroPorAnulacionDeVentaPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeDineroPorAnulacionDeVentaPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeMercaderiaPorAnulacionDeVentaPorErrorEnElRuc
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeMercaderiaPorAnulacionDeVentaPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeMercaderiaPorAnulacionDeVentaPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionCorreccionDeVentaPorErrorEnLaDescripcion
        /// </summary>
        public int IdTipoDeTransaccionCorreccionDeVentaPorErrorEnLaDescripcion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionCorreccionDeVentaPorErrorEnLaDescripcion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeCorreccionDeVentaPorErrorEnLaDescripcion
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeCorreccionDeVentaPorErrorEnLaDescripcion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeCorreccionDeVentaPorErrorEnLaDescripcion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDescuentoGlobalEnVenta
        /// </summary>
        public int IdTipoDeTransaccionDescuentoGlobalEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDescuentoGlobalEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDescuentoGlobalEnVenta
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDescuentoGlobalEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDescuentoGlobalEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeDineroPorDescuentoGlobalEnVenta
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeDineroPorDescuentoGlobalEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeDineroPorDescuentoGlobalEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDescuentoPorItemEnVenta
        /// </summary>
        public int IdTipoDeTransaccionDescuentoPorItemEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDescuentoPorItemEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDescuentoPorItemEnVenta
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDescuentoPorItemEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDescuentoPorItemEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeDineroPorDescuentoPorItemEnVenta
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeDineroPorDescuentoPorItemEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeDineroPorDescuentoPorItemEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDevolucionTotalDeVenta
        /// </summary>
        public int IdTipoDeTransaccionDevolucionTotalDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDevolucionTotalDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDevolucionTotalDeVenta
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDevolucionTotalDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDevolucionTotalDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeDineroPorDevolucionTotalDeVenta
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeDineroPorDevolucionTotalDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeDineroPorDevolucionTotalDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeMercaderiaPorDevolucionTotalDeVenta
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeMercaderiaPorDevolucionTotalDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeMercaderiaPorDevolucionTotalDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionDevolucionPorItemEnVenta
        /// </summary>
        public int IdTipoDeTransaccionDevolucionPorItemEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionDevolucionPorItemEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeDevolucionPorItemEnVenta
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeDevolucionPorItemEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeDevolucionPorItemEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeDineroPorDevolucionPorItemEnVenta
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeDineroPorDevolucionPorItemEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeDineroPorDevolucionPorItemEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeMercaderiaPorDevolucionPorItemEnVenta
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeMercaderiaPorDevolucionPorItemEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeMercaderiaPorDevolucionPorItemEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionInteresesPorMoraEnCompra
        /// </summary>
        public int IdTipoDeTransaccionInteresesPorMoraEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionInteresesPorMoraEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeInteresesPorMoraEnCompra
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeInteresesPorMoraEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeInteresesPorMoraEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeDineroPorInteresesPorMoraEnCompra
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeDineroPorInteresesPorMoraEnCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeDineroPorInteresesPorMoraEnCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionAumentoEnElValorDeCompra
        /// </summary>
        public int IdTipoDeTransaccionAumentoEnElValorDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionAumentoEnElValorDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeAumentoEnElValorDeCompra
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeAumentoEnElValorDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeAumentoEnElValorDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionSalidaDeDineroPorAumentoEnElValorDeCompra
        /// </summary>
        public int IdTipoDeTransaccionSalidaDeDineroPorAumentoEnElValorDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionSalidaDeDineroPorAumentoEnElValorDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionInteresesPorMoraEnVenta
        /// </summary>
        public int IdTipoDeTransaccionInteresesPorMoraEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionInteresesPorMoraEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeInteresesPorMoraEnVenta
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeInteresesPorMoraEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeInteresesPorMoraEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeDineroPorInteresesPorMoraEnVenta
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeDineroPorInteresesPorMoraEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeDineroPorInteresesPorMoraEnVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionAumentoEnElValorDeVenta
        /// </summary>
        public int IdTipoDeTransaccionAumentoEnElValorDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionAumentoEnElValorDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeAumentoEnElValorDeVenta
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeAumentoEnElValorDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeAumentoEnElValorDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionIngresoDeDineroPorAumentoEnElValorDeVenta
        /// </summary>
        public int IdTipoDeTransaccionIngresoDeDineroPorAumentoEnElValorDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionIngresoDeDineroPorAumentoEnElValorDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionCotizacion
        /// </summary>
        public int IdTipoTransaccionCotizacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionCotizacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenDeCotizacion
        /// </summary>
        public int IdTipoTransaccionOrdenDeCotizacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeCotizacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionVentaYCobroEnBloque
        /// </summary>
        public int IdTipoTransaccionVentaYCobroEnBloque {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionVentaYCobroEnBloque"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeTransaccionOrdenDeAlmacen
        /// </summary>
        public int IdTipoDeTransaccionOrdenDeAlmacen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeTransaccionOrdenDeAlmacen"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOperacionInventarioFisico
        /// </summary>
        public int IdTipoTransaccionOperacionInventarioActual {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOperacionInventarioActual"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionInventarioFisico
        /// </summary>
        public int IdTipoTransaccionInventarioActual {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInventarioActual"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGasto
        /// </summary>
        public int IdTipoTransaccionGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGasto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenGasto
        /// </summary>
        public int IdTipoTransaccionOrdenGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenGasto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPagoGasto
        /// </summary>
        public int IdTipoTransaccionPagoGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPagoGasto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionInvalidacionGasto
        /// </summary>
        public int IdTipoTransaccionInvalidacionGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInvalidacionGasto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenInvalidacionGasto
        /// </summary>
        public int IdTipoTransaccionOrdenInvalidacionGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenInvalidacionGasto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionCobroInvalidacionGasto
        /// </summary>
        public int IdTipoTransaccionCobroInvalidacionGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionCobroInvalidacionGasto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorVenta
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorVentaSujetaAConfirmacionDeComprador
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorVentaSujetaAConfirmacionDeComprador {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorVentaSujetaAConfirmacionDeComprador"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorCompra
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorCompra"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorTrasladoEntreEstablecimientosDeLaMismaEmpresa
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorTrasladoEntreEstablecimientosDeLaMismaEmpresa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorTrasladoEntreEstablecimientosDeLaMismaEmpresa"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorTrasladoEmisorItineranteCP
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorTrasladoEmisorItineranteCP {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorTrasladoEmisorItineranteCP"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorImportacion
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorImportacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorImportacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorExportacion
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorExportacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorExportacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorTrasladoAZonaPrimaria
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorTrasladoAZonaPrimaria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorTrasladoAZonaPrimaria"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionGuiaRemisionPorOtrosMotivos
        /// </summary>
        public int IdTipoTransaccionGuiaRemisionPorOtrosMotivos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionGuiaRemisionPorOtrosMotivos"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionArqueoCaja
        /// </summary>
        public int IdTipoTransaccionArqueoCaja {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionArqueoCaja"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionConsumoHabitacion
        /// </summary>
        public int IdTipoTransaccionConsumoHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionConsumoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenConsumoHabitacion
        /// </summary>
        public int IdTipoTransaccionOrdenConsumoHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenConsumoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionSalidaMercaderiaConsumoHabitacion
        /// </summary>
        public int IdTipoTransaccionSalidaMercaderiaConsumoHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaMercaderiaConsumoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionInvalidacionConsumoHabitacion
        /// </summary>
        public int IdTipoTransaccionInvalidacionConsumoHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionInvalidacionConsumoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionOrdenInvalidacionConsumoHabitacion
        /// </summary>
        public int IdTipoTransaccionOrdenInvalidacionConsumoHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenInvalidacionConsumoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionEntradaMercaderiaInvalidacionConsumoHabitacion
        /// </summary>
        public int IdTipoTransaccionEntradaMercaderiaInvalidacionConsumoHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionEntradaMercaderiaInvalidacionConsumoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionEntradaBienesAjusteInventario
        /// </summary>
        public int IdTipoTransaccionEntradaBienesAjusteInventario {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionEntradaBienesAjusteInventario"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionSalidaBienesAjusteInventario
        /// </summary>
        public int IdTipoTransaccionSalidaBienesAjusteInventario {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionSalidaBienesAjusteInventario"]);
               
            }
        }
    

}



/// <summary>
///  OPERATIONRESULT
/// </summary>
public sealed class OperationResultSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public OperationResultSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",2);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static OperationResultSettings defaultInstance = new OperationResultSettings();
        
        public static OperationResultSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new OperationResultSettings();
        }





        /// <summary>
        ///  OperationResultSuccessDescription
        /// </summary>
        public string OperationResultSuccessDescription {
            get {
                                 return Convert.ToString(parametrosConfiguracion["OperationResultSuccessDescription"]);
               
            }
        }
        /// <summary>
        ///  OperationResultErrorDescription
        /// </summary>
        public string OperationResultErrorDescription {
            get {
                                 return Convert.ToString(parametrosConfiguracion["OperationResultErrorDescription"]);
               
            }
        }
    

}



/// <summary>
///  MAESTRO
/// </summary>
public sealed class MaestroSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public MaestroSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",3);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static MaestroSettings defaultInstance = new MaestroSettings();
        
        public static MaestroSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new MaestroSettings();
        }





        /// <summary>
        ///  IdDetalleMaestroUnidadDeNegocioTransversal
        /// </summary>
        public int IdDetalleMaestroUnidadDeNegocioTransversal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroUnidadDeNegocioTransversal"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMonedaSoles
        /// </summary>
        public int IdDetalleMaestroMonedaSoles {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMonedaSoles"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroCondicionPago
        /// </summary>
        public int IdDetalleMaestroParametroCondicionPago {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroCondicionPago"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroModoDePago
        /// </summary>
        public int IdDetalleMaestroParametroModoDePago {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroModoDePago"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroTipoDireccionDomicilioFiscal
        /// </summary>
        public int IdDetalleMaestroTipoDireccionDomicilioFiscal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoDireccionDomicilioFiscal"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroTipoDireccionDomicilioPersonal
        /// </summary>
        public int IdDetalleMaestroTipoDireccionDomicilioPersonal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoDireccionDomicilioPersonal"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroMedioDePago
        /// </summary>
        public int IdMaestroMedioDePago {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroMedioDePago"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroEntidadesBancarias
        /// </summary>
        public int IdMaestroEntidadesBancarias {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroEntidadesBancarias"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoDeVia
        /// </summary>
        public int IdMaestroTipoDeVia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoDeVia"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoDeZona
        /// </summary>
        public int IdMaestroTipoDeZona {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoDeZona"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroNacion
        /// </summary>
        public int IdMaestroNacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroNacion"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoDireccion
        /// </summary>
        public int IdMaestroTipoDireccion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoDireccion"]);
               
            }
        }
        /// <summary>
        ///  IdPaisUbigeoPeru
        /// </summary>
        public int IdPaisUbigeoPeru {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdPaisUbigeoPeru"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNacionPeru
        /// </summary>
        public int IdDetalleMaestroNacionPeru {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNacionPeru"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroCategoriaConcepto
        /// </summary>
        public int IdMaestroCategoriaConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroCategoriaConcepto"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroConcepto
        /// </summary>
        public int IdMaestroConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroConcepto"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroMarcaConcepto
        /// </summary>
        public int IdMaestroMarcaConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroMarcaConcepto"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroUnidadDeMedida
        /// </summary>
        public int IdMaestroUnidadDeMedida {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroUnidadDeMedida"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroPresentacionConcepto
        /// </summary>
        public int IdMaestroPresentacionConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroPresentacionConcepto"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroUnidadDeMedidaSubUnidad
        /// </summary>
        public int IdDetalleMaestroUnidadDeMedidaSubUnidad {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroUnidadDeMedidaSubUnidad"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroEstadoTransaccion
        /// </summary>
        public int IdMaestroEstadoTransaccion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroEstadoTransaccion"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroAccionOperativaTransaccion
        /// </summary>
        public int IdMaestroAccionOperativaTransaccion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroAccionOperativaTransaccion"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroUnidadDeNegocio
        /// </summary>
        public int IdMaestroUnidadDeNegocio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroUnidadDeNegocio"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroCaracteristicaConcepto
        /// </summary>
        public int IdMaestroCaracteristicaConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroCaracteristicaConcepto"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroConceptoPagoEmpleado
        /// </summary>
        public int IdMaestroConceptoPagoEmpleado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroConceptoPagoEmpleado"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoServicioImpuesto
        /// </summary>
        public int IdMaestroTipoServicioImpuesto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoServicioImpuesto"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoProductoDeCompra
        /// </summary>
        public int IdMaestroTipoProductoDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoProductoDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoBien
        /// </summary>
        public int IdMaestroTipoBien {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoBien"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroTarifaNormal
        /// </summary>
        public int IdDetalleMaestroTarifaNormal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTarifaNormal"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTarjetasBancarias
        /// </summary>
        public int IdMaestroTarjetasBancarias {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTarjetasBancarias"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTarifa
        /// </summary>
        public int IdMaestroTarifa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTarifa"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroTipoPrecioPrecio
        /// </summary>
        public int IdDetalleMaestroTipoPrecioPrecio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoPrecioPrecio"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroTipoPrecioDescuento
        /// </summary>
        public int IdDetalleMaestroTipoPrecioDescuento {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoPrecioDescuento"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroTipoPrecioBonificacion
        /// </summary>
        public int IdDetalleMaestroTipoPrecioBonificacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoPrecioBonificacion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMedioDepagoEfectivo
        /// </summary>
        public int IdDetalleMaestroMedioDepagoEfectivo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMedioDepagoEfectivo"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMedioDePagoTarjetaCredito
        /// </summary>
        public int IdDetalleMaestroMedioDePagoTarjetaCredito {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMedioDePagoTarjetaCredito"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMonedaDolares
        /// </summary>
        public int IdDetalleMaestroMonedaDolares {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMonedaDolares"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMedioDePagoNotaDeCredito
        /// </summary>
        public int IdDetalleMaestroMedioDePagoNotaDeCredito {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMedioDePagoNotaDeCredito"]);
               
            }
        }
        /// <summary>
        ///  idMaestroDocumentoIdentidad
        /// </summary>
        public int idMaestroDocumentoIdentidad {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idMaestroDocumentoIdentidad"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMedioDePagoTarjetaDebito
        /// </summary>
        public int IdDetalleMaestroMedioDePagoTarjetaDebito {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMedioDePagoTarjetaDebito"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionActualizar
        /// </summary>
        public int IdDetalleMaestroAccionActualizar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionActualizar"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroDocumento
        /// </summary>
        public int IdMaestroDocumento {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroDocumento"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionAnular
        /// </summary>
        public int IdDetalleMaestroAccionAnular {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionAnular"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionAprobar
        /// </summary>
        public int IdDetalleMaestroAccionAprobar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionAprobar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionInvalidar
        /// </summary>
        public int IdDetalleMaestroAccionInvalidar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionInvalidar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionConfirmar
        /// </summary>
        public int IdDetalleMaestroAccionConfirmar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionConfirmar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionDescontar
        /// </summary>
        public int IdDetalleMaestroAccionDescontar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionDescontar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionEmitir
        /// </summary>
        public int IdDetalleMaestroAccionEmitir {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionEmitir"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionRegistrar
        /// </summary>
        public int IdDetalleMaestroAccionRegistrar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionRegistrar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionSolicitar
        /// </summary>
        public int IdDetalleMaestroAccionSolicitar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionSolicitar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaDeDebito
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaDeDebito {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaDeDebito"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobantePorDefecto
        /// </summary>
        public int IdDetalleMaestroComprobantePorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobantePorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEntidadBancariaPorDefecto
        /// </summary>
        public int IdDetalleMaestroEntidadBancariaPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEntidadBancariaPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoInvalidado
        /// </summary>
        public int IdDetalleMaestroEstadoInvalidado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoInvalidado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoConfirmado
        /// </summary>
        public int IdDetalleMaestroEstadoConfirmado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoConfirmado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoAnulado
        /// </summary>
        public int IdDetalleMaestroEstadoAnulado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoAnulado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoRegistrado
        /// </summary>
        public int IdDetalleMaestroEstadoRegistrado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoRegistrado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroConceptoBasico
        /// </summary>
        public int IdDetalleMaestroParametroConceptoBasico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroConceptoBasico"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionVer
        /// </summary>
        public int IdDetalleMaestroAccionVer {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionVer"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroCodigoEstadoItemAdicionar
        /// </summary>
        public int IdDetalleMaestroCodigoEstadoItemAdicionar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroCodigoEstadoItemAdicionar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroCodigoEstadoItemModificado
        /// </summary>
        public int IdDetalleMaestroCodigoEstadoItemModificado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroCodigoEstadoItemModificado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroCodigoEstadoItemAnulado
        /// </summary>
        public int IdDetalleMaestroCodigoEstadoItemAnulado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroCodigoEstadoItemAnulado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteBoleta
        /// </summary>
        public int IdDetalleMaestroComprobanteBoleta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteBoleta"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteFactura
        /// </summary>
        public int IdDetalleMaestroComprobanteFactura {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteFactura"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaCredito
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaCredito {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaCredito"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroDocumentoIdentidadInterno
        /// </summary>
        public int IdDetalleMaestroDocumentoIdentidadInterno {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroDocumentoIdentidadInterno"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroAliasCliente
        /// </summary>
        public int IdDetalleMaestroParametroAliasCliente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroAliasCliente"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroTipoCompra
        /// </summary>
        public int IdDetalleMaestroParametroTipoCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroTipoCompra"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroDetalleUnificado
        /// </summary>
        public int IdDetalleMaestroParametroDetalleUnificado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroDetalleUnificado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaVentaInterna
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaVentaInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaVentaInterna"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaInvalidacionCompra
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaInvalidacionCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaInvalidacionCompra"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoContabilizado
        /// </summary>
        public int IdDetalleMaestroEstadoContabilizado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoContabilizado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionContabilizar
        /// </summary>
        public int IdDetalleMaestroAccionContabilizar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionContabilizar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaInvalidacionAnulacionCompra
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaInvalidacionAnulacionCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaInvalidacionAnulacionCompra"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaInvalidacionVenta
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaInvalidacionVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaInvalidacionVenta"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaInvalidacionAnulacionVenta
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaInvalidacionAnulacionVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaInvalidacionAnulacionVenta"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaCompraInterna
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaCompraInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaCompraInterna"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionTransmitir
        /// </summary>
        public int IdDetalleMaestroAccionTransmitir {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionTransmitir"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoTransmitido
        /// </summary>
        public int IdDetalleMaestroEstadoTransmitido {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoTransmitido"]);
               
            }
        }
        /// <summary>
        ///  Código de detalle de maestro del documento boleta
        /// </summary>
        public string CodigoDetalleMaestroBoleta {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoDetalleMaestroBoleta"]);
               
            }
        }
        /// <summary>
        ///  CodigoDetalleMaestroFactura
        /// </summary>
        public string CodigoDetalleMaestroFactura {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoDetalleMaestroFactura"]);
               
            }
        }
        /// <summary>
        ///  CodigoDetalleMaestroNotaDeCredito
        /// </summary>
        public string CodigoDetalleMaestroNotaDeCredito {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoDetalleMaestroNotaDeCredito"]);
               
            }
        }
        /// <summary>
        ///  CodigoDetalleMaestroNotaDeDebito
        /// </summary>
        public string CodigoDetalleMaestroNotaDeDebito {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoDetalleMaestroNotaDeDebito"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoEditado
        /// </summary>
        public int IdDetalleMaestroEstadoEditado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoEditado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroAccionEditar
        /// </summary>
        public int IdDetalleMaestroAccionEditar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroAccionEditar"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroEstadoEntregaMercaderia
        /// </summary>
        public int IdDetalleMaestroParametroEstadoEntregaMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroEstadoEntregaMercaderia"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroFechaInicioTransporte
        /// </summary>
        public int IdDetalleMaestroParametroFechaInicioTransporte {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroFechaInicioTransporte"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdTransportista
        /// </summary>
        public int IdDetalleMaestroParametroIdTransportista {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdTransportista"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroPlacaMarcaTransportista
        /// </summary>
        public int IdDetalleMaestroParametroPlacaMarcaTransportista {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroPlacaMarcaTransportista"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroNumeroLicenciaTransportista
        /// </summary>
        public int IdDetalleMaestroParametroNumeroLicenciaTransportista {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroNumeroLicenciaTransportista"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdModalidadTransporte
        /// </summary>
        public int IdDetalleMaestroParametroIdModalidadTransporte {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdModalidadTransporte"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdMotivoTransporte
        /// </summary>
        public int IdDetalleMaestroParametroIdMotivoTransporte {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdMotivoTransporte"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroDireccionOrigenTraslado
        /// </summary>
        public int IdDetalleMaestroParametroDireccionOrigenTraslado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroDireccionOrigenTraslado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroDireccionDestinoTraslado
        /// </summary>
        public int IdDetalleMaestroParametroDireccionDestinoTraslado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroDireccionDestinoTraslado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaAlmacenInterna
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaAlmacenInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaAlmacenInterna"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroTipoVenta
        /// </summary>
        public int IdDetalleMaestroParametroTipoVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroTipoVenta"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroModalidadDeTrasladoTransportePublico
        /// </summary>
        public int IdDetalleMaestroModalidadDeTrasladoTransportePublico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroModalidadDeTrasladoTransportePublico"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroModalidadDeTrasladoTransportePrivado
        /// </summary>
        public int IdDetalleMaestroModalidadDeTrasladoTransportePrivado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroModalidadDeTrasladoTransportePrivado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorVenta
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorVenta"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorCompra
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorCompra"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoOtros
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoOtros {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoOtros"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdCentroDeAtencionParaObtencionPrecios
        /// </summary>
        public int IdDetalleMaestroParametroIdCentroDeAtencionParaObtencionPrecios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdCentroDeAtencionParaObtencionPrecios"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaIngreso
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaIngreso {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaIngreso"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaEgreso
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaEgreso {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaEgreso"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroModalidadDeTraslado
        /// </summary>
        public int IdMaestroModalidadDeTraslado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroModalidadDeTraslado"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroMotivoDeTraslado
        /// </summary>
        public int IdMaestroMotivoDeTraslado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroMotivoDeTraslado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroComprobanteDeClientePredeterminado
        /// </summary>
        public int IdDetalleMaestroParametroComprobanteDeClientePredeterminado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroComprobanteDeClientePredeterminado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaAnulacionDeLaOperacion
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaAnulacionDeLaOperacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaAnulacionDeLaOperacion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaAnulacionPorErrorEnElRuc
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaAnulacionPorErrorEnElRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaAnulacionPorErrorEnElRuc"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaCorreccionPorErrorEnLaDescripcion
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaCorreccionPorErrorEnLaDescripcion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaCorreccionPorErrorEnLaDescripcion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaDescuentoGlobal
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaDescuentoGlobal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaDescuentoGlobal"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaDescuentoPorItem
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaDescuentoPorItem {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaDescuentoPorItem"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaDevolucionTotal
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaDevolucionTotal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaDevolucionTotal"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaDevolucionPorItem
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaDevolucionPorItem {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaDevolucionPorItem"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaBonificacion
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaBonificacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaBonificacion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaDisminucionEnElValor
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaDisminucionEnElValor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaDisminucionEnElValor"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeCreditoElectronicaOtrosConceptos
        /// </summary>
        public int IdDetalleMaestroNotaDeCreditoElectronicaOtrosConceptos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeCreditoElectronicaOtrosConceptos"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeDebitoElectronicaInteresesPorMora
        /// </summary>
        public int IdDetalleMaestroNotaDeDebitoElectronicaInteresesPorMora {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeDebitoElectronicaInteresesPorMora"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeDebitoElectronicaAumentoEnElValor
        /// </summary>
        public int IdDetalleMaestroNotaDeDebitoElectronicaAumentoEnElValor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeDebitoElectronicaAumentoEnElValor"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroNotaDeDebitoElectronicaPenalidadesYOtrosConceptos
        /// </summary>
        public int IdDetalleMaestroNotaDeDebitoElectronicaPenalidadesYOtrosConceptos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroNotaDeDebitoElectronicaPenalidadesYOtrosConceptos"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoDeNotaDeDebitoElectronica
        /// </summary>
        public int IdMaestroTipoDeNotaDeDebitoElectronica {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoDeNotaDeDebitoElectronica"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoDeNotaDeCreditoElectronica
        /// </summary>
        public int IdMaestroTipoDeNotaDeCreditoElectronica {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoDeNotaDeCreditoElectronica"]);
               
            }
        }
        /// <summary>
        ///  Viene a ser el codigo cat/sunat del tipo nota credito/debito que se guarda de acuerdo tipo de transaccion Ej, orden de anulacion de venta: es el detalle de maestro tipo de nota de credito anulacion de la operacion y este tiene el codigo 01
        /// </summary>
        public int IdDetalleMaestroParametroCodigoTransaccionSunat {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroCodigoTransaccionSunat"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEntidadBancariaNinguna
        /// </summary>
        public int IdDetalleMaestroEntidadBancariaNinguna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEntidadBancariaNinguna"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteGuiaDeRemisionRemitente
        /// </summary>
        public int IdDetalleMaestroComprobanteGuiaDeRemisionRemitente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteGuiaDeRemisionRemitente"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteGuiaDeRemisionTransportista
        /// </summary>
        public int IdDetalleMaestroComprobanteGuiaDeRemisionTransportista {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteGuiaDeRemisionTransportista"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroTieneGuiaDeRemision
        /// </summary>
        public int IdDetalleMaestroParametroTieneGuiaDeRemision {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroTieneGuiaDeRemision"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdUbigeoOrigenTraslado
        /// </summary>
        public int IdDetalleMaestroParametroIdUbigeoOrigenTraslado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdUbigeoOrigenTraslado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdUbigeoDestinoTraslado
        /// </summary>
        public int IdDetalleMaestroParametroIdUbigeoDestinoTraslado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdUbigeoDestinoTraslado"]);
               
            }
        }
        /// <summary>
        ///  CodigoDetalleMaestroGuiaDeRemisionRemitente
        /// </summary>
        public string CodigoDetalleMaestroGuiaDeRemisionRemitente {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoDetalleMaestroGuiaDeRemisionRemitente"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroModoOperacionCompra
        /// </summary>
        public int IdDetalleMaestroParametroModoOperacionCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroModoOperacionCompra"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroNumeroBolsasDePlastico
        /// </summary>
        public int IdDetalleMaestroParametroNumeroBolsasDePlastico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroNumeroBolsasDePlastico"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdCentroDeAtencionParaObtencionStock
        /// </summary>
        public int IdDetalleMaestroParametroIdCentroDeAtencionParaObtencionStock {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdCentroDeAtencionParaObtencionStock"]);
               
            }
        }
        /// <summary>
        ///  Representa a las caracteristicas propias
        /// </summary>
        public int IdMaestroCaracteristicaPropiaConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroCaracteristicaPropiaConcepto"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteOrdenDeAlmacen
        /// </summary>
        public int IdDetalleMaestroComprobanteOrdenDeAlmacen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteOrdenDeAlmacen"]);
               
            }
        }
        /// <summary>
        ///  Estado de las ordenes corporativas (compra, venta,invalidaciones, otros); indica si se realizo la generacion de las ordenes de almacenes del total, true = realIzado el total, false = no realizado el total (puede ser nula o parcial) 
        /// </summary>
        public int IdDetalleMaestroParametroEstadoGeneracionOrdenDeAlmacen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroEstadoGeneracionOrdenDeAlmacen"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroConceptoBasicoBolsaPlastica
        /// </summary>
        public int IdDetalleMaestroConceptoBasicoBolsaPlastica {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroConceptoBasicoBolsaPlastica"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIcbper
        /// </summary>
        public int IdDetalleMaestroParametroIcbper {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIcbper"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaInvalidacionGasto
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaInvalidacionGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaInvalidacionGasto"]);
               
            }
        }
        /// <summary>
        ///  CodigoDetalleMaestroMotivoDeTrasladoPorCompra
        /// </summary>
        public string CodigoDetalleMaestroMotivoDeTrasladoPorCompra {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoDetalleMaestroMotivoDeTrasladoPorCompra"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoCanjeado
        /// </summary>
        public int IdDetalleMaestroEstadoCanjeado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoCanjeado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMedioDepagoTransferenciaDeFondos
        /// </summary>
        public int IdDetalleMaestroMedioDepagoTransferenciaDeFondos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMedioDepagoTransferenciaDeFondos"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMedioDepagoDepositoEnCuenta
        /// </summary>
        public int IdDetalleMaestroMedioDepagoDepositoEnCuenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMedioDepagoDepositoEnCuenta"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorVentaSujetaAConfirmacionDeComprador
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorVentaSujetaAConfirmacionDeComprador {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorVentaSujetaAConfirmacionDeComprador"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorTrasladoEntreEstablecimientosDeLaMismaEmpresa
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorTrasladoEntreEstablecimientosDeLaMismaEmpresa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorTrasladoEntreEstablecimientosDeLaMismaEmpresa"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorTrasladoEmisorItineranteCP
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorTrasladoEmisorItineranteCP {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorTrasladoEmisorItineranteCP"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorImportacion
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorImportacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorImportacion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorExportacion
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorExportacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorExportacion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeTrasladoPorTrasladoAZonaPrimaria
        /// </summary>
        public int IdDetalleMaestroMotivoDeTrasladoPorTrasladoAZonaPrimaria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeTrasladoPorTrasladoAZonaPrimaria"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroDescripcionMotivoTraslado
        /// </summary>
        public int IdDetalleMaestroParametroDescripcionMotivoTraslado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroDescripcionMotivoTraslado"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroMonedas
        /// </summary>
        public int IdMaestroMonedas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroMonedas"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTiposCuentaBancaria
        /// </summary>
        public int IdMaestroTiposCuentaBancaria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTiposCuentaBancaria"]);
               
            }
        }
        /// <summary>
        ///  id del detalle de maestro correspondiente al medio de pago PUNTOS
        /// </summary>
        public int IdDetalleMaestroMedioDepagoPuntos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMedioDepagoPuntos"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroLibrosElectronicos
        /// </summary>
        public int IdMaestroLibrosElectronicos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroLibrosElectronicos"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroLibroElectronicoVentasIngresos
        /// </summary>
        public int IdDetalleMaestroLibroElectronicoVentasIngresos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroLibroElectronicoVentasIngresos"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroLibroElectronicoCompras
        /// </summary>
        public int IdDetalleMaestroLibroElectronicoCompras {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroLibroElectronicoCompras"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroLibroElectronicoComprasNoDomiciliadas
        /// </summary>
        public int IdDetalleMaestroLibroElectronicoComprasNoDomiciliadas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroLibroElectronicoComprasNoDomiciliadas"]);
               
            }
        }
        /// <summary>
        ///  Detalle de Maestro Estado Cerrado
        /// </summary>
        public int IdDetalleMaestroEstadoCerrado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoCerrado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoIngresado
        /// </summary>
        public int IdDetalleMaestroEstadoIngresado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoIngresado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoFinalizado
        /// </summary>
        public int IdDetalleMaestroEstadoFinalizado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoFinalizado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoDisponible
        /// </summary>
        public int IdDetalleMaestroEstadoDisponible {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoDisponible"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoReservado
        /// </summary>
        public int IdDetalleMaestroEstadoReservado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoReservado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoOcupado
        /// </summary>
        public int IdDetalleMaestroEstadoOcupado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoOcupado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroConceptoBasicoAlcohol
        /// </summary>
        public int IdDetalleMaestroConceptoBasicoAlcohol {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroConceptoBasicoAlcohol"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoFacturado
        /// </summary>
        public int IdDetalleMaestroEstadoFacturado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoFacturado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoCheckedIn
        /// </summary>
        public int IdDetalleMaestroEstadoCheckedIn {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoCheckedIn"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoCheckedOut
        /// </summary>
        public int IdDetalleMaestroEstadoCheckedOut {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoCheckedOut"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroDocumentoReferenciaDeGuia
        /// </summary>
        public int IdDetalleMaestroParametroDocumentoReferenciaDeGuia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroDocumentoReferenciaDeGuia"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoEntradaCambiado
        /// </summary>
        public int IdDetalleMaestroEstadoEntradaCambiado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoEntradaCambiado"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoSalidaCambiado
        /// </summary>
        public int IdDetalleMaestroEstadoSalidaCambiado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoSalidaCambiado"]);
               
            }
        }
        /// <summary>
        ///  NombreDetalleMaestroNacionPeru
        /// </summary>
        public string NombreDetalleMaestroNacionPeru {
            get {
                                 return Convert.ToString(parametrosConfiguracion["NombreDetalleMaestroNacionPeru"]);
               
            }
        }
        /// <summary>
        ///  Ids de familias que no deben de mostrarse en los selectores de familias, concatenar con palotes, ejemplo:1|2|3
        /// </summary>
        public string IdsFamiliasANoMostrarEnSelectorFamilia {
            get {
                                 return Convert.ToString(parametrosConfiguracion["IdsFamiliasANoMostrarEnSelectorFamilia"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroPaises
        /// </summary>
        public int IdMaestroPaises {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroPaises"]);
               
            }
        }
        /// <summary>
        ///  IdRegionUbigeoLima
        /// </summary>
        public int IdRegionUbigeoLima {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRegionUbigeoLima"]);
               
            }
        }
        /// <summary>
        ///  IdRegionUbigeoCallao
        /// </summary>
        public int IdRegionUbigeoCallao {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRegionUbigeoCallao"]);
               
            }
        }
        /// <summary>
        ///  IdProvinciaUbigeoLima
        /// </summary>
        public int IdProvinciaUbigeoLima {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdProvinciaUbigeoLima"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaDebitoInterna
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaDebitoInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaDebitoInterna"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaCreditoInterna
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaCreditoInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaCreditoInterna"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoIncidente
        /// </summary>
        public int IdDetalleMaestroEstadoIncidente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoIncidente"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTiposGrupoClientes
        /// </summary>
        public int IdMaestroTiposGrupoClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTiposGrupoClientes"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroClasificacionesGrupoClientes
        /// </summary>
        public int IdMaestroClasificacionesGrupoClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroClasificacionesGrupoClientes"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroTipoGrupoClientesComercial
        /// </summary>
        public int IdDetalleMaestroTipoGrupoClientesComercial {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoGrupoClientesComercial"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoPendiente
        /// </summary>
        public int IdDetalleMaestroEstadoPendiente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoPendiente"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoParcial
        /// </summary>
        public int IdDetalleMaestroEstadoParcial {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoParcial"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroEstadoCompletada
        /// </summary>
        public int IdDetalleMaestroEstadoCompletada {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroEstadoCompletada"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroConceptoDescuento
        /// </summary>
        public int IdDetalleMaestroConceptoDescuento {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroConceptoDescuento"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroConceptoInteres
        /// </summary>
        public int IdDetalleMaestroConceptoInteres {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroConceptoInteres"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdTipoComprobanteEmitir
        /// </summary>
        public int IdDetalleMaestroParametroIdTipoComprobanteEmitir {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdTipoComprobanteEmitir"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroIdConductor
        /// </summary>
        public int IdDetalleMaestroParametroIdConductor
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroIdConductor"]);

            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroPesoBrutoTotal
        /// </summary>
        public int IdDetalleMaestroParametroPesoBrutoTotal
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroPesoBrutoTotal"]);

            }
        }
        /// <summary>
        ///  IdDetalleMaestroParametroNumeroBultos
        /// </summary>
        public int IdDetalleMaestroParametroNumeroBultos
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroParametroNumeroBultos"]);

            }
        }
        /// <summary>
        ///  CodigoDetalleMaestroMotivoDeTrasladoPorTrasladoEntreEstablecimientos
        /// </summary>
        public string CodigoDetalleMaestroMotivoDeTrasladoPorTrasladoEntreEstablecimientos
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["CodigoDetalleMaestroMotivoDeTrasladoPorTrasladoEntreEstablecimientos"]);

            }
        }
    }



/// <summary>
///  FACTURACIONELECTRONICA
/// </summary>
public sealed class FacturacionElectronicaSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public FacturacionElectronicaSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",4);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static FacturacionElectronicaSettings defaultInstance = new FacturacionElectronicaSettings();
        
        public static FacturacionElectronicaSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new FacturacionElectronicaSettings();
        }





        /// <summary>
        ///  CodigoTipoOperacionVentaInterna
        /// </summary>
        public string CodigoTipoOperacionVentaInterna {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoTipoOperacionVentaInterna"]);
               
            }
        }
        /// <summary>
        ///  EnvioSunatDesarrollo
        /// </summary>
        public bool EnvioSunatDesarrollo {
            get {
                    
        return parametrosConfiguracion["EnvioSunatDesarrollo"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  URLWebServiceSunatFacturacionElectronicaProduccion
        /// </summary>
        public string URLWebServiceSunatFacturacionElectronicaProduccion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["URLWebServiceSunatFacturacionElectronicaProduccion"]);
               
            }
        }
        /// <summary>
        ///  ClaveCertificadoDigital
        /// </summary>
        public string ClaveCertificadoDigital {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ClaveCertificadoDigital"]);
               
            }
        }
        /// <summary>
        ///  ModoEnvioManual
        /// </summary>
        public bool ModoEnvioManual {
            get {
                    
        return parametrosConfiguracion["ModoEnvioManual"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  UsuarioSol
        /// </summary>
        public string UsuarioSol {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UsuarioSol"]);
               
            }
        }
        /// <summary>
        ///  ClaveSol
        /// </summary>
        public string ClaveSol {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ClaveSol"]);
               
            }
        }
        /// <summary>
        ///  CodigoTipoDocumentoResumenDiario
        /// </summary>
        public string CodigoTipoDocumentoResumenDiario {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoTipoDocumentoResumenDiario"]);
               
            }
        }
        /// <summary>
        ///  TamanyoLoteResumenDiario
        /// </summary>
        public int TamanyoLoteResumenDiario {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TamanyoLoteResumenDiario"]);
               
            }
        }
        /// <summary>
        ///  UltimosNDiasAMostarDocumentosEmitidos
        /// </summary>
        public int UltimosNDiasAMostarDocumentosEmitidos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["UltimosNDiasAMostarDocumentosEmitidos"]);
               
            }
        }
        /// <summary>
        ///  UltimosNDiasAMostarDocumentosEnviados
        /// </summary>
        public int UltimosNDiasAMostarDocumentosEnviados {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["UltimosNDiasAMostarDocumentosEnviados"]);
               
            }
        }
        /// <summary>
        ///  URLWebServiceSunatFacturacionElectronicaDesarrollo
        /// </summary>
        public string URLWebServiceSunatFacturacionElectronicaDesarrollo {
            get {
                                 return Convert.ToString(parametrosConfiguracion["URLWebServiceSunatFacturacionElectronicaDesarrollo"]);
               
            }
        }
        /// <summary>
        ///  RutaRecursos
        /// </summary>
        public string RutaRecursos {
            get {
                                 return Convert.ToString(parametrosConfiguracion["RutaRecursos"]);
               
            }
        }
        /// <summary>
        ///  MontoMaximoAVenderCuandoClienteNoEstaIdenticicado
        /// </summary>
        public int MontoMaximoAVenderCuandoClienteNoEstaIdenticicado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MontoMaximoAVenderCuandoClienteNoEstaIdenticicado"]);
               
            }
        }
        /// <summary>
        ///  TipoEnvioResumenDiario
        /// </summary>
        public string TipoEnvioResumenDiario {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoEnvioResumenDiario"]);
               
            }
        }
        /// <summary>
        ///  Es el código mínimo que responde sunat en caso de que mande excepción
        /// </summary>
        public int MinimoCodigoRespuestaConExcepcion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MinimoCodigoRespuestaConExcepcion"]);
               
            }
        }
        /// <summary>
        ///  Es el código maximo que responde sunat en caso de que mande excepción
        /// </summary>
        public int MaximoCodigoRespuestaConExcepcion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoCodigoRespuestaConExcepcion"]);
               
            }
        }
        /// <summary>
        ///  CodigoRespuestaAceptado
        /// </summary>
        public int CodigoRespuestaAceptado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["CodigoRespuestaAceptado"]);
               
            }
        }
        /// <summary>
        ///  CodigoTipoDocumentoComunicacionBaja
        /// </summary>
        public string CodigoTipoDocumentoComunicacionBaja {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoTipoDocumentoComunicacionBaja"]);
               
            }
        }
        /// <summary>
        ///  TipoEnvioIndividual
        /// </summary>
        public string TipoEnvioIndividual {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoEnvioIndividual"]);
               
            }
        }
        /// <summary>
        ///  TipoEnvioComunicacionDeBaja
        /// </summary>
        public string TipoEnvioComunicacionDeBaja {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoEnvioComunicacionDeBaja"]);
               
            }
        }
        /// <summary>
        ///  Tamaño del lote para la transferencia de los documentos de sigescom a e-factura
        /// </summary>
        public int TamañoLoteTransferenciaDocumentosEFactura {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TamañoLoteTransferenciaDocumentosEFactura"]);
               
            }
        }
        /// <summary>
        ///  PrefijoSerieNotaCreditoNotaDebitoFactura
        /// </summary>
        public string PrefijoSerieNotaCreditoNotaDebitoFactura {
            get {
                                 return Convert.ToString(parametrosConfiguracion["PrefijoSerieNotaCreditoNotaDebitoFactura"]);
               
            }
        }
        /// <summary>
        ///  PrefijoSerieNotaCreditoNotaDebitoBoleta
        /// </summary>
        public string PrefijoSerieNotaCreditoNotaDebitoBoleta {
            get {
                                 return Convert.ToString(parametrosConfiguracion["PrefijoSerieNotaCreditoNotaDebitoBoleta"]);
               
            }
        }
        /// <summary>
        ///  Es el código mínimo que responde sunat en caso de que mande rechazado
        /// </summary>
        public int MinimoCodigoRespuestaRechazado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MinimoCodigoRespuestaRechazado"]);
               
            }
        }
        /// <summary>
        ///  Es el código maximo que responde sunat en caso de que mande rechazado
        /// </summary>
        public int MaximoCodigoRespuestaRechazado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoCodigoRespuestaRechazado"]);
               
            }
        }
        /// <summary>
        ///  Es el código minimo que responde sunat en caso de que mande con observacion 
        /// </summary>
        public int MinimoCodigoRespuestaConObservacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MinimoCodigoRespuestaConObservacion"]);
               
            }
        }
        /// <summary>
        ///  UrlApiFacturacionElectronica
        /// </summary>
        public string UrlApiFacturacionElectronica {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UrlApiFacturacionElectronica"]);
               
            }
        }
        /// <summary>
        ///  Resolución emision electronica
        /// </summary>
        public string ResolucionEmisionElectronica {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ResolucionEmisionElectronica"]);
               
            }
        }
        /// <summary>
        ///  MuestraLogoClienteEnComprobanteImpreso
        /// </summary>
        public bool MostrarLogoEnComprobanteImpreso {
            get {
                    
        return parametrosConfiguracion["MostrarLogoEnComprobanteImpreso"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  CodigoRespuestaSunatPresentacionFueraDeFecha
        /// </summary>
        public string CodigoRespuestaSunatPresentacionFueraDeFecha {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoRespuestaSunatPresentacionFueraDeFecha"]);
               
            }
        }
        /// <summary>
        ///  URLWebServiceSunatGuiaDeRemisionElectronicaDesarrollo
        /// </summary>
        public string URLWebServiceSunatGuiaDeRemisionElectronicaDesarrollo {
            get {
                                 return Convert.ToString(parametrosConfiguracion["URLWebServiceSunatGuiaDeRemisionElectronicaDesarrollo"]);
               
            }
        }
        /// <summary>
        ///  URLWebServiceSunatGuiaDeRemisionElectronicaProduccion
        /// </summary>
        public string URLWebServiceSunatGuiaDeRemisionElectronicaProduccion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["URLWebServiceSunatGuiaDeRemisionElectronicaProduccion"]);
               
            }
        }
        /// <summary>
        ///  Es el valor de cada cuanto tiempo se van a transmitir, enviar , consultar y reenviar  los comprobantes
        /// </summary>
        public string CronExpressionTransmitirEnviarConsultarYReenviarComprobantes {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CronExpressionTransmitirEnviarConsultarYReenviarComprobantes"]);
               
            }
        }
        /// <summary>
        ///  El valor true quiere decir que se ejecutaran tareas en segundo plano, caso contrario no
        /// </summary>
        public bool UtilizarHangfireParaFacturacionElectronica {
            get {
                    
        return parametrosConfiguracion["UtilizarHangfireParaFacturacionElectronica"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Numero horas que resta a la actual para transmitir a efactura
        /// </summary>
        public int NumeroDeHorasDeRetrazoAlTransmitirAEfactura {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["NumeroDeHorasDeRetrazoAlTransmitirAEfactura"]);
               
            }
        }
        /// <summary>
        ///  UrlServidorFptCertificadosDigitales
        /// </summary>
        public string UrlServidorFptCertificadosDigitales {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UrlServidorFptCertificadosDigitales"]);
               
            }
        }
        /// <summary>
        ///  UsuarioServidorFptCertificadosDigitales
        /// </summary>
        public string UsuarioServidorFptCertificadosDigitales {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UsuarioServidorFptCertificadosDigitales"]);
               
            }
        }
        /// <summary>
        ///  PasswordServidorFptCertificadosDigitales
        /// </summary>
        public string PasswordServidorFptCertificadosDigitales {
            get {
                                 return Convert.ToString(parametrosConfiguracion["PasswordServidorFptCertificadosDigitales"]);
               
            }
        }
        /// <summary>
        ///  URLWebServiceSunatConsultaDocumento
        /// </summary>
        public string URLWebServiceSunatConsultaDocumento {
            get {
                                 return Convert.ToString(parametrosConfiguracion["URLWebServiceSunatConsultaDocumento"]);
               
            }
        }
        /// <summary>
        ///  Numero de intentos al momento de consultar el crd del envio individual
        /// </summary>
        public int NumeroIntentosConsultaCDREnvioIndividual {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["NumeroIntentosConsultaCDREnvioIndividual"]);
               
            }
        }
        /// <summary>
        ///  Numero de intentos al momento de consultar el crd del envio de resumen
        /// </summary>
        public int NumeroIntentosConsultaCDREnvioResumen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["NumeroIntentosConsultaCDREnvioResumen"]);
               
            }
        }
        /// <summary>
        ///  Tiempo de espera en milisegundos para consultar envio de resumen
        /// </summary>
        public int TiempoEsperaParaConsultarEnvioResumen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TiempoEsperaParaConsultarEnvioResumen"]);
               
            }
        }
        /// <summary>
        ///  Tiempo de espera en milisegundos que se usa en las iteraciones que se tiene al  momento de hacer un bucle de consultas por errores en las consultas
        /// </summary>
        public int TiempoEsperaParaConsultarIterativasEnvio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TiempoEsperaParaConsultarIterativasEnvio"]);
               
            }
        }
        /// <summary>
        ///  Codigo de respuesta de sunat, el comprobante fue registrado previamente con otros datos
        /// </summary>
        public string CodigoRespuestaSunatComprobantePreviamenteRegistrado {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoRespuestaSunatComprobantePreviamenteRegistrado"]);
               
            }
        }
        /// <summary>
        ///  CodigoRespuestaSunatExisteDocumentoYaInformadoAnteriormente
        /// </summary>
        public string CodigoRespuestaSunatExisteDocumentoYaInformadoAnteriormente {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoRespuestaSunatExisteDocumentoYaInformadoAnteriormente"]);
               
            }
        }
        /// <summary>
        ///  PlazoParaInvalidarComprobanteElectronico desde su emisión
        /// </summary>
        public int PlazoEnDiasParaInvalidarComprobanteElectronico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PlazoEnDiasParaInvalidarComprobanteElectronico"]);
               
            }
        }
        /// <summary>
        ///  GrantTypeTokenSeguridadSunat
        /// </summary>
        public string GrantTypeTokenSeguridadSunat
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["GrantTypeTokenSeguridadSunat"]);

            }
        }
        /// <summary>
        ///  IdClienteTokenSeguridadSunat
        /// </summary>
        public string IdClienteTokenSeguridadSunat
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["IdClienteTokenSeguridadSunat"]);

            }
        }
        /// <summary>
        ///  ClaveClienteTokenSeguridadSunat
        /// </summary>
        public string ClaveClienteTokenSeguridadSunat
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["ClaveClienteTokenSeguridadSunat"]);

            }
        }
        /// <summary>
        ///  UrlApiCpeSunat
        /// </summary>
        public string UrlApiCpeSunat
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["UrlApiCpeSunat"]);

            }
        }
        /// <summary>
        ///  UrlApiSeguridadSunat
        /// </summary>
        public string UrlApiSeguridadSunat
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["UrlApiSeguridadSunat"]);

            }
        }
        /// <summary>
        ///  PreMetodoApiSeguridadSunat
        /// </summary>
        public string PreMetodoApiSeguridadSunat
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["PreMetodoApiSeguridadSunat"]);

            }
        }
        /// <summary>
        ///  PosMetodoApiSeguridadSunat
        /// </summary>
        public string PosMetodoApiSeguridadSunat
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["PosMetodoApiSeguridadSunat"]);

            }
        }
        /// <summary>
        ///  UrlApiCpeSunatEnvio
        /// </summary>
        public string UrlApiCpeSunatEnvio
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["UrlApiCpeSunatEnvio"]);

            }
        }
        /// <summary>
        ///  UrlApiCpeSunatRespuesta
        /// </summary>
        public string UrlApiCpeSunatRespuesta
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["UrlApiCpeSunatRespuesta"]);

            }
        }
        /// <summary>
        ///  TiempoEsperaParaConsultarRespuestaGuiaRemisionEnMilisegundos
        /// </summary>
        public int TiempoEsperaParaConsultarRespuestaGuiaRemisionEnMilisegundos
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["TiempoEsperaParaConsultarRespuestaGuiaRemisionEnMilisegundos"]);

            }
        }
        /// <summary>
        ///  CodigoApiEnProcesoRespuestaGuiaRemision
        /// </summary>
        public string CodigoApiEnProcesoRespuestaGuiaRemision
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["CodigoApiEnProcesoRespuestaGuiaRemision"]);

            }
        }
        /// <summary>
        ///  CodigoApiErrorRespuestaGuiaRemision
        /// </summary>
        public string CodigoApiErrorRespuestaGuiaRemision
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["CodigoApiErrorRespuestaGuiaRemision"]);

            }
        }

    }



/// <summary>
///  CONTABILIDAD
/// </summary>
public sealed class ContabilidadSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public ContabilidadSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",5);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static ContabilidadSettings defaultInstance = new ContabilidadSettings();
        
        public static ContabilidadSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new ContabilidadSettings();
        }





        /// <summary>
        ///  IdCuentaContableCuentasPorCobrarVentasEnSoles
        /// </summary>
        public int IdCuentaContableCuentasPorCobrarVentasEnSoles {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCuentaContableCuentasPorCobrarVentasEnSoles"]);
               
            }
        }
        /// <summary>
        ///  IdCuentaContableCuentasPorCobrarVentasEnDolares
        /// </summary>
        public int IdCuentaContableCuentasPorCobrarVentasEnDolares {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCuentaContableCuentasPorCobrarVentasEnDolares"]);
               
            }
        }
        /// <summary>
        ///  CodigoInicialParaCuentaContableVenta
        /// </summary>
        public string CodigoInicialParaCuentaContableVenta {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoInicialParaCuentaContableVenta"]);
               
            }
        }
        /// <summary>
        ///  CodigoInicialParaCuentaContableCompra
        /// </summary>
        public string CodigoInicialParaCuentaContableCompra {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoInicialParaCuentaContableCompra"]);
               
            }
        }
        /// <summary>
        ///  longitudCodigoCuentaContableCompraYVenta
        /// </summary>
        public int longitudCodigoCuentaContableCompraYVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["longitudCodigoCuentaContableCompraYVenta"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoServicioVenta
        /// </summary>
        public int IdConceptoServicioVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoServicioVenta"]);
               
            }
        }
        /// <summary>
        ///  IdCuentaContableIGV
        /// </summary>
        public int IdCuentaContableIGV {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCuentaContableIGV"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoAdministrativoCompra
        /// </summary>
        public int IdConceptoAdministrativoCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoAdministrativoCompra"]);
               
            }
        }
        /// <summary>
        ///  IdCuentaContableDetraccion
        /// </summary>
        public int IdCuentaContableDetraccion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCuentaContableDetraccion"]);
               
            }
        }
        /// <summary>
        ///  IdCuentaContablePorPagarComprasEnSoles
        /// </summary>
        public int IdCuentaContablePorPagarComprasEnSoles {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCuentaContablePorPagarComprasEnSoles"]);
               
            }
        }
        /// <summary>
        ///  IdCuentaContablePorPagarComprasEnDolares
        /// </summary>
        public int IdCuentaContablePorPagarComprasEnDolares {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCuentaContablePorPagarComprasEnDolares"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoServicioCompra
        /// </summary>
        public int IdConceptoServicioCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoServicioCompra"]);
               
            }
        }
    

}



/// <summary>
///  CONCEPTO
/// </summary>
public sealed class ConceptoSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public ConceptoSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",6);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static ConceptoSettings defaultInstance = new ConceptoSettings();
        
        public static ConceptoSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new ConceptoSettings();
        }





        /// <summary>
        ///  IdRolMercaderia
        /// </summary>
        public int IdRolMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolMercaderia"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioIGV
        /// </summary>
        public int IdConceptoNegocioIGV {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioIGV"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioDescuento
        /// </summary>
        public int IdConceptoNegocioDescuento {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioDescuento"]);
               
            }
        }
        /// <summary>
        ///  idUnidadMedidaPorDefecto
        /// </summary>
        public int idUnidadMedidaPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idUnidadMedidaPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  idPresentacionPorDefecto
        /// </summary>
        public int idPresentacionPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idPresentacionPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  idTarifaGenerica
        /// </summary>
        public int idTarifaGenerica {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idTarifaGenerica"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioGenerico
        /// </summary>
        public int IdConceptoNegocioGenerico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioGenerico"]);
               
            }
        }
        /// <summary>
        ///  PrecioDuracionPorDefectoEnMeses
        /// </summary>
        public int PrecioDuracionPorDefectoEnMeses {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PrecioDuracionPorDefectoEnMeses"]);
               
            }
        }
        /// <summary>
        ///  RolAplicaAConceptoNegocio
        /// </summary>
        public int RolAplicaAConceptoNegocio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["RolAplicaAConceptoNegocio"]);
               
            }
        }
        /// <summary>
        ///  RolAplicaAActorNegocio
        /// </summary>
        public int RolAplicaAActorNegocio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["RolAplicaAActorNegocio"]);
               
            }
        }
        /// <summary>
        ///  IdRolServicio
        /// </summary>
        public int IdRolServicio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolServicio"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioFlete
        /// </summary>
        public int IdConceptoNegocioFlete {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioFlete"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoEnRegistroUnificadosdeVentasyCobros
        /// </summary>
        public int IdConceptoEnRegistroUnificadosdeVentasyCobros {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoEnRegistroUnificadosdeVentasyCobros"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioDescuentoGlobal
        /// </summary>
        public int IdConceptoNegocioDescuentoGlobal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioDescuentoGlobal"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioInteresPorMora
        /// </summary>
        public int IdConceptoNegocioInteresPorMora {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioInteresPorMora"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioIcbper
        /// </summary>
        public int IdConceptoNegocioIcbper {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioIcbper"]);
               
            }
        }
        /// <summary>
        ///  IdRolGasto
        /// </summary>
        public int IdRolGasto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolGasto"]);
               
            }
        }
        /// <summary>
        ///  1 = Solo concepto de negocio de gran cantidad mas de 3000; 2 = Concepto basico y concepto de negocio; 3 = Solo concepto de negocio de poca cantidad menos a 3000 conceptos
        /// </summary>
        public int ModoDeSeleccionDeConceptoDeNegocioEnCambioPrecios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionDeConceptoDeNegocioEnCambioPrecios"]);
               
            }
        }
        /// <summary>
        ///  Id presentacion que al moemnto de generar el nombre del concepto no se tendra en cuenta para este
        /// </summary>
        public int IdPresentacionAOcultarEnNombreConceptoNegocio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdPresentacionAOcultarEnNombreConceptoNegocio"]);
               
            }
        }
        /// <summary>
        ///  Id unidad de medida comercial que al momento de generar el nombre del concepto no se tendra en cuenta para este
        /// </summary>
        public int IdUnidadDeMedidaComercialAOcultarEnNombreConceptoNegocio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdUnidadDeMedidaComercialAOcultarEnNombreConceptoNegocio"]);
               
            }
        }
        /// <summary>
        ///  Modo de seleccion de tipos de familia que se va a obtener en registro de familia; 0: Servicios, 1: Bienes, 2: Ambos
        /// </summary>
        public int ModoDeSeleccionTipoFamiliaEnRegistroFamilia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionTipoFamiliaEnRegistroFamilia"]);
               
            }
        }
        /// <summary>
        ///  Mostrar campo para el registro del codigo al registar y/o editar el concepto
        /// </summary>
        public bool MostrarCampoCodigoAlRegistrarConcepto {
            get {
                    
        return parametrosConfiguracion["MostrarCampoCodigoAlRegistrarConcepto"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  IdTarifaSeleccionadaParaPrecioUnitarioEnReporteDigemid
        /// </summary>
        public int IdTarifaSeleccionadaParaPrecioUnitarioEnReporteDigemid {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTarifaSeleccionadaParaPrecioUnitarioEnReporteDigemid"]);
               
            }
        }
        /// <summary>
        ///  Porcentaje de descuento para precio unitario por paquete en reporte de digemid, Ejemplo 5 => 5% de descuento
        /// </summary>
        public int PorcentajeDescuentoParaPrecioUnitarioPaqueteEnReporteDigemid {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PorcentajeDescuentoParaPrecioUnitarioPaqueteEnReporteDigemid"]);
               
            }
        }
        /// <summary>
        ///  PorcentajeParaObtenerConceptoConStockModerado Ejemplo:20
        /// </summary>
        public int PorcentajeParaObtenerStockMaximo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PorcentajeParaObtenerStockMaximo"]);
               
            }
        }
        /// <summary>
        ///  Valor Nulo de Categoria
        /// </summary>
        public int IdCategoriaNula {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCategoriaNula"]);
               
            }
        }
        /// <summary>
        ///  PermitirRegistroCodigoDigemidEnConceptoComercial
        /// </summary>
        public bool PermitirRegistroCodigoDigemidEnConceptoComercial {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroCodigoDigemidEnConceptoComercial"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Etiqueta seleccionada por defecto en la impresion de las etiquetas: 1 = nombre y precio, 2 = codigo barra, 3 = nombre + caracteristica + precio + codigo barra
        /// </summary>
        public int EtiquetaSeleccionadaPorDefectoEnImpresionEtiquetas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["EtiquetaSeleccionadaPorDefectoEnImpresionEtiquetas"]);
               
            }
        }
        /// <summary>
        ///  Parametros de etiqueta de impresion de etiqueta 3 : Alto|Ancho|Filas|Columnas|Fuente
        /// </summary>
        public string ParametrosEtiquetaImpresionEtiqueta3 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ParametrosEtiquetaImpresionEtiqueta3"]);
               
            }
        }
        /// <summary>
        ///  Parametros de etiqueta de impresion de etiqueta 4 : Alto|Ancho|Filas|Columnas|Fuente
        /// </summary>
        public string ParametrosEtiquetaImpresionEtiqueta4 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ParametrosEtiquetaImpresionEtiqueta4"]);
               
            }
        }
        /// <summary>
        ///  PermitirConceptosConNombreRepetido
        /// </summary>
        public bool PermitirConceptosConNombreRepetido {
            get {
                    
        return parametrosConfiguracion["PermitirConceptosConNombreRepetido"].ToString()=="1";

               
            }
        }
    

}



/// <summary>
///  APLICACION
/// </summary>
public sealed class AplicacionSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public AplicacionSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",7);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static AplicacionSettings defaultInstance = new AplicacionSettings();
        
        public static AplicacionSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new AplicacionSettings();
        }





        /// <summary>
        ///  1: Venta Integrada 2: Venta en dos pasos
        /// </summary>
        public int TipoVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TipoVenta"]);
               
            }
        }
        /// <summary>
        ///  Permitir el registro de lote en los detalles de registro de compra 
        /// </summary>
        public bool PermitirLoteEnDetalleDeCompra {
            get {
                    
        return parametrosConfiguracion["PermitirLoteEnDetalleDeCompra"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Si el precio unitario se calcula de acuerdo al importe ingresado
        /// </summary>
        public bool PrecioUnitarioCalculadoVenta {
            get {
                    
        return parametrosConfiguracion["PrecioUnitarioCalculadoVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarDetalleUnificado
        /// </summary>
        public bool MostrarDetalleUnificado {
            get {
                    
        return parametrosConfiguracion["MostrarDetalleUnificado"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  ChecketDetalleUnificado
        /// </summary>
        public bool ChecketDetalleUnificado {
            get {
                    
        return parametrosConfiguracion["ChecketDetalleUnificado"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  ValorDetalleUnificado
        /// </summary>
        public string ValorDetalleUnificado {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ValorDetalleUnificado"]);
               
            }
        }
        /// <summary>
        ///  MostrarCabeceraVoucher
        /// </summary>
        public bool MostrarCabeceraVoucher {
            get {
                    
        return parametrosConfiguracion["MostrarCabeceraVoucher"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  HoraInicioIntervaloAtencion
        /// </summary>
        public string HoraInicioIntervaloAtencion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["HoraInicioIntervaloAtencion"]);
               
            }
        }
        /// <summary>
        ///  HoraFinIntervaloAtencion
        /// </summary>
        public string HoraFinIntervaloAtencion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["HoraFinIntervaloAtencion"]);
               
            }
        }
        /// <summary>
        ///  AplicarIntervaloAtencionEnReporteVentaDiario
        /// </summary>
        public bool AplicarIntervaloAtencionEnReporteVentaDiario {
            get {
                    
        return parametrosConfiguracion["AplicarIntervaloAtencionEnReporteVentaDiario"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  AplicarCantidadPorDefectoEnVentas
        /// </summary>
        public bool AplicarCantidadPorDefectoEnVentas {
            get {
                    
        return parametrosConfiguracion["AplicarCantidadPorDefectoEnVentas"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  CantidadPorDefectoEnVentas
        /// </summary>
        public string CantidadPorDefectoEnVentas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CantidadPorDefectoEnVentas"]);
               
            }
        }
        /// <summary>
        ///  NumeroCopiasAImprimirComprobanteVenta
        /// </summary>
        public int NumeroCopiasAImprimirComprobanteVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["NumeroCopiasAImprimirComprobanteVenta"]);
               
            }
        }
        /// <summary>
        ///  1: el almacen unico es la sede, 0: cada punto de venta es un almacen y pueden haber algunos almacenes adicionales
        /// </summary>
        public bool StockCentralizado {
            get {
                    
        return parametrosConfiguracion["StockCentralizado"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PrecioUnitarioIngresadoVenta
        /// </summary>
        public bool PrecioUnitarioIngresadoVenta {
            get {
                    
        return parametrosConfiguracion["PrecioUnitarioIngresadoVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  es el valor que te aparecera en el registro de mercaderia pero no se guarda
        /// </summary>
        public int ValorPrecioVentaPorDefectoQueNoSeDebeGuardar {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ValorPrecioVentaPorDefectoQueNoSeDebeGuardar"]);
               
            }
        }
        /// <summary>
        ///  PermitirVentaAlCredito
        /// </summary>
        public bool PermitirVentaAlCredito {
            get {
                    
        return parametrosConfiguracion["PermitirVentaAlCredito"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  VencimientoEnMesesPorDefectoCreditoModoRapido
        /// </summary>
        public int VencimientoEnMesesPorDefectoCreditoModoRapido {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["VencimientoEnMesesPorDefectoCreditoModoRapido"]);
               
            }
        }
        /// <summary>
        ///  PermitirRegistroFleteEnVenta
        /// </summary>
        public bool PermitirRegistroFleteEnVenta {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroFleteEnVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirRegistroFleteEnCompra
        /// </summary>
        public bool PermitirRegistroFleteEnCompra {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroFleteEnCompra"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirRegistroFleteEnGasto
        /// </summary>
        public bool PermitirRegistroFleteEnGasto {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroFleteEnGasto"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirVentaConFechaPasada
        /// </summary>
        public bool PermitirVentaConFechaPasada {
            get {
                    
        return parametrosConfiguracion["PermitirVentaConFechaPasada"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Servidor de envio de correos electronicos
        /// </summary>
        public string MailServer {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MailServer"]);
               
            }
        }
        /// <summary>
        ///  Puerto de envio de correos electronicos
        /// </summary>
        public int MailPort {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MailPort"]);
               
            }
        }
        /// <summary>
        ///  Cuenta de envio de correos electronicos
        /// </summary>
        public string MailAccount {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MailAccount"]);
               
            }
        }
        /// <summary>
        ///  Contrasenia de la cuenta de envio de correos electronicos
        /// </summary>
        public string MailPassword {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MailPassword"]);
               
            }
        }
        /// <summary>
        ///  Correo electronico por defecto al cual responderan
        /// </summary>
        public string ToMailDefault {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ToMailDefault"]);
               
            }
        }
        /// <summary>
        ///  Permite el multiple ingreso del mismo detalle en compra
        /// </summary>
        public bool PermitirMultipleIngresoDelMismoDetalleEnCompra {
            get {
                    
        return parametrosConfiguracion["PermitirMultipleIngresoDelMismoDetalleEnCompra"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Dias que se daran a la fecha de registro para que tengamos la fecha de vencimiento Ejm: DiasDeVenc... = 5; Fecha Reg. = 10/02/2019; Fecha Venc. = Fecha Reg. + DiasDeVenc : 15/02/2019
        /// </summary>
        public int DiasDeVencimientoEnCreditoRapidoDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasDeVencimientoEnCreditoRapidoDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdModalidadDeTrasladoPorDefectoEnSalidaDeMercaderia, Maestro modalidad de traslado
        /// </summary>
        public int IdModalidadDeTrasladoPorDefectoEnSalidaDeMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdModalidadDeTrasladoPorDefectoEnSalidaDeMercaderia"]);
               
            }
        }
        /// <summary>
        ///  IdMotivoDeTrasladoPorDefectoEnSalidaDeMercaderia, Maestro motivo de traslado
        /// </summary>
        public int IdMotivoDeTrasladoPorDefectoEnSalidaDeMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMotivoDeTrasladoPorDefectoEnSalidaDeMercaderia"]);
               
            }
        }
        /// <summary>
        ///  IdTransportistaPorDefectoEnSalidaDeMercaderia
        /// </summary>
        public int IdTransportistaPorDefectoEnSalidaDeMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTransportistaPorDefectoEnSalidaDeMercaderia"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDeComprobantePorDefectoEnSalidaDeMercaderia
        /// </summary>
        public int IdTipoDeComprobantePorDefectoEnSalidaDeMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDeComprobantePorDefectoEnSalidaDeMercaderia"]);
               
            }
        }
        /// <summary>
        ///  Mostrar el mensaje que el negocio quiere que vaya en la ultima parte de sus comprobantes impresos
        /// </summary>
        public bool MostrarMensajeDeNegocio {
            get {
                    
        return parametrosConfiguracion["MostrarMensajeDeNegocio"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Mensaje que el negocio quiere que vaya en la ultima parte de sus comprobantes impresos
        /// </summary>
        public string MensajeDeNegocio {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MensajeDeNegocio"]);
               
            }
        }
        /// <summary>
        ///  1=Código; 2=Concepto Básico, 3=sufijo, 4= Características Comunes, 5= presentación, 6=unidad, 7=precio
        /// </summary>
        public string MascaraConceptoNegocioVenta {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraConceptoNegocioVenta"]);
               
            }
        }
        /// <summary>
        ///  1=Código; 2=Concepto Básico, 3=sufijo, 4= Características Comunes, 5= presentación, 6=unidad
        /// </summary>
        public string MascaraConceptoNegocioCompraYAlmacen {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraConceptoNegocioCompraYAlmacen"]);
               
            }
        }
        /// <summary>
        ///  PermitirEnvioAutomaticoDeReportes
        /// </summary>
        public bool PermitirEnvioAutomaticoDeReportes {
            get {
                    
        return parametrosConfiguracion["PermitirEnvioAutomaticoDeReportes"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Es el valor de cada cuanto tiempo se van a enviar de manera automatica los reportes
        /// </summary>
        public string CronExpressionEnvioAutomaticoDeReportes {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CronExpressionEnvioAutomaticoDeReportes"]);
               
            }
        }
        /// <summary>
        ///  Correos de destino del envio automatico de reportes
        /// </summary>
        public string CorreosDestinoDelEnvioAutomaticoDeReportes {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CorreosDestinoDelEnvioAutomaticoDeReportes"]);
               
            }
        }
        /// <summary>
        ///  1 = Punto venta x comprobante; 2 = Serie x comprobante; 3 = LE ventas en excel; 4 = LE ventas en txt; 5 = Adsoft; 6 = Foxcom 7 = punto venta x comprobante con icbper; 8 = LE ventas sin conceptos; 9 = Insumos controlados; 10 = Ventas en excel
        /// </summary>
        public string MascaraDeReporteMensualDeEnvioAutomatico {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeReporteMensualDeEnvioAutomatico"]);
               
            }
        }
        /// <summary>
        ///  Sera el correo electronico al cual se le notificara cada vez que hay algun error con el envio de llos reportes del hangfire
        /// </summary>
        public string CorreoParaNotificacionHangfireReportes {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CorreoParaNotificacionHangfireReportes"]);
               
            }
        }
        /// <summary>
        ///  Sera el correo electronico al cual se le notificara cada vez que hay algun error con el hangfire
        /// </summary>
        public string CorreoParaNotificacionDeErrorHangfire {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CorreoParaNotificacionDeErrorHangfire"]);
               
            }
        }
        /// <summary>
        ///  Mostrar el monto de igv en documento de cotizacion
        /// </summary>
        public bool MostrarIgvEnDocumentoDeCotizacion {
            get {
                    
        return parametrosConfiguracion["MostrarIgvEnDocumentoDeCotizacion"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  UrlApiConsultaActorDni
        /// </summary>
        public string UrlApiConsultaActorDni {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UrlApiConsultaActorDni"]);
               
            }
        }
        /// <summary>
        ///  UrlApiConsultaActorRuc
        /// </summary>
        public string UrlApiConsultaActorRuc {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UrlApiConsultaActorRuc"]);
               
            }
        }
        /// <summary>
        ///  Formato de fecha que muestra el dia/mes/anio hora:minuto segundo
        /// </summary>
        public string FormatoFechaHora {
            get {
                                 return Convert.ToString(parametrosConfiguracion["FormatoFechaHora"]);
               
            }
        }
        /// <summary>
        ///  Formato de fecha que muestra el dia/mes/anio
        /// </summary>
        public string FormatoFecha {
            get {
                                 return Convert.ToString(parametrosConfiguracion["FormatoFecha"]);
               
            }
        }
        /// <summary>
        ///  Formato de fecha que muestra hora:minuto segundo
        /// </summary>
        public string FormatoHora {
            get {
                                 return Convert.ToString(parametrosConfiguracion["FormatoHora"]);
               
            }
        }
        /// <summary>
        ///  Permitira la gestion de lotes en todas las oper. con inventario, stock, movimientos de mercad., en caso de que este true este ara que se habilite el manejo de stock en todas las operaciones, y false sera con un lote en especifico, este sera null.
        /// </summary>
        public bool PermitirGestionDeLotes {
            get {
                    
        return parametrosConfiguracion["PermitirGestionDeLotes"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Permitir el registro del campo registro en los detalles de registro de compra 
        /// </summary>
        public bool PermitirRegistroEnDetalleDeCompra {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroEnDetalleDeCompra"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Permitir el registro del campo fecha de vencimiento en registro de compra
        /// </summary>
        public bool PermitirVencimientoEnDetalleDeCompra {
            get {
                    
        return parametrosConfiguracion["PermitirVencimientoEnDetalleDeCompra"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Numero de decimales en cantidad en las entradas, calculos y salidas; registardo en los detalles de transaccion. 
        /// </summary>
        public int NumeroDecimalesEnCantidad {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["NumeroDecimalesEnCantidad"]);
               
            }
        }
        /// <summary>
        ///  Numero de decimales en precio unitario en las entradas, calculos y salidas; registardo en los detalles de transaccion.  
        /// </summary>
        public int NumeroDecimalesEnPrecio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["NumeroDecimalesEnPrecio"]);
               
            }
        }
        /// <summary>
        ///  PermitirGenerarInventarioLogicoAutomaticamente
        /// </summary>
        public bool PermitirGenerarInventarioLogicoAutomaticamente {
            get {
                    
        return parametrosConfiguracion["PermitirGenerarInventarioLogicoAutomaticamente"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirGenerarArqueoCajaAutomaticamente
        /// </summary>
        public bool PermitirGenerarArqueoCajaAutomaticamente {
            get {
                    
        return parametrosConfiguracion["PermitirGenerarArqueoCajaAutomaticamente"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  CronExpressionGenerarInventarioLogicoAutomaticamente
        /// </summary>
        public string CronExpressionGenerarInventarioLogicoAutomaticamente {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CronExpressionGenerarInventarioLogicoAutomaticamente"]);
               
            }
        }
        /// <summary>
        ///  CronExpressionGenerarArqueoCajaAutomaticamente
        /// </summary>
        public string CronExpressionGenerarArqueoCajaAutomaticamente {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CronExpressionGenerarArqueoCajaAutomaticamente"]);
               
            }
        }
        /// <summary>
        ///  1 = Conceptos de gran cantidad, 2 = Familia y concepto, 3 = Concepto con filtros de busqueda, 4 = Concepto de poca cantidad
        /// </summary>
        public int ModoDeSeleccionDeConceptoDeNegocioEnCompras {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionDeConceptoDeNegocioEnCompras"]);
               
            }
        }
        /// <summary>
        ///  1 = Conceptos de gran cantidad, 2 = Familia y concepto, 3 = Concepto con filtros de busqueda, 4 = Concepto de poca cantidad
        /// </summary>
        public int ModoDeSeleccionDeConceptoDeNegocioEnGuiaRemision {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionDeConceptoDeNegocioEnGuiaRemision"]);
               
            }
        }
        /// <summary>
        ///  1 = Conceptos de gran cantidad, 2 = Familia y concepto, 3 = Concepto con filtros de busqueda, 4 = Concepto de poca cantidad
        /// </summary>
        public int ModoDeSeleccionDeConceptoDeNegocioEnTrasladoMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionDeConceptoDeNegocioEnTrasladoMercaderia"]);
               
            }
        }
        /// <summary>
        ///  1 = Conceptos de gran cantidad, 2 = Familia y concepto, 3 = Concepto con filtros de busqueda, 4 = Concepto de poca cantidad
        /// </summary>
        public int ModoDeSeleccionDeConceptoDeNegocioEnCotizacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionDeConceptoDeNegocioEnCotizacion"]);
               
            }
        }
        /// <summary>
        ///  MostrarBuscadorCodigoBarraEnCompras
        /// </summary>
        public bool MostrarBuscadorCodigoBarraEnCompras {
            get {
                    
        return parametrosConfiguracion["MostrarBuscadorCodigoBarraEnCompras"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarBuscadorCodigoBarraEnCambioPrecios
        /// </summary>
        public bool MostrarBuscadorCodigoBarraEnCambioPrecios {
            get {
                    
        return parametrosConfiguracion["MostrarBuscadorCodigoBarraEnCambioPrecios"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarBuscadorCodigoBarraEnGuiaRemision
        /// </summary>
        public bool MostrarBuscadorCodigoBarraEnGuiaRemision {
            get {
                    
        return parametrosConfiguracion["MostrarBuscadorCodigoBarraEnGuiaRemision"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarBuscadorCodigoBarraEnTrasladoMercaderia
        /// </summary>
        public bool MostrarBuscadorCodigoBarraEnTrasladoMercaderia {
            get {
                    
        return parametrosConfiguracion["MostrarBuscadorCodigoBarraEnTrasladoMercaderia"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarBuscadorCodigoBarraEnCotizacion
        /// </summary>
        public bool MostrarBuscadorCodigoBarraEnCotizacion {
            get {
                    
        return parametrosConfiguracion["MostrarBuscadorCodigoBarraEnCotizacion"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Modo de seleccion de tipos de familia que se va a obtener en ventas; 0: Servicios, 1: Bienes, 2: Ambos
        /// </summary>
        public int ModoDeSeleccionTipoDeFamiliaEnVentas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionTipoDeFamiliaEnVentas"]);
               
            }
        }
        /// <summary>
        ///  Modo de seleccion de tipos de familia que se va a obtener en compras; 0: Servicios, 1: Bienes, 2: Ambos
        /// </summary>
        public int ModoDeSeleccionTipoDeFamiliaEnCompras {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionTipoDeFamiliaEnCompras"]);
               
            }
        }
        /// <summary>
        ///  Modo de seleccion de tipos de familia que se va a obtener en cambio de precio; 0: Servicios, 1: Bienes, 2: Ambos
        /// </summary>
        public int ModoDeSeleccionTipoDeFamiliaEnCambioPrecios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionTipoDeFamiliaEnCambioPrecios"]);
               
            }
        }
        /// <summary>
        ///  Modo de seleccion de tipos de familia que se va a obtener en guia de remision; 0: Servicios, 1: Bienes, 2: Ambos
        /// </summary>
        public int ModoDeSeleccionTipoDeFamiliaEnGuiaRemision {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionTipoDeFamiliaEnGuiaRemision"]);
               
            }
        }
        /// <summary>
        ///  Modo de seleccion de tipos de familia que se va a obtener en traslados; 0: Servicios, 1: Bienes, 2: Ambos
        /// </summary>
        public int ModoDeSeleccionTipoDeFamiliaEnTrasladoMercaderia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionTipoDeFamiliaEnTrasladoMercaderia"]);
               
            }
        }
        /// <summary>
        ///  Modo de seleccion de tipos de familia que se va a obtener en cotizacion; 0: Servicios, 1: Bienes, 2: Ambos
        /// </summary>
        public int ModoDeSeleccionTipoDeFamiliaEnCotizacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionTipoDeFamiliaEnCotizacion"]);
               
            }
        }
        /// <summary>
        ///  Mostrar el codigo de barra con el nombre al realizar las operaciones como ventas, compras, traslados, etc
        /// </summary>
        public bool MostrarCodigoBarraEnDetalleAlRealizarOperaciones {
            get {
                    
        return parametrosConfiguracion["MostrarCodigoBarraEnDetalleAlRealizarOperaciones"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirCambioPrecioEnCompras
        /// </summary>
        public bool PermitirCambioPrecioEnCompras {
            get {
                    
        return parametrosConfiguracion["PermitirCambioPrecioEnCompras"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Minimo de caracteres para realizar la busqueda en el selector de conceptos
        /// </summary>
        public int MinimoDeCaracteresParaBuscarEnSelectorConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MinimoDeCaracteresParaBuscarEnSelectorConcepto"]);
               
            }
        }
        /// <summary>
        ///  AplicacionDesplegadaLocalmente
        /// </summary>
        public bool AplicacionDesplegadaLocalmente {
            get {
                    
        return parametrosConfiguracion["AplicacionDesplegadaLocalmente"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Tiempo en milisegundos de espera para realizar la busqueda de datos dinamicos en los selectores de gran cantidad de datos
        /// </summary>
        public int TiempoDeEsperaEnBusquedaSelectoresDeGranCantidad {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TiempoDeEsperaEnBusquedaSelectoresDeGranCantidad"]);
               
            }
        }
        /// <summary>
        ///  Tiempo en minutos de verificacion si esta conectado a internet en un despliegue local 
        /// </summary>
        public int TiempoEnMinutosDeVerificacionDeAccesoAInternet {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TiempoEnMinutosDeVerificacionDeAccesoAInternet"]);
               
            }
        }
        /// <summary>
        ///  Permitir menu dinamico, si es 1 se permitira el menu de manera dinamica, si es 0 sera el menu estatico
        /// </summary>
        public bool PermitirMenuDinamico {
            get {
                    
        return parametrosConfiguracion["PermitirMenuDinamico"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirTiempoSesionIlimitado
        /// </summary>
        public bool PermitirTiempoSesionIlimitado {
            get {
                    
        return parametrosConfiguracion["PermitirTiempoSesionIlimitado"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarReporteSalidasDeAlcohol
        /// </summary>
        public bool MostrarReporteSalidasDeAlcohol {
            get {
                    
        return parametrosConfiguracion["MostrarReporteSalidasDeAlcohol"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Mascara que dice que modulos adicionales estan habilitados en formato 0 o 1, El orden es 1=Restaurente, 2=Hotel, 3=Cochera (Ejm: 110 = Habilitado Restaurente y Hotel, Desabilitado Cochera)
        /// </summary>
        public string MascaraModulosAdicionalesHabilitados {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraModulosAdicionalesHabilitados"]);
               
            }
        }
        /// <summary>
        ///  Permite que se cambie el nombre del comprobante nota de venta de acuerdo al nombre del comprobante que se ponga
        /// </summary>
        public bool PermitirCambioNombreComprobanteNotaDeVenta {
            get {
                    
        return parametrosConfiguracion["PermitirCambioNombreComprobanteNotaDeVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de cotizacion de 80 mm, esta en formato html
        /// </summary>
        public string InformacionAdicionalCotizacion80 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalCotizacion80"]);
               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de cotizacion de A4, esta en formato html
        /// </summary>
        public string InformacionAdicionalCotizacionA4 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalCotizacionA4"]);
               
            }
        }
        /// <summary>
        ///  UrlApiConsultaTipoCambio
        /// </summary>
        public string UrlApiConsultaTipoCambio {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UrlApiConsultaTipoCambio"]);
               
            }
        }
        /// <summary>
        ///  Id de moneda dolar que se usa en la base de datos de tipo de cambio
        /// </summary>
        public int IdMonedaDolarApiTipoCambio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMonedaDolarApiTipoCambio"]);
               
            }
        }
        /// <summary>
        ///  UrlConsultaComprobante
        /// </summary>
        public string UrlConsultaComprobante {
            get {
                                 return Convert.ToString(parametrosConfiguracion["UrlConsultaComprobante"]);
               
            }
        }
        /// <summary>
        ///  MostrarUrlConsultaComprobante
        /// </summary>
        public bool MostrarUrlConsultaComprobante {
            get {
                    
        return parametrosConfiguracion["MostrarUrlConsultaComprobante"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirGruposEnCuentasPorCobrarPagar
        /// </summary>
        public bool PermitirGruposEnCuentasPorCobrarPagar {
            get {
                    
        return parametrosConfiguracion["PermitirGruposEnCuentasPorCobrarPagar"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Mascara de grupos actores comeriales activados: 0 - Desactivado, 1 - Activado : Venta, Preventa, Cotización, Compra, Gasto
        /// </summary>
        public string MascaraGruposActoresComerialesActivados {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraGruposActoresComerialesActivados"]);
               
            }
        }
    

}



/// <summary>
///  ACTOR
/// </summary>
public sealed class ActorSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public ActorSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",8);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static ActorSettings defaultInstance = new ActorSettings();
        
        public static ActorSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new ActorSettings();
        }





        /// <summary>
        ///  IdRolCliente
        /// </summary>
        public int IdRolCliente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolCliente"]);
               
            }
        }
        /// <summary>
        ///  Sede: entidad interna que representa al contribuyente, tiene RUC
        /// </summary>
        public int IdActorNegocioSede {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdActorNegocioSede"]);
               
            }
        }
        /// <summary>
        ///  IdRolEmpleado
        /// </summary>
        public int IdRolEmpleado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolEmpleado"]);
               
            }
        }
        /// <summary>
        ///  IdActorNegocioDesdeParaObtenerCodigo
        /// </summary>
        public int IdActorNegocioDesdeParaObtenerCodigo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdActorNegocioDesdeParaObtenerCodigo"]);
               
            }
        }
        /// <summary>
        ///  IdRolProveedor
        /// </summary>
        public int IdRolProveedor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolProveedor"]);
               
            }
        }
        /// <summary>
        ///  vigenciaEnAnyosPorDefectoDeActorDeNegocioProveedor
        /// </summary>
        public int vigenciaEnAnyosPorDefectoDeActorDeNegocioProveedor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["vigenciaEnAnyosPorDefectoDeActorDeNegocioProveedor"]);
               
            }
        }
        /// <summary>
        ///  IdFotoActorPorDefecto
        /// </summary>
        public int IdFotoActorPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdFotoActorPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorPersonaNatural
        /// </summary>
        public int IdTipoActorPersonaNatural {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorPersonaNatural"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorPersonaNaturalPorDefecto
        /// </summary>
        public int IdClaseActorPersonaNaturalPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorPersonaNaturalPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalActorPersonaNaturalPorDefecto
        /// </summary>
        public int IdEstadoLegalActorPersonaNaturalPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalActorPersonaNaturalPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorPersonaJuridica
        /// </summary>
        public int IdTipoActorPersonaJuridica {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorPersonaJuridica"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalActorPersonaJuridicaPorDefecto
        /// </summary>
        public int IdEstadoLegalActorPersonaJuridicaPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalActorPersonaJuridicaPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorPersonaJuridicaPorDefecto
        /// </summary>
        public int IdClaseActorPersonaJuridicaPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorPersonaJuridicaPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalActorEntidadInternaPorDefecto
        /// </summary>
        public int IdEstadoLegalActorEntidadInternaPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalActorEntidadInternaPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorEntidadInternaPorDefecto
        /// </summary>
        public int IdClaseActorEntidadInternaPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorEntidadInternaPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdRolServicioGeneral
        /// </summary>
        public int IdRolServicioGeneral {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolServicioGeneral"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadRuc
        /// </summary>
        public int IdTipoDocumentoIdentidadRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadRuc"]);
               
            }
        }
        /// <summary>
        ///  IdRolEntidadInterna
        /// </summary>
        public int IdRolEntidadInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolEntidadInterna"]);
               
            }
        }
        /// <summary>
        ///  IdRolPuntaDeVenta
        /// </summary>
        public int IdRolPuntaDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolPuntaDeVenta"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorEntidadInterna
        /// </summary>
        public int IdTipoActorEntidadInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorEntidadInterna"]);
               
            }
        }
        /// <summary>
        ///  vigenciaEnAnyosPorDefectoDeActorDeNegocioEntidadInterna
        /// </summary>
        public int vigenciaEnAnyosPorDefectoDeActorDeNegocioEntidadInterna {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["vigenciaEnAnyosPorDefectoDeActorDeNegocioEntidadInterna"]);
               
            }
        }
        /// <summary>
        ///  vigenciaEnAnyosPorDefectoDeActorDeNegocioCliente
        /// </summary>
        public int vigenciaEnAnyosPorDefectoDeActorDeNegocioCliente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["vigenciaEnAnyosPorDefectoDeActorDeNegocioCliente"]);
               
            }
        }
        /// <summary>
        ///  IdClienteGenerico
        /// </summary>
        public int IdClienteGenerico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClienteGenerico"]);
               
            }
        }
        /// <summary>
        ///  Id del Rol Almacen
        /// </summary>
        public int IdRolAlmacen {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolAlmacen"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadDni
        /// </summary>
        public int IdTipoDocumentoIdentidadDni {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadDni"]);
               
            }
        }
        /// <summary>
        ///  idProveedorGenerico
        /// </summary>
        public int idProveedorGenerico {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idProveedorGenerico"]);
               
            }
        }
        /// <summary>
        ///  IdTipoPersonaSeleccionadaPorDefecto
        /// </summary>
        public int IdTipoPersonaSeleccionadaPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoPersonaSeleccionadaPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoSeleccionadaConTipoPersonaNatural
        /// </summary>
        public int IdTipoDocumentoSeleccionadaConTipoPersonaNatural {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoSeleccionadaConTipoPersonaNatural"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoSeleccionadaConTipoPersonaJuridica
        /// </summary>
        public int IdTipoDocumentoSeleccionadaConTipoPersonaJuridica {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoSeleccionadaConTipoPersonaJuridica"]);
               
            }
        }
        /// <summary>
        ///  IdRolSede
        /// </summary>
        public int IdRolSede {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolSede"]);
               
            }
        }
        /// <summary>
        ///  IdRolSucursal
        /// </summary>
        public int IdRolSucursal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolSucursal"]);
               
            }
        }
        /// <summary>
        ///  IdRolVendedor
        /// </summary>
        public int IdRolVendedor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolVendedor"]);
               
            }
        }
        /// <summary>
        ///  Id rol caja
        /// </summary>
        public int IdRolCaja {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolCaja"]);
               
            }
        }
        /// <summary>
        ///  Id de Rol Almacenero
        /// </summary>
        public int IdRolAlmacenero {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolAlmacenero"]);
               
            }
        }
        /// <summary>
        ///  Id de Rol Cajero
        /// </summary>
        public int IdRolCajero {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolCajero"]);
               
            }
        }
        /// <summary>
        ///  Id de la tabla Ubigeo que sera seleccionado por defecto
        /// </summary>
        public int IdUbigeoSeleccionadoPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdUbigeoSeleccionadoPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  id del Rol Jefe de venta
        /// </summary>
        public int idRolJefeDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idRolJefeDeVenta"]);
               
            }
        }
        /// <summary>
        ///  id de Rol Administrador de negocio
        /// </summary>
        public int idRolAdministradorDeNegocio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idRolAdministradorDeNegocio"]);
               
            }
        }
        /// <summary>
        ///  idUbigeoSeleccionadoPorDefectoEnCliente
        /// </summary>
        public int idUbigeoSeleccionadoPorDefectoEnCliente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idUbigeoSeleccionadoPorDefectoEnCliente"]);
               
            }
        }
        /// <summary>
        ///  idUbigeoSeleccionadoPorDefectoEnProveedor
        /// </summary>
        public int idUbigeoSeleccionadoPorDefectoEnProveedor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idUbigeoSeleccionadoPorDefectoEnProveedor"]);
               
            }
        }
        /// <summary>
        ///  idUbigeoNoEspecificado
        /// </summary>
        public int idUbigeoNoEspecificado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["idUbigeoNoEspecificado"]);
               
            }
        }
        /// <summary>
        ///  IdRolComprador
        /// </summary>
        public int IdRolComprador {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolComprador"]);
               
            }
        }
        /// <summary>
        ///  IdRolPuntaDeCompra
        /// </summary>
        public int IdRolPuntoDeCompra {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolPuntoDeCompra"]);
               
            }
        }
        /// <summary>
        ///  IdRolCuentaBancaria
        /// </summary>
        public int IdRolCuentaBancaria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolCuentaBancaria"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorCuentaBancaria
        /// </summary>
        public int IdTipoActorCuentaBancaria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorCuentaBancaria"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorNoEspecificadoDeTipoActorCuentaBancaria
        /// </summary>
        public int IdClaseActorNoEspecificadoDeTipoActorCuentaBancaria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorNoEspecificadoDeTipoActorCuentaBancaria"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalNoEspecificadoDeTipoActorCuentaBancaria
        /// </summary>
        public int IdEstadoLegalNoEspecificadoDeTipoActorCuentaBancaria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalNoEspecificadoDeTipoActorCuentaBancaria"]);
               
            }
        }
        /// <summary>
        ///  PermitirComprobantePorDefectoEnCliente
        /// </summary>
        public bool PermitirComprobantePorDefectoEnCliente {
            get {
                    
        return parametrosConfiguracion["PermitirComprobantePorDefectoEnCliente"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Minimo de caracteres para realizar la busqueda en el selector de actores comerciales
        /// </summary>
        public int MinimoDeCaracteresParaBuscarEnSelectorActorComercial {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MinimoDeCaracteresParaBuscarEnSelectorActorComercial"]);
               
            }
        }
        /// <summary>
        ///  PermitirRegistroCodigoDigemidEnEstableciemientoComercial
        /// </summary>
        public bool PermitirRegistroCodigoDigemidEnEstableciemientoComercial {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroCodigoDigemidEnEstableciemientoComercial"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarBotonCargarActorEnRegistroActorComercial
        /// </summary>
        public bool MostrarBotonCargarActorEnRegistroActorComercial {
            get {
                    
        return parametrosConfiguracion["MostrarBotonCargarActorEnRegistroActorComercial"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadDocTribNoDomSinRuc
        /// </summary>
        public int IdTipoDocumentoIdentidadDocTribNoDomSinRuc {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadDocTribNoDomSinRuc"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadCarnetExtranjeria
        /// </summary>
        public int IdTipoDocumentoIdentidadCarnetExtranjeria {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadCarnetExtranjeria"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadPasaporte
        /// </summary>
        public int IdTipoDocumentoIdentidadPasaporte {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadPasaporte"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadCedulaDiplomatica
        /// </summary>
        public int IdTipoDocumentoIdentidadCedulaDiplomatica {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadCedulaDiplomatica"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadDocIdentPaisResidencia
        /// </summary>
        public int IdTipoDocumentoIdentidadDocIdentPaisResidencia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadDocIdentPaisResidencia"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadTaxIdentificationNumber
        /// </summary>
        public int IdTipoDocumentoIdentidadTaxIdentificationNumber {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadTaxIdentificationNumber"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadIdentificationNumber
        /// </summary>
        public int IdTipoDocumentoIdentidadIdentificationNumber {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadIdentificationNumber"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadTarjetaAndinaMigracion
        /// </summary>
        public int IdTipoDocumentoIdentidadTarjetaAndinaMigracion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadTarjetaAndinaMigracion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadPermisoTemporalPermanencia
        /// </summary>
        public int IdTipoDocumentoIdentidadPermisoTemporalPermanencia {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadPermisoTemporalPermanencia"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadSalvoConducto
        /// </summary>
        public int IdTipoDocumentoIdentidadSalvoConducto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadSalvoConducto"]);
               
            }
        }
        /// <summary>
        ///  Valores: No Mostrar(0) Opcional(1) Obligatorio(2) - Tipo Doc, N° Doc, Raz Soc, Tip Soc, Ape Pat, Ape Mat, Nombres, Nom Comercial, Nacionalidad, Fecha Nac, Sexo, Estado Civil, Nom Corto, Email, Telef, Codigo, Roles, Paìs, Ubigeo, Detalle, Comprobante
        /// </summary>
        public string MascaraDeVisualizacionValidacionRegistroCliente {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeVisualizacionValidacionRegistroCliente"]);
               
            }
        }
        /// <summary>
        ///  Valores: No Mostrar(0) Opcional(1) Obligatorio(2) - Tipo Doc, N° Doc, Raz Soc, Tip Soc, Ape Pat, Ape Mat, Nombres, Nom Comercial, Nacionalidad, Fecha Nac, Sexo, Estado Civil, Nom Corto, Email, Telef, Codigo, Roles, Paìs, Ubigeo, Detalle, Comprobante
        /// </summary>
        public string MascaraDeVisualizacionValidacionRegistroProveedor {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeVisualizacionValidacionRegistroProveedor"]);
               
            }
        }
        /// <summary>
        ///  Valores: No Mostrar(0) Opcional(1) Obligatorio(2) - Tipo Doc, N° Doc, Raz Soc, Tip Soc, Ape Pat, Ape Mat, Nombres, Nom Comercial, Nacionalidad, Fecha Nac, Sexo, Estado Civil, Nom Corto, Email, Telef, Codigo, Roles, Paìs, Ubigeo, Detalle, Comprobante
        /// </summary>
        public string MascaraDeVisualizacionValidacionRegistroEmpleado {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeVisualizacionValidacionRegistroEmpleado"]);
               
            }
        }
        /// <summary>
        ///  NombreClaseActorPersonaNaturalPorDefecto
        /// </summary>
        public string NombreClaseActorPersonaNaturalPorDefecto {
            get {
                                 return Convert.ToString(parametrosConfiguracion["NombreClaseActorPersonaNaturalPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  NombreUbigeoSeleccionadoPorDefecto
        /// </summary>
        public string NombreUbigeoSeleccionadoPorDefecto {
            get {
                                 return Convert.ToString(parametrosConfiguracion["NombreUbigeoSeleccionadoPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdActorNegocioEmpleadoPorDefecto
        /// </summary>
        public int IdActorNegocioEmpleadoPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdActorNegocioEmpleadoPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorMasculino
        /// </summary>
        public int IdClaseActorMasculino {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorMasculino"]);
               
            }
        }
        /// <summary>
        ///  IdRolGrupoClientes
        /// </summary>
        public int IdRolGrupoClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolGrupoClientes"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorGrupoClientes
        /// </summary>
        public int IdTipoActorGrupoClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorGrupoClientes"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorGrupoClientes
        /// </summary>
        public int IdClaseActorGrupoClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorGrupoClientes"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalGrupoClientes
        /// </summary>
        public int IdEstadoLegalGrupoClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalGrupoClientes"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroDocumentoIdentidadGrupoClientes
        /// </summary>
        public int IdDetalleMaestroDocumentoIdentidadGrupoClientes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroDocumentoIdentidadGrupoClientes"]);
               
            }
        }
        /// <summary>
        ///  MascaraDatosAdicionalesEnBandejaClientes
        /// </summary>
        public string MascaraDatosAdicionalesEnBandejaClientes {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDatosAdicionalesEnBandejaClientes"]);
               
            }
        }
        /// <summary>
        ///  IdRolPuntoDelivery
        /// </summary>
        public int IdRolPuntoDelivery
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["IdRolPuntoDelivery"]);

            }
        }
        /// <summary>
        ///  IdRolPuntoAlPaso
        /// </summary>
        public int IdRolPuntoAlPaso
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["IdRolPuntoAlPaso"]);

            }
        }

    }



/// <summary>
///  PARAMETROS DE CONFIGURACION PARA REPORTES
/// </summary>
public sealed class ReporteSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public ReporteSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",9);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static ReporteSettings defaultInstance = new ReporteSettings();
        
        public static ReporteSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new ReporteSettings();
        }





        /// <summary>
        ///  DiasAntesDisponiblesReporteVendedor
        /// </summary>
        public int DiasAntesDisponiblesReporteVendedor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasAntesDisponiblesReporteVendedor"]);
               
            }
        }
    

}



/// <summary>
///  LIBROS ELECTRÓNICOS
/// </summary>
public sealed class LibrosElectronicosSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public LibrosElectronicosSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",10);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static LibrosElectronicosSettings defaultInstance = new LibrosElectronicosSettings();
        
        public static LibrosElectronicosSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new LibrosElectronicosSettings();
        }





        /// <summary>
        ///  10100 - 1.1 LIBRO CAJA Y BANCOS - DETALLE DE LOS MOVIMIENTOS DEL EFECTIVO 
        /// </summary>
        public int IdTipoEBookCajaEfectivo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookCajaEfectivo"]);
               
            }
        }
        /// <summary>
        ///  10200 - 1.2 LIBRO CAJA Y BANCOS - DETALLE DE LOS MOVIMIENTOS DE LA CUENTA CORRIENTE
        /// </summary>
        public int IdTipoEBookCajaCuentaCorriente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookCajaCuentaCorriente"]);
               
            }
        }
        /// <summary>
        ///  30100 - 3.1 LIBRO DE INVENTARIOS Y BALANCES - BALANCE GENERAL
        /// </summary>
        public int IdTipoEBookInventariosYBalances {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookInventariosYBalances"]);
               
            }
        }
        /// <summary>
        ///  40100 - 4.1 LIBRO DE RETENCIONES
        /// </summary>
        public int IdTipoEBookRetenciones {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookRetenciones"]);
               
            }
        }
        /// <summary>
        ///  50100 - 5.1 LIBRO DIARIO
        /// </summary>
        public int IdTipoEBookDiario {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookDiario"]);
               
            }
        }
        /// <summary>
        ///  50300 - 5.3 LIBRO DIARIO - DETALLE DEL PLAN CONTABLE UTILIZADO
        /// </summary>
        public int IdTipoEBookDiarioPlanContable {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookDiarioPlanContable"]);
               
            }
        }
        /// <summary>
        ///  50200 - 5.2 LIBRO DIARIO DE FORMATO SIMPLIFICADO
        /// </summary>
        public int IdTipoEBookDiarioSimplificado {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookDiarioSimplificado"]);
               
            }
        }
        /// <summary>
        ///  50400 - 5.4 LIBRO DIARIO DE FORMATO SIMPLIFICADO - DETALLE DEL PLAN CONTABLE UTILIZADO
        /// </summary>
        public int IdTipoEBookDiarioSimplificadoPlanContable {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookDiarioSimplificadoPlanContable"]);
               
            }
        }
        /// <summary>
        ///  80100 - 8.1 REGISTRO DE COMPRAS
        /// </summary>
        public int IdTipoEbookCompras {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEbookCompras"]);
               
            }
        }
        /// <summary>
        ///  140100 - 14.1 REGISTRO DE VENTAS E INGRESOS
        /// </summary>
        public int IdTipoEBookVentasIngresos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookVentasIngresos"]);
               
            }
        }
        /// <summary>
        ///  60100 - 6.1 LIBRO MAYOR
        /// </summary>
        public int IdTipoEBookMayor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookMayor"]);
               
            }
        }
        /// <summary>
        ///  80200 - 8.2 REGISTRO DE COMPRAS - INFORMACIÓN DE OPERACIONES CON SUJETOS NO DOMICILIADOS
        /// </summary>
        public int IdTipoEBookComprasNoDomiciliados {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoEBookComprasNoDomiciliados"]);
               
            }
        }
        /// <summary>
        ///  ConsolidarBoletasEnRegistroDeVentas
        /// </summary>
        public bool ConsolidarBoletasEnRegistroDeVentas {
            get {
                    
        return parametrosConfiguracion["ConsolidarBoletasEnRegistroDeVentas"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  IdBookTypeFieldNumeroDocumentoIdentidadClienteBookTypeVentas
        /// </summary>
        public int IdBookTypeFieldNumeroDocumentoIdentidadClienteBookTypeVentas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdBookTypeFieldNumeroDocumentoIdentidadClienteBookTypeVentas"]);
               
            }
        }
    

}



/// <summary>
///  RESERVA DE HABITACIONES
/// </summary>
public sealed class HotelSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public HotelSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",11);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static HotelSettings defaultInstance = new HotelSettings();
        
        public static HotelSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new HotelSettings();
        }





        /// <summary>
        ///  IdRolHabitacion
        /// </summary>
        public int IdRolHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroDocumentoIdentidadHabitacion
        /// </summary>
        public int IdDetalleMaestroDocumentoIdentidadHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroDocumentoIdentidadHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorHabitacion
        /// </summary>
        public int IdTipoActorHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorHabitacion
        /// </summary>
        public int IdClaseActorHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalHabitacion
        /// </summary>
        public int IdEstadoLegalHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdRolConceptoHotel
        /// </summary>
        public int IdRolConceptoHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolConceptoHotel"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroFamiliaHabitacion
        /// </summary>
        public int IdDetalleMaestroFamiliaHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroFamiliaHabitacion"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroTipoCama
        /// </summary>
        public int IdMaestroTipoCama {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroTipoCama"]);
               
            }
        }
        /// <summary>
        ///  IdRolAmbienteHotel
        /// </summary>
        public int IdRolAmbienteHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolAmbienteHotel"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroDocumentoIdentidadAmbienteHotel
        /// </summary>
        public int IdDetalleMaestroDocumentoIdentidadAmbienteHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroDocumentoIdentidadAmbienteHotel"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorAmbienteHotel
        /// </summary>
        public int IdTipoActorAmbienteHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorAmbienteHotel"]);
               
            }
        }
        /// <summary>
        ///  IdClaseActorAmbienteHotel
        /// </summary>
        public int IdClaseActorAmbienteHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorAmbienteHotel"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalAmbienteHotel
        /// </summary>
        public int IdEstadoLegalAmbienteHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalAmbienteHotel"]);
               
            }
        }
        /// <summary>
        ///  IdCaracteristicaAforoNinos
        /// </summary>
        public int IdCaracteristicaAforoNinos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCaracteristicaAforoNinos"]);
               
            }
        }
        /// <summary>
        ///  IdCaracteristicaAforoAdultos
        /// </summary>
        public int IdCaracteristicaAforoAdultos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCaracteristicaAforoAdultos"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionAtencionDeHotel
        /// </summary>
        public int IdTipoTransaccionAtencionDeHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionAtencionDeHotel"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionAtencionDeHabitacion
        /// </summary>
        public int IdTipoTransaccionAtencionDeHabitacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionAtencionDeHabitacion"]);
               
            }
        }
        /// <summary>
        ///  idRolHuesped
        /// </summary>
        public int IdRolHuesped {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolHuesped"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroMotivosDeViaje
        /// </summary>
        public int IdMaestroMotivosDeViaje {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroMotivosDeViaje"]);
               
            }
        }
        /// <summary>
        ///  DiasMaximoAnticipacionReserva
        /// </summary>
        public int DiasMaximoAnticipacionReserva {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasMaximoAnticipacionReserva"]);
               
            }
        }
        /// <summary>
        ///  DiasMaximoDuracionReserva
        /// </summary>
        public int DiasMaximoDuracionReserva {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasMaximoDuracionReserva"]);
               
            }
        }
        /// <summary>
        ///  DiasAntesALaFechaActualPorDefectoEnPlanificador
        /// </summary>
        public int DiasAntesALaFechaActualPorDefectoEnPlanificador {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasAntesALaFechaActualPorDefectoEnPlanificador"]);
               
            }
        }
        /// <summary>
        ///  DiasDespuesALaFechaActualPorDefectoEnPlanificador
        /// </summary>
        public int DiasDespuesALaFechaActualPorDefectoEnPlanificador {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasDespuesALaFechaActualPorDefectoEnPlanificador"]);
               
            }
        }
        /// <summary>
        ///  MaximoDiasMostrarEnPlanificador
        /// </summary>
        public int MaximoDiasMostrarEnPlanificador {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasMostrarEnPlanificador"]);
               
            }
        }
        /// <summary>
        ///  HoraInicioDeHoraHotelera
        /// </summary>
        public string HoraInicioDeHoraHotelera {
            get {
                                 return Convert.ToString(parametrosConfiguracion["HoraInicioDeHoraHotelera"]);
               
            }
        }
        /// <summary>
        ///  HoraFinDeHoraHotelera
        /// </summary>
        public string HoraFinDeHoraHotelera {
            get {
                                 return Convert.ToString(parametrosConfiguracion["HoraFinDeHoraHotelera"]);
               
            }
        }
        /// <summary>
        ///  Valores: No Mostrar(0) Opcional(1) Obligatorio(2) - Tipo Doc, N° Doc, Raz Soc, Tip Soc, Ape Pat, Ape Mat, Nombres, Nom Comercial, Nacionalidad, Fecha Nac, Sexo, Estado Civil, Nom Corto, Email, Telef, Codigo, Roles, Paìs, Ubigeo, Detalle, Comprobante
        /// </summary>
        public string MascaraDeVisualizacionValidacionRegistroHuesped {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeVisualizacionValidacionRegistroHuesped"]);
               
            }
        }
        /// <summary>
        ///  IdComprobantePorDefectoParaFacturacionDesdeExtranet
        /// </summary>
        public int IdComprobantePorDefectoParaFacturacionDesdeExtranet {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdComprobantePorDefectoParaFacturacionDesdeExtranet"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteCodigoReserva
        /// </summary>
        public int IdDetalleMaestroComprobanteCodigoReserva {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteCodigoReserva"]);
               
            }
        }
        /// <summary>
        ///  Servidor ftp de los comprobantes de pago de la extranet, urlFTP|usuario|password
        /// </summary>
        public string ServidorFptComprobantePagoExtranet {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ServidorFptComprobantePagoExtranet"]);
               
            }
        }
        /// <summary>
        ///  Servidor ftp de las fotos del tipo de habitacion, urlFTP|usuario|password
        /// </summary>
        public string ServidorFptTipoHabitacion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ServidorFptTipoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  Tamanio maximo en MB de foto del tipo de habitacion
        /// </summary>
        public string TamanioMaximoFotoTipoHabitacion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TamanioMaximoFotoTipoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  Maxima cantidad de fotos que se puedan seleccionar en tipo de habitacion
        /// </summary>
        public string MaximaCantidadFotoTipoHabitacion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MaximaCantidadFotoTipoHabitacion"]);
               
            }
        }
        /// <summary>
        ///  MaximoDiasReporteHotel
        /// </summary>
        public int MaximoDiasReporteHotel {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasReporteHotel"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeVacaciones
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeVacaciones {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeVacaciones"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeVisita
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeVisita {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeVisita"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeEducacion
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeEducacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeEducacion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeSalud
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeSalud {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeSalud"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeReligion
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeReligion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeReligion"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeCompras
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeCompras {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeCompras"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeNegocios
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeNegocios {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeNegocios"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeTrabajo
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeTrabajo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeTrabajo"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroMotivoDeViajeOtros
        /// </summary>
        public int IdDetalleMaestroMotivoDeViajeOtros {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroMotivoDeViajeOtros"]);
               
            }
        }
        /// <summary>
        ///  ToleranciaEnMinutosParaChecking
        /// </summary>
        public int ToleranciaEnMinutosParaChecking {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ToleranciaEnMinutosParaChecking"]);
               
            }
        }
        /// <summary>
        ///  CodigoPaisesExtranjerosArribosPernoctacionesFormularioT1
        /// </summary>
        public string CodigoPaisesExtranjerosArribosPernoctacionesFormularioT1 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoPaisesExtranjerosArribosPernoctacionesFormularioT1"]);
               
            }
        }
        /// <summary>
        ///  ClaseHotelMincetur
        /// </summary>
        public string ClaseHotelMincetur {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ClaseHotelMincetur"]);
               
            }
        }
        /// <summary>
        ///  CategoriaHotelMincetur
        /// </summary>
        public string CategoriaHotelMincetur {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CategoriaHotelMincetur"]);
               
            }
        }
        /// <summary>
        ///  NumeroCertificadoHotelMincetur
        /// </summary>
        public string NumeroCertificadoHotelMincetur {
            get {
                                 return Convert.ToString(parametrosConfiguracion["NumeroCertificadoHotelMincetur"]);
               
            }
        }
        /// <summary>
        ///  SistemaCoordenadasHotelMincetur
        /// </summary>
        public string SistemaCoordenadasHotelMincetur {
            get {
                                 return Convert.ToString(parametrosConfiguracion["SistemaCoordenadasHotelMincetur"]);
               
            }
        }
        /// <summary>
        ///  PaginaWebHotelMincetur
        /// </summary>
        public string PaginaWebHotelMincetur {
            get {
                                 return Convert.ToString(parametrosConfiguracion["PaginaWebHotelMincetur"]);
               
            }
        }
        /// <summary>
        ///  EmailReservaHotelMincetur
        /// </summary>
        public string EmailReservaHotelMincetur {
            get {
                                 return Convert.ToString(parametrosConfiguracion["EmailReservaHotelMincetur"]);
               
            }
        }
        /// <summary>
        ///  ResolucionJefaturaReporteMincetur
        /// </summary>
        public string ResolucionJefaturaReporteMincetur {
            get {
                                 return Convert.ToString(parametrosConfiguracion["ResolucionJefaturaReporteMincetur"]);
               
            }
        }
        /// <summary>
        ///  MostrarInformacionHabitacionComprobante
        /// </summary>
        public bool MostrarInformacionHabitacionComprobante {
            get {
                    
        return parametrosConfiguracion["MostrarInformacionHabitacionComprobante"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  ToleranciaEnMinutosParaCheckout
        /// </summary>
        public int ToleranciaEnMinutosParaCheckout {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ToleranciaEnMinutosParaCheckout"]);
               
            }
        }
    

}



/// <summary>
///  Parametros para funcionalidades de ventas
/// </summary>
public sealed class VentasSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public VentasSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",12);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static VentasSettings defaultInstance = new VentasSettings();
        
        public static VentasSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new VentasSettings();
        }





        /// <summary>
        ///  En venta, cada cierta cantidad de ventas de un usuario logueado, setea el tipo de comprobante en vista como Boleta de venta
        /// </summary>
        public int VenderConBoletaCada {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["VenderConBoletaCada"]);
               
            }
        }
        /// <summary>
        ///  Porcentaje del total de ventas que se desea facturar - negocios en proceso de formalización. Valor debe ser mayor a 0 y menor  o igual a 100
        /// </summary>
        public decimal PorcentajeFacturacion {
            get {
                                 return Convert.ToDecimal(parametrosConfiguracion["PorcentajeFacturacion"]);
               
            }
        }
        /// <summary>
        ///  ModoDeRegistroDeDetalleDeVentaYCobroMasivo
        /// </summary>
        public int ModoDeRegistroDeDetalleDeVentaYCobroMasivo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeRegistroDeDetalleDeVentaYCobroMasivo"]);
               
            }
        }
        /// <summary>
        ///  ModoDeRegistroDeDetalleDeVentaMasiva
        /// </summary>
        public int ModoDeRegistroDeDetalleDeVentaMasiva {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeRegistroDeDetalleDeVentaMasiva"]);
               
            }
        }
        /// <summary>
        ///  CodigoBarraDeProducto = 1, CodigoBarraDeBalanza = 2, Ambas = 3,
        /// </summary>
        public int ModoDeIngresoDeCodigoDeBarraEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeIngresoDeCodigoDeBarraEnVenta"]);
               
            }
        }
        /// <summary>
        ///  CodigoBarraDeProducto = 1, CodigoBarraDeBalanza = 2, Ambas configuraciones = 3
        /// </summary>
        public int CursorPorDefectoEnCodigoBarraEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["CursorPorDefectoEnCodigoBarraEnVenta"]);
               
            }
        }
        /// <summary>
        ///  80mm:1, A4:2, 56mm: 3
        /// </summary>
        public int formatoImpresionPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["formatoImpresionPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  no imprimir:1, solo comunes: 2, solo propias:3, comunes y propias:4
        /// </summary>
        public int modoImpresionCaracteristicas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["modoImpresionCaracteristicas"]);
               
            }
        }
        /// <summary>
        ///  Dias que se daran a la fecha de registro para que tengamos la fecha de vencimiento Ejm: DiasDeVenc... = 5; Fecha Reg. = 10/02/2019; Fecha Venc. = Fecha Reg. + DiasDeVenc : 15/02/2019
        /// </summary>
        public int DiasDeVencimientoEnCreditoRapidoDeVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasDeVencimientoEnCreditoRapidoDeVenta"]);
               
            }
        }
        /// <summary>
        ///  PermitirRegistroDeGuiasDeRemisionEnVentaIntegrada
        /// </summary>
        public bool PermitirRegistroDeGuiasDeRemisionEnVentaIntegrada {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroDeGuiasDeRemisionEnVentaIntegrada"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirRegistroDeNumeroBolsasDePlasticoEnVenta
        /// </summary>
        public bool PermitirRegistroDeIcbperEnVenta {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroDeIcbperEnVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  1: Global, 2: Establecimiento comercial, 3: Centros de atencion
        /// </summary>
        public int PoliticaDePreciosParaVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PoliticaDePreciosParaVenta"]);
               
            }
        }
        /// <summary>
        ///  IdCentroAtencionParaObtencionDePreciosPorPoliticaGlobal
        /// </summary>
        public int IdCentroAtencionParaObtencionDePreciosPorPoliticaGlobal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCentroAtencionParaObtencionDePreciosPorPoliticaGlobal"]);
               
            }
        }
        /// <summary>
        ///  IdCentroAtencionParaObtencionDeStockPorPoliticaGlobal
        /// </summary>
        public int IdCentroAtencionParaObtencionDeStockPorPoliticaGlobal {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdCentroAtencionParaObtencionDeStockPorPoliticaGlobal"]);
               
            }
        }
        /// <summary>
        ///  1: Global, 2: Establecimiento comercial, 3: Centros de atencion
        /// </summary>
        public int PoliticaDeStockParaVentaPorMostrador {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PoliticaDeStockParaVentaPorMostrador"]);
               
            }
        }
        /// <summary>
        ///  1: Global, 2: Establecimiento comercial, 3: Centros de atencion
        /// </summary>
        public int PoliticaDeStockParaVentaPorMostradorEnDosPasos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PoliticaDeStockParaVentaPorMostradorEnDosPasos"]);
               
            }
        }
        /// <summary>
        ///  1: Global, 2: Establecimiento comercial, 3: Centros de atencion
        /// </summary>
        public int PoliticaDeStockParaVentaCorporativa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["PoliticaDeStockParaVentaCorporativa"]);
               
            }
        }
        /// <summary>
        ///  PermitirRegistroDeLoteEnDetalleDeVenta
        /// </summary>
        public bool PermitirRegistroDeLoteEnDetalleDeVenta {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroDeLoteEnDetalleDeVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirRegistroAlmacenEnVentaPorMostradorIntegradoModoCaja
        /// </summary>
        public bool PermitirRegistroAlmacenEnVentaPorMostradorIntegradoModoCaja {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroAlmacenEnVentaPorMostradorIntegradoModoCaja"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Es la tarifa que se seleccionara por defecto en ventas
        /// </summary>
        public int IdTarifaSeleccionadoPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTarifaSeleccionadoPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  MostrarDetallesUnificadosPorLoteEnComprobantesDeVenta
        /// </summary>
        public bool MostrarDetallesUnificadosPorLoteEnComprobantesDeVenta {
            get {
                    
        return parametrosConfiguracion["MostrarDetallesUnificadosPorLoteEnComprobantesDeVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Se debe ingresar los campos que se deseen ingresar (ser editables) al momento de registrar el detalle de venta, se manerajan binarios 0,1 (orden: cantidad, precio unitario, importe) Ejm: 111
        /// </summary>
        public string MascaraDeCamposAIngresarEnVentas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeCamposAIngresarEnVentas"]);
               
            }
        }
        /// <summary>
        ///  1 = Solo concepto de negocio de gran cantidad mas de 3000; 2 = Concepto basico y concepto de negocio; 3 = Concepto de negocio y filtros de busqueda; 4 = Solo concepto de negocio de poca cantidad menos a 3000 conceptos
        /// </summary>
        public int ModoDeSeleccionDeConceptoDeNegocio {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ModoDeSeleccionDeConceptoDeNegocio"]);
               
            }
        }
        /// <summary>
        ///  Se debe ingresar los numeros correspondientes para el caldulo en ventas; IMPORTE ( I : 0 Ú 1) ; CANTIDAD ( C: 1 U 2); PRECIO (P: 0 Ú 2).
        /// </summary>
        public string MascaraFormasDeCalculoEnVentas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraFormasDeCalculoEnVentas"]);
               
            }
        }
        /// <summary>
        ///  1: Cursor nuevamente a codigo; 2: Cursor en cantidad
        /// </summary>
        public int FlujoDespuesDeCodigoBarraEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["FlujoDespuesDeCodigoBarraEnVenta"]);
               
            }
        }
        /// <summary>
        ///  PermitirRegistroConceptoServicio
        /// </summary>
        public bool PermitirRegistroConceptoServicio {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroConceptoServicio"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarEmpleadoEnComprobanteDeVenta
        /// </summary>
        public bool MostrarEmpleadoEnComprobanteDeVenta {
            get {
                    
        return parametrosConfiguracion["MostrarEmpleadoEnComprobanteDeVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  EtiquetaEmpleadoEnComprobanteDeVenta
        /// </summary>
        public string EtiquetaEmpleadoEnComprobanteDeVenta {
            get {
                                 return Convert.ToString(parametrosConfiguracion["EtiquetaEmpleadoEnComprobanteDeVenta"]);
               
            }
        }
        /// <summary>
        ///  Se debe ingresar los campos que se deseen ingresar (ser editables) al momento de registrar el detalle de venta, se manerajan binarios 0,1 (orden: cantidad, precio unitario, importe) Ejm: 111
        /// </summary>
        public string MascaraDeCamposAIngresarEnVentasYCobrosPorVendedor {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeCamposAIngresarEnVentasYCobrosPorVendedor"]);
               
            }
        }
        /// <summary>
        ///  Se debe ingresar los campos que se deseen ingresar (ser editables) al momento de registrar el detalle de venta, se manerajan binarios 0,1 (orden: cantidad, precio unitario, importe) Ejm: 111
        /// </summary>
        public string MascaraDeCamposAIngresarEnVentasMasivas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeCamposAIngresarEnVentasMasivas"]);
               
            }
        }
        /// <summary>
        ///  Se debe ingresar los numeros correspondientes para el calculo en ventas; CANTIDAD ( C: 1 U 2); PRECIO (P: 0 Ú 2), IMPORTE ( I : 0 Ú 1); Ejm: 220
        /// </summary>
        public string MascaraFormasDeCalculoEnVentasMasivas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraFormasDeCalculoEnVentasMasivas"]);
               
            }
        }
        /// <summary>
        ///  Id tipo comprobante por defecto cuando generas ventas al momento de realizar ventas y cobros por vendedor.
        /// </summary>
        public int IdTipoComprobantePorDefectoEnVentasYCobrosPorVendedor {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoComprobantePorDefectoEnVentasYCobrosPorVendedor"]);
               
            }
        }
        /// <summary>
        ///  Permitir el canje de comprobantes no tributables como notas de ventas internas a boletas, tambien varias comprobantes se canjeen por uno
        /// </summary>
        public bool PermitirCanjeDeComprobanteEnVentas {
            get {
                    
        return parametrosConfiguracion["PermitirCanjeDeComprobanteEnVentas"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Mascara de calculo por defecto en ventas, se manerajan binarios 0 sera que es calculado y 1 sera que es ingresado en el orden: cantidad, precio unitario, importe Ejm: 110:dice que de acuero a la cantidad y p.u se calculara el importe
        /// </summary>
        public string MascaraDeCalculoPorDefectoEnVentas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeCalculoPorDefectoEnVentas"]);
               
            }
        }
        /// <summary>
        ///  Mascara de calculo inigresando cantidad e importe calcular precio unitario esta mascara es 101
        /// </summary>
        public string MascaraDeCalculoPrecioUnitarioCalculado {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeCalculoPrecioUnitarioCalculado"]);
               
            }
        }
        /// <summary>
        ///  0 NO, 1 SI. Indica si el sistema genera puntos para los clientes en base al monto de ventas.
        /// </summary>
        public bool GenerarPuntosEnVentas {
            get {
                    
        return parametrosConfiguracion["GenerarPuntosEnVentas"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Indica el importe necesario en ventas para generar un punto
        /// </summary>
        public decimal ImporteDeVentaParaGenerarUnPunto {
            get {
                                 return Convert.ToDecimal(parametrosConfiguracion["ImporteDeVentaParaGenerarUnPunto"]);
               
            }
        }
        /// <summary>
        ///  0 NO, 1 SI. Indica si el sistema puede o no usar puntos como medio de pago
        /// </summary>
        public bool UsarPuntosComoMedioDePago {
            get {
                    
        return parametrosConfiguracion["UsarPuntosComoMedioDePago"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  indica a cuantos S/ equivale un punto al momento del canje, sirve para convertir puntos en un medio de pago con valor monetario
        /// </summary>
        public decimal ValorDeUnPuntoComoMedioDePago {
            get {
                                 return Convert.ToDecimal(parametrosConfiguracion["ValorDeUnPuntoComoMedioDePago"]);
               
            }
        }
        /// <summary>
        ///  Vigencia en dias de los puntos para los clientes
        /// </summary>
        public int VigenciaEnDiasDePuntos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["VigenciaEnDiasDePuntos"]);
               
            }
        }
        /// <summary>
        ///  PermitirRegistroDePlacaEnVenta
        /// </summary>
        public bool PermitirRegistroDePlacaEnVenta {
            get {
                    
        return parametrosConfiguracion["PermitirRegistroDePlacaEnVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirClonarVenta
        /// </summary>
        public bool PermitirClonarVenta {
            get {
                    
        return parametrosConfiguracion["PermitirClonarVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirVentasConSoloBienesOSoloServicios
        /// </summary>
        public bool PermitirVentasConSoloBienesOSoloServicios {
            get {
                    
        return parametrosConfiguracion["PermitirVentasConSoloBienesOSoloServicios"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Se debe ingresar los numeros correspondientes para el calculo en ventas; CANTIDAD ( C: 1 U 2); PRECIO (P: 0 Ú 2), IMPORTE ( I : 0 Ú 1); Ejm: 220
        /// </summary>
        public string MascaraFormasDeCalculoEnVentasYCobrosPorVendedor {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraFormasDeCalculoEnVentasYCobrosPorVendedor"]);
               
            }
        }
        /// <summary>
        ///  Mascara de calculo ingresando precio unitario e importe calcular cantidad esta mascara es 011
        /// </summary>
        public string MascaraDeCalculoCantidadCalculada {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeCalculoCantidadCalculada"]);
               
            }
        }
        /// <summary>
        ///  Mascara de calculo de los detalles de las operaciones donde se entiende que los datos ingresados ya fueron calculados y tratados
        /// </summary>
        public string MascaraDeCalculoDeNingunValorCalculado {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraDeCalculoDeNingunValorCalculado"]);
               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de nota de venta de 80 mm, esta en formato html
        /// </summary>
        public string InformacionAdicionalNotaVenta80 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalNotaVenta80"]);
               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de nota de venta de A4, esta en formato html
        /// </summary>
        public string InformacionAdicionalNotaVentaA4 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalNotaVentaA4"]);
               
            }
        }
        /// <summary>
        ///  Informacion a mostrar en direccion de cliente = 1: soloDetalle, 2: detalleConUbigeo
        /// </summary>
        public int InformacionAMostrarEnDireccionDeCliente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["InformacionAMostrarEnDireccionDeCliente"]);
               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de boleta de venta de 80 mm, esta en formato html
        /// </summary>
        public string InformacionAdicionalBoletaVenta80 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalBoletaVenta80"]);
               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de boleta de venta de A4, esta en formato html
        /// </summary>
        public string InformacionAdicionalBoletaVentaA4 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalBoletaVentaA4"]);
               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de factura de 80 mm, esta en formato html
        /// </summary>
        public string InformacionAdicionalFactura80 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalFactura80"]);
               
            }
        }
        /// <summary>
        ///  Informacion adicional que ira en el comprobante de factura de A4, esta en formato html
        /// </summary>
        public string InformacionAdicionalFacturaA4 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["InformacionAdicionalFacturaA4"]);
               
            }
        }
        /// <summary>
        ///  Mostrar el check de igv en ventas siempre en cuando este en amazonia
        /// </summary>
        public bool MostrarCheckIgvEnVentas {
            get {
                    
        return parametrosConfiguracion["MostrarCheckIgvEnVentas"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Activar detalle unificado personalizado al facturar: Activado (1), Desactivado (0)
        /// </summary>
        public bool ActivarDetalleUnificadoPersonalizado {
            get {
                    
        return parametrosConfiguracion["ActivarDetalleUnificadoPersonalizado"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Maximo numero de días a mostrar en el reporte de Invalidaciones
        /// </summary>
        public int MaximoDiasReporteInvalidaciones {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasReporteInvalidaciones"]);
               
            }
        }
        /// <summary>
        ///  Maximo numero de días a mostrar en el reporte de Notas de Credito
        /// </summary>
        public int MaximoDiasReporteNotasCredito {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasReporteNotasCredito"]);
               
            }
        }
        /// <summary>
        ///  Maximo numero de días a mostrar en el reporte de Notas de Debito
        /// </summary>
        public int MaximoDiasReporteNotasDebito {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasReporteNotasDebito"]);
               
            }
        }
        /// <summary>
        ///  MostrarSelectorClienteEnVerVentas
        /// </summary>
        public bool MostrarSelectorClienteEnVerVentas {
            get {
                    
        return parametrosConfiguracion["MostrarSelectorClienteEnVerVentas"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MostrarBuscadorComprobanteEnVerVentas
        /// </summary>
        public bool MostrarBuscadorComprobanteEnVerVentas {
            get {
                    
        return parametrosConfiguracion["MostrarBuscadorComprobanteEnVerVentas"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Informacion a mostrar en el selector de conceptos en ventas, 1: Nombres, 2: Nombre + Stock + Precio
        /// </summary>
        public int InformacionSelectorConceptoEnVentas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["InformacionSelectorConceptoEnVentas"]);
               
            }
        }
        /// <summary>
        ///  Mascara de medios de pago a mostrar en ventas 0: Ocultar 1: Mostrar. Orden:  Efectivo, Tarjeta de crédito, Tarjeta de débito, Transferencia, Depósito, Puntos. Ej: 110111
        /// </summary>
        public string MascaraMediosDePagoAMostrarEnVentas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MascaraMediosDePagoAMostrarEnVentas"]);
               
            }
        }
        /// <summary>
        ///  1: Cursor nuevamente a codigo; 2: Cursor en Series
        /// </summary>
        public int FlujoDespuesDeImporteEnVenta {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["FlujoDespuesDeImporteEnVenta"]);
               
            }
        }
        /// <summary>
        ///  MostrarSeccionEntregaEnVenta
        /// </summary>
        public bool MostrarSeccionEntregaEnVenta {
            get {
                    
        return parametrosConfiguracion["MostrarSeccionEntregaEnVenta"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  PermitirEnvioPorWhatsApp
        /// </summary>
        public bool PermitirEnvioPorWhatsApp
        {
            get
            {

                return parametrosConfiguracion["PermitirEnvioPorWhatsApp"].ToString() == "1";


            }
        }
        /// <summary>
        ///  EnvioComprobantePostVenta
        /// </summary>
        public bool EnvioComprobantePostVenta
        {
            get
            {

                return parametrosConfiguracion["EnvioComprobantePostVenta"].ToString() == "1";


            }
        }
    }



/// <summary>
///  Parametros de configuración para restaurantes
/// </summary>
public sealed class RestauranteSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public RestauranteSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",13);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static RestauranteSettings defaultInstance = new RestauranteSettings();
        
        public static RestauranteSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new RestauranteSettings();
        }





        /// <summary>
        ///  PermitirCierreRapidoDeAtencion
        /// </summary>
        public bool PermitirCierreRapidoDeAtencion {
            get {
                    
        return parametrosConfiguracion["PermitirCierreRapidoDeAtencion"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  Tipo de Actor para Mesas de Restaurante
        /// </summary>
        public int IdTipoActorRestauranteMesa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorRestauranteMesa"]);
               
            }
        }
        /// <summary>
        ///  Tipo de Actor para Ambientes de Restaurante
        /// </summary>
        public int IdTipoActorRestauranteAmbiente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorRestauranteAmbiente"]);
               
            }
        }
        /// <summary>
        ///  Clase de Actor para Mesas de Restaurante
        /// </summary>
        public int IdClaseActorRestauranteMesa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorRestauranteMesa"]);
               
            }
        }
        /// <summary>
        ///  Clase de Actor para Ambientes de Restaurante
        /// </summary>
        public int IdClaseActorRestauranteAmbiente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdClaseActorRestauranteAmbiente"]);
               
            }
        }
        /// <summary>
        ///  Detalle de Maestro de Ambiente
        /// </summary>
        public int IdDetalleMaestroDocumentoIdentidadAmbiente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroDocumentoIdentidadAmbiente"]);
               
            }
        }
        /// <summary>
        ///  Detalle de Maestro de Mesa
        /// </summary>
        public int IdDetalleMaestroDocumentoIdentidadMesa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroDocumentoIdentidadMesa"]);
               
            }
        }
        /// <summary>
        ///  Rol de mesa de restaurante
        /// </summary>
        public int IdRolMesa {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolMesa"]);
               
            }
        }
        /// <summary>
        ///  Rol de ambiente de restaurante
        /// </summary>
        public int IdRolAmbiente {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolAmbiente"]);
               
            }
        }
        /// <summary>
        ///  Rol de mozo de restaurante
        /// </summary>
        public int IdRolMozo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolMozo"]);
               
            }
        }
        /// <summary>
        ///  Rol de concepto de negocio de restaurante
        /// </summary>
        public int IdRolConceptoRestaurante {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolConceptoRestaurante"]);
               
            }
        }
        /// <summary>
        ///  Tipo de Transaccion de Atención
        /// </summary>
        public int IdTipoTransaccionAtencionDeRestaurante {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionAtencionDeRestaurante"]);
               
            }
        }
        /// <summary>
        ///  Tipo de Transaccion de Ordén de Atención
        /// </summary>
        public int IdTipoTransaccionOrdenDeRestaurante {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenDeRestaurante"]);
               
            }
        }
        /// <summary>
        ///  Tipo de Comprobante - Comanda
        /// </summary>
        public int IdDetalleMaestroTipoComprobanteOrden {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoComprobanteOrden"]);
               
            }
        }
        /// <summary>
        ///  Indica si el módulo de preparación se encuentra activado para determinar las acciones y estados posibles en los detalles de orden
        /// </summary>
        public bool ModuloPreparacionActivado {
            get {
                    
        return parametrosConfiguracion["ModuloPreparacionActivado"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  MaximoDiasConsultaAtenciones
        /// </summary>
        public int MaximoDiasConsultaAtenciones {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasConsultaAtenciones"]);
               
            }
        }
        /// <summary>
        ///  MaximoDiasConsultaOrdenesPorConcepto
        /// </summary>
        public int MaximoDiasConsultaOrdenesPorConcepto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasConsultaOrdenesPorConcepto"]);
               
            }
        }
        /// <summary>
        ///  MaximoDiasConsultasOrdenesPorMozo
        /// </summary>
        public int MaximoDiasConsultasOrdenesPorMozo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasConsultasOrdenesPorMozo"]);
               
            }
        }
        /// <summary>
        ///  MaximoDiasConsultasOrdenesDetalladas
        /// </summary>
        public int MaximoDiasConsultasOrdenesDetalladas {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasConsultasOrdenesDetalladas"]);
               
            }
        }
        /// <summary>
        ///  MaximoDiasConsultasDevolucionesEnOrdenes
        /// </summary>
        public int MaximoDiasConsultasDevolucionesEnOrdenes {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["MaximoDiasConsultasDevolucionesEnOrdenes"]);
               
            }
        }
        /// <summary>
        ///  PermitirVentaEnMesa
        /// </summary>
        public bool PermitirVentaEnMesa
        {
            get
            {

                return parametrosConfiguracion["PermitirVentaEnMesa"].ToString() == "1";


            }
        }
        /// <summary>
        ///  PermitirVentaPorDelivery
        /// </summary>
        public bool PermitirVentaPorDelivery
        {
            get
            {

                return parametrosConfiguracion["PermitirVentaPorDelivery"].ToString() == "1";


            }
        }
        /// <summary>
        ///  PermitirVentaAlPaso
        /// </summary>
        public bool PermitirVentaAlPaso
        {
            get
            {

                return parametrosConfiguracion["PermitirVentaAlPaso"].ToString() == "1";


            }
        }
        /// <summary>
        ///  IdRolConceptoInsumo
        /// </summary>
        public int IdRolConceptoInsumo
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["IdRolConceptoInsumo"]);

            }
        }
        /// <summary>
        ///  MaximoDiasConsultaPorModoAtenciones
        /// </summary>
        public int MaximoDiasConsultaPorModoAtenciones
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["MaximoDiasConsultaPorModoAtenciones"]);

            }
        }
        /// <summary>
        ///  IdTarifaSeleccionadaEnRestaurante
        /// </summary>
        public int IdTarifaSeleccionadaEnRestaurante
        {
            get
            {
                return Convert.ToInt32(parametrosConfiguracion["IdTarifaSeleccionadaEnRestaurante"]);

            }
        }
    }



/// <summary>
///  Parametro para el modulo cochera
/// </summary>
public sealed class CocheraSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public CocheraSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",14);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static CocheraSettings defaultInstance = new CocheraSettings();
        
        public static CocheraSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new CocheraSettings();
        }





        /// <summary>
        ///  IdTipoTransaccionMovimientoDeCochera
        /// </summary>
        public int IdTipoTransaccionMovimientoDeCochera {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionMovimientoDeCochera"]);
               
            }
        }
        /// <summary>
        ///  IdMaestroMarcaDeVehiculo
        /// </summary>
        public int IdMaestroMarcaDeVehiculo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdMaestroMarcaDeVehiculo"]);
               
            }
        }
        /// <summary>
        ///  IdDetalleMaestroComprobanteNotaDeMovimientoDeCochera
        /// </summary>
        public int IdDetalleMaestroComprobanteNotaDeMovimientoDeCochera {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroComprobanteNotaDeMovimientoDeCochera"]);
               
            }
        }
        /// <summary>
        ///  IdTipoActorVehiculo
        /// </summary>
        public int IdTipoActorVehiculo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoActorVehiculo"]);
               
            }
        }
        /// <summary>
        ///  IdRolVehiculo
        /// </summary>
        public int IdRolVehiculo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolVehiculo"]);
               
            }
        }
        /// <summary>
        ///  IdTipoDocumentoIdentidadPlaca
        /// </summary>
        public int IdTipoDocumentoIdentidadPlaca {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoDocumentoIdentidadPlaca"]);
               
            }
        }
        /// <summary>
        ///  IdEstadoLegalNoEspecificadoDeTipoActorVehiculo
        /// </summary>
        public int IdEstadoLegalNoEspecificadoDeTipoActorVehiculo {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdEstadoLegalNoEspecificadoDeTipoActorVehiculo"]);
               
            }
        }
        /// <summary>
        ///  IdTipoTurnoCochera
        /// </summary>
        public int IdDetalleMaestroTipoTurnoCochera {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdDetalleMaestroTipoTurnoCochera"]);
               
            }
        }
        /// <summary>
        ///  ToleranciaSistemaDePagoPorHora
        /// </summary>
        public int ToleranciaEnMinutosSistemaDePagoPorHora {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ToleranciaEnMinutosSistemaDePagoPorHora"]);
               
            }
        }
        /// <summary>
        ///  ToleranciaExcesoSistemaDePagoPlanaPorTurnos
        /// </summary>
        public int ToleranciaExcesoEnMinutosSistemaDePagoPlanaPorTurnos {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["ToleranciaExcesoEnMinutosSistemaDePagoPlanaPorTurnos"]);
               
            }
        }
        /// <summary>
        ///  1: general, 2:individual por cada centro de atencion cochera
        /// </summary>
        public int TipoDeConfiguracion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["TipoDeConfiguracion"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioPerdidaTickect
        /// </summary>
        public int IdConceptoNegocioPerdidaTickect {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioPerdidaTickect"]);
               
            }
        }
        /// <summary>
        ///  IdConceptoNegocioServicioCocheraEnSistemaDePagoPorHora
        /// </summary>
        public int IdConceptoNegocioServicioCocheraEnSistemaDePagoPorHora {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdConceptoNegocioServicioCocheraEnSistemaDePagoPorHora"]);
               
            }
        }
        /// <summary>
        ///  enteros separados por coma: 1,2,3 significa semanal, quincenal y mensual
        /// </summary>
        public string PeriodosHabilitadosEnSistemasDePagoAbonados {
            get {
                                 return Convert.ToString(parametrosConfiguracion["PeriodosHabilitadosEnSistemasDePagoAbonados"]);
               
            }
        }
        /// <summary>
        ///  enteros separados por coma: 1,2,3 significa plana, por hora y abonado
        /// </summary>
        public string SistemasDePagoHabilitados {
            get {
                                 return Convert.ToString(parametrosConfiguracion["SistemasDePagoHabilitados"]);
               
            }
        }
        /// <summary>
        ///  dias que dura la exoneracion de pagos de un vehiculo en una cochera
        /// </summary>
        public int DiasDeExoneracionDelPagoPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["DiasDeExoneracionDelPagoPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  IdRolCochera
        /// </summary>
        public int IdRolCochera {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolCochera"]);
               
            }
        }
        /// <summary>
        ///  IdRolConceptoCochera
        /// </summary>
        public int IdRolConceptoCochera {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdRolConceptoCochera"]);
               
            }
        }
    

}



/// <summary>
///  Parametros de Cotizacion
/// </summary>
public sealed class CotizacionSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public CotizacionSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",15);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static CotizacionSettings defaultInstance = new CotizacionSettings();
        
        public static CotizacionSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new CotizacionSettings();
        }





        /// <summary>
        ///  Informacion a mostrar en el selector de conceptos en cotizacion, 1: Nombres, 2: Nombre + Stock + Precio
        /// </summary>
        public int InformacionSelectorConceptoEnCotizacion {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["InformacionSelectorConceptoEnCotizacion"]);
               
            }
        }
        /// <summary>
        ///  Mascara para permitir convertir cotizacion a venta y pedido, ejemplo: 10 permite convertir a venta y no a pedido
        /// </summary>
        public string MascaraParaPermitirConvertirCotizacionAVentaPedido
        {
            get
            {
                return Convert.ToString(parametrosConfiguracion["MascaraParaPermitirConvertirCotizacionAVentaPedido"]);

            }
        }

    }



/// <summary>
///  Parametros de los codigos de retorno de facturacion electronica de sunat
/// </summary>
public sealed class CodigoFESunatSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public CodigoFESunatSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",16);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static CodigoFESunatSettings defaultInstance = new CodigoFESunatSettings();
        
        public static CodigoFESunatSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new CodigoFESunatSettings();
        }





        /// <summary>
        ///  El sistema no puede responder su solicitud. Intente nuevamente o comuníquese con su Administrador
        /// </summary>
        public string C0100 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0100"]);
               
            }
        }
        /// <summary>
        ///  El encabezado de seguridad es incorrecto
        /// </summary>
        public string C0101 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0101"]);
               
            }
        }
        /// <summary>
        ///  Usuario o contrasena incorrectos
        /// </summary>
        public string C0102 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0102"]);
               
            }
        }
        /// <summary>
        ///  El Usuario ingresado no existe
        /// </summary>
        public string C0103 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0103"]);
               
            }
        }
        /// <summary>
        ///  La Clave ingresada es incorrecta
        /// </summary>
        public string C0104 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0104"]);
               
            }
        }
        /// <summary>
        ///  El Usuario no está activo
        /// </summary>
        public string C0105 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0105"]);
               
            }
        }
        /// <summary>
        ///  El Usuario no es válido
        /// </summary>
        public string C0106 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0106"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (El servicio de autenticación no está disponible)
        /// </summary>
        public string C0109 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0109"]);
               
            }
        }
        /// <summary>
        ///  No se pudo obtener la informacion del tipo de usuario
        /// </summary>
        public string C0110 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0110"]);
               
            }
        }
        /// <summary>
        ///  No tiene el perfil para enviar comprobantes electronicos
        /// </summary>
        public string C0111 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0111"]);
               
            }
        }
        /// <summary>
        ///  El usuario debe ser secundario
        /// </summary>
        public string C0112 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0112"]);
               
            }
        }
        /// <summary>
        ///  El usuario no esta afiliado a Factura Electronica
        /// </summary>
        public string C0113 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0113"]);
               
            }
        }
        /// <summary>
        ///  No se pudo obtener la constancia
        /// </summary>
        public string C0125 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0125"]);
               
            }
        }
        /// <summary>
        ///  El ticket no le pertenece al usuario
        /// </summary>
        public string C0126 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0126"]);
               
            }
        }
        /// <summary>
        ///  El ticket no existe
        /// </summary>
        public string C0127 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0127"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (No se pudo obtener el ticket de proceso)
        /// </summary>
        public string C0130 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0130"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (No se pudo grabar el archivo en el directorio)
        /// </summary>
        public string C0131 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0131"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (No se pudo grabar escribir en el archivo zip)
        /// </summary>
        public string C0132 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0132"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (No se pudo grabar la entrada del log)
        /// </summary>
        public string C0133 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0133"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (No se pudo grabar en el storage)
        /// </summary>
        public string C0134 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0134"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (No se pudo encolar el pedido)
        /// </summary>
        public string C0135 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0135"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (No se pudo recibir una respuesta del batch)
        /// </summary>
        public string C0136 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0136"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (Se obtuvo una respuesta nula)
        /// </summary>
        public string C0137 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0137"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede responder su solicitud. (Error en Base de Datos)
        /// </summary>
        public string C0138 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0138"]);
               
            }
        }
        /// <summary>
        ///  Existe otro documento igual en proceso
        /// </summary>
        public string C0140 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0140"]);
               
            }
        }
        /// <summary>
        ///  El nombre del archivo ZIP es incorrecto
        /// </summary>
        public string C0151 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0151"]);
               
            }
        }
        /// <summary>
        ///  No se puede enviar por este método un archivo de resumen
        /// </summary>
        public string C0152 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0152"]);
               
            }
        }
        /// <summary>
        ///  No se puede enviar por este método un archivo por lotes
        /// </summary>
        public string C0153 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0153"]);
               
            }
        }
        /// <summary>
        ///  El RUC del archivo no corresponde al RUC del usuario o el proveedor no esta autorizado a enviar comprobantes del contribuyente
        /// </summary>
        public string C0154 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0154"]);
               
            }
        }
        /// <summary>
        ///  El archivo ZIP esta vacio
        /// </summary>
        public string C0155 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0155"]);
               
            }
        }
        /// <summary>
        ///  El archivo ZIP esta corrupto
        /// </summary>
        public string C0156 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0156"]);
               
            }
        }
        /// <summary>
        ///  El archivo ZIP no contiene comprobantes
        /// </summary>
        public string C0157 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0157"]);
               
            }
        }
        /// <summary>
        ///  El archivo ZIP contiene demasiados comprobantes para este tipo de envío
        /// </summary>
        public string C0158 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0158"]);
               
            }
        }
        /// <summary>
        ///  El nombre del archivo XML es incorrecto
        /// </summary>
        public string C0159 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0159"]);
               
            }
        }
        /// <summary>
        ///  El archivo XML esta vacio
        /// </summary>
        public string C0160 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0160"]);
               
            }
        }
        /// <summary>
        ///  El nombre del archivo XML no coincide con el nombre del archivo ZIP
        /// </summary>
        public string C0161 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0161"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (Ocurrio un error en el batch)
        /// </summary>
        public string C0200 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0200"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (Llego un requerimiento nulo al batch)
        /// </summary>
        public string C0201 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0201"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (No llego información del archivo ZIP)
        /// </summary>
        public string C0202 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0202"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (No se encontro archivos en la informacion del archivo ZIP)
        /// </summary>
        public string C0203 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0203"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (Este tipo de requerimiento solo acepta 1 archivo)
        /// </summary>
        public string C0204 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0204"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (Ocurrio un error desconocido al hacer unzip)
        /// </summary>
        public string C0250 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0250"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (No se pudo crear un directorio para el unzip)
        /// </summary>
        public string C0251 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0251"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (No se encontro archivos dentro del zip)
        /// </summary>
        public string C0252 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0252"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (No se pudo comprimir la constancia)
        /// </summary>
        public string C0253 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0253"]);
               
            }
        }
        /// <summary>
        ///  No se pudo procesar su solicitud. (No se pudo enviar el mensaje)
        /// </summary>
        public string C0254 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0254"]);
               
            }
        }
        /// <summary>
        ///  No se encontró la raíz documento xml
        /// </summary>
        public string C0300 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0300"]);
               
            }
        }
        /// <summary>
        ///  Elemento raiz del xml no esta definido
        /// </summary>
        public string C0301 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0301"]);
               
            }
        }
        /// <summary>
        ///  Codigo del tipo de comprobante no registrado
        /// </summary>
        public string C0302 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0302"]);
               
            }
        }
        /// <summary>
        ///  No existe el directorio de schemas
        /// </summary>
        public string C0303 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0303"]);
               
            }
        }
        /// <summary>
        ///  No existe el archivo de schema
        /// </summary>
        public string C0304 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0304"]);
               
            }
        }
        /// <summary>
        ///  El sistema no puede procesar el archivo xml
        /// </summary>
        public string C0305 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0305"]);
               
            }
        }
        /// <summary>
        ///  No se puede leer (parsear) el archivo XML
        /// </summary>
        public string C0306 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0306"]);
               
            }
        }
        /// <summary>
        ///  No se pudo recuperar la constancia
        /// </summary>
        public string C0307 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0307"]);
               
            }
        }
        /// <summary>
        ///  No tiene permiso para enviar casos de pruebas
        /// </summary>
        public string C0400 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0400"]);
               
            }
        }
        /// <summary>
        ///  El caso de prueba no existe
        /// </summary>
        public string C0401 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0401"]);
               
            }
        }
        /// <summary>
        ///  La numeracion o nombre del documento ya ha sido enviado anteriormente
        /// </summary>
        public string C0402 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0402"]);
               
            }
        }
        /// <summary>
        ///  El documento afectado por la nota no existe
        /// </summary>
        public string C0403 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0403"]);
               
            }
        }
        /// <summary>
        ///  El documento afectado por la nota se encuentra rechazado
        /// </summary>
        public string C0404 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C0404"]);
               
            }
        }
        /// <summary>
        ///  ID - El dato SERIE-CORRELATIVO no cumple con el formato de acuerdo al tipo de comprobante
        /// </summary>
        public string C1001 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1001"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene informacion en el tag ID
        /// </summary>
        public string C1002 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1002"]);
               
            }
        }
        /// <summary>
        ///  InvoiceTypeCode - El valor del tipo de documento es invalido o no coincide con el nombre del archivo
        /// </summary>
        public string C1003 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1003"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de InvoiceTypeCode
        /// </summary>
        public string C1004 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1004"]);
               
            }
        }
        /// <summary>
        ///  CustomerAssignedAccountID -  El dato ingresado no cumple con el estandar
        /// </summary>
        public string C1005 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1005"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomerAssignedAccountID del emisor del documento
        /// </summary>
        public string C1006 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1006"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado no cumple con el estandar
        /// </summary>
        public string C1007 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1007"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion en tipo de documento del emisor.
        /// </summary>
        public string C1008 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1008"]);
               
            }
        }
        /// <summary>
        ///  IssueDate - El dato ingresado  no cumple con el patron YYYY-MM-DD
        /// </summary>
        public string C1009 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1009"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag IssueDate
        /// </summary>
        public string C1010 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1010"]);
               
            }
        }
        /// <summary>
        ///  IssueDate- El dato ingresado no es valido
        /// </summary>
        public string C1011 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1011"]);
               
            }
        }
        /// <summary>
        ///  ID - El dato ingresado no cumple con el patron SERIE-CORRELATIVO
        /// </summary>
        public string C1012 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1012"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene informacion en el tag ID
        /// </summary>
        public string C1013 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1013"]);
               
            }
        }
        /// <summary>
        ///  CustomerAssignedAccountID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C1014 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1014"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomerAssignedAccountID del emisor del documento
        /// </summary>
        public string C1015 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1015"]);
               
            }
        }
        /// <summary>
        ///  AdditionalAccountID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C1016 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1016"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag AdditionalAccountID del emisor del documento
        /// </summary>
        public string C1017 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1017"]);
               
            }
        }
        /// <summary>
        ///  IssueDate - El dato ingresado no cumple con el patron YYYY-MM-DD
        /// </summary>
        public string C1018 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1018"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag IssueDate
        /// </summary>
        public string C1019 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1019"]);
               
            }
        }
        /// <summary>
        ///  IssueDate- El dato ingresado no es valido
        /// </summary>
        public string C1020 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1020"]);
               
            }
        }
        /// <summary>
        ///  Error en la validacion de la nota de credito
        /// </summary>
        public string C1021 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1021"]);
               
            }
        }
        /// <summary>
        ///  La serie o numero del documento modificado por la Nota Electrónica no cumple con el formato establecido
        /// </summary>
        public string C1022 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1022"]);
               
            }
        }
        /// <summary>
        ///  No se ha especificado el tipo de documento modificado por la Nota electronica
        /// </summary>
        public string C1023 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1023"]);
               
            }
        }
        /// <summary>
        ///  CustomerAssignedAccountID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C1024 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1024"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomerAssignedAccountID del emisor del documento
        /// </summary>
        public string C1025 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1025"]);
               
            }
        }
        /// <summary>
        ///  AdditionalAccountID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C1026 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1026"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag AdditionalAccountID del emisor del documento
        /// </summary>
        public string C1027 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1027"]);
               
            }
        }
        /// <summary>
        ///  IssueDate - El dato ingresado no cumple con el patron YYYY-MM-DD
        /// </summary>
        public string C1028 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1028"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag IssueDate
        /// </summary>
        public string C1029 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1029"]);
               
            }
        }
        /// <summary>
        ///  IssueDate- El dato ingresado no es valido
        /// </summary>
        public string C1030 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1030"]);
               
            }
        }
        /// <summary>
        ///  Error en la validacion de la nota de debito
        /// </summary>
        public string C1031 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1031"]);
               
            }
        }
        /// <summary>
        ///  El comprobante ya esta informado y se encuentra con estado anulado o rechazado
        /// </summary>
        public string C1032 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1032"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue registrado previamente con otros datos
        /// </summary>
        public string C1033 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1033"]);
               
            }
        }
        /// <summary>
        ///  Número de RUC del nombre del archivo no coincide con el consignado en el contenido del archivo XML
        /// </summary>
        public string C1034 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1034"]);
               
            }
        }
        /// <summary>
        ///  Numero de Serie del nombre del archivo no coincide con el consignado en el contenido del archivo XML
        /// </summary>
        public string C1035 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1035"]);
               
            }
        }
        /// <summary>
        ///  Número de documento en el nombre del archivo no coincide con el consignado en el contenido del XML
        /// </summary>
        public string C1036 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1036"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de RegistrationName del emisor del documento
        /// </summary>
        public string C1037 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1037"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName - El nombre o razon social del emisor no cumple con el estandar
        /// </summary>
        public string C1038 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1038"]);
               
            }
        }
        /// <summary>
        ///  Solo se pueden recibir notas electronicas que modifican facturas
        /// </summary>
        public string C1039 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1039"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la nota electronica no es valido
        /// </summary>
        public string C1040 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1040"]);
               
            }
        }
        /// <summary>
        ///  cac:PrepaidPayment/cbc:ID - El tag no contiene el atributo @SchemaID. que indica el tipo de documento que realiza el anticipo
        /// </summary>
        public string C1041 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1041"]);
               
            }
        }
        /// <summary>
        ///  cac:PrepaidPayment/cbc:InstructionID - El tag no contiene el atributo @SchemaID. Que indica el tipo de documento del emisor del documento del anticipo.
        /// </summary>
        public string C1042 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1042"]);
               
            }
        }
        /// <summary>
        ///  cac:OriginatorDocumentReference/cbc:ID - El tag no contiene el atributo @SchemaID. Que indica el tipo de documento del originador del documento electrónico.
        /// </summary>
        public string C1043 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1043"]);
               
            }
        }
        /// <summary>
        ///  cac:PrepaidPayment/cbc:InstructionID - El dato ingresado no cumple con el estándar.
        /// </summary>
        public string C1044 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1044"]);
               
            }
        }
        /// <summary>
        ///  cac:OriginatorDocumentReference/cbc:ID - El dato ingresado no cumple con el estándar.
        /// </summary>
        public string C1045 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1045"]);
               
            }
        }
        /// <summary>
        ///  cbc:Amount - El dato ingresado no cumple con el estándar.
        /// </summary>
        public string C1046 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1046"]);
               
            }
        }
        /// <summary>
        ///  cbc:Quantity - El dato ingresado no cumple con el estándar.
        /// </summary>
        public string C1047 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1047"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de PrepaidAmount para un documento con anticipo.
        /// </summary>
        public string C1048 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1048"]);
               
            }
        }
        /// <summary>
        ///  ID - Serie y Número del archivo no coincide con el consignado en el contenido del XML.
        /// </summary>
        public string C1049 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1049"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene informacion en el tag DespatchAdviceTypeCode.
        /// </summary>
        public string C1050 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1050"]);
               
            }
        }
        /// <summary>
        ///  DespatchAdviceTypeCode - El valor del tipo de guía es inválido.
        /// </summary>
        public string C1051 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1051"]);
               
            }
        }
        /// <summary>
        ///  DespatchAdviceTypeCode - No coincide con el consignado en el contenido del XML.
        /// </summary>
        public string C1052 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1052"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - El XML no contiene informacion en serie y numero dado de baja (cbc:ID).
        /// </summary>
        public string C1053 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1053"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - El valor en numero de documento no cumple con un formato valido (SERIE-NUMERO).
        /// </summary>
        public string C1054 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1054"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Numero de serie del documento no cumple con un formato valido (EG01 ó TXXX).
        /// </summary>
        public string C1055 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1055"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - El XML no contiene informacion en el código de tipo de documento (cbc:OrderTypeCode).
        /// </summary>
        public string C1056 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1056"]);
               
            }
        }
        /// <summary>
        ///  cac:AdditionalDocumentReference - El XML no contiene el tag o no existe información en el numero de documento adicional (cbc:ID).
        /// </summary>
        public string C1057 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1057"]);
               
            }
        }
        /// <summary>
        ///  cac:AdditionalDocumentReference - El XML no contiene el tag o no existe información en el tipo de documento adicional (cbc:DocumentTypeCode).
        /// </summary>
        public string C1058 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1058"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene firma digital.
        /// </summary>
        public string C1059 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1059"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - El XML no contiene el tag o no existe informacion del numero de RUC del Remitente (cac:).
        /// </summary>
        public string C1060 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1060"]);
               
            }
        }
        /// <summary>
        ///  El numero de RUC del Remitente no existe.
        /// </summary>
        public string C1061 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1061"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion del motivo de traslado.
        /// </summary>
        public string C1062 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1062"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como motivo de traslado no es valido.
        /// </summary>
        public string C1063 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1063"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion en el tag cac:DespatchLine de bienes a transportar.
        /// </summary>
        public string C1064 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1064"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion en modalidad de transporte.
        /// </summary>
        public string C1065 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1065"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion de datos del transportista.
        /// </summary>
        public string C1066 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1066"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información de vehiculos.
        /// </summary>
        public string C1067 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1067"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información de conductores.
        /// </summary>
        public string C1068 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1068"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información de la fecha de inicio de traslado o fecha de entrega del bien al transportista.
        /// </summary>
        public string C1069 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1069"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado  como fecha de inicio o fecha de entrega al transportista no cumple con el estandar (YYYY-MM-DD).
        /// </summary>
        public string C1070 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1070"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado  como fecha de inicio o fecha de entrega al transportista no es valido.
        /// </summary>
        public string C1071 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1071"]);
               
            }
        }
        /// <summary>
        ///  Starttime - El dato ingresado  no cumple con el patron HH:mm:ss.SZ.
        /// </summary>
        public string C1072 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1072"]);
               
            }
        }
        /// <summary>
        ///  StartTime - El dato ingresado no es valido.
        /// </summary>
        public string C1073 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1073"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - El XML no contiene o no existe información en punto de llegada (cac:DeliveryAddress).
        /// </summary>
        public string C1074 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1074"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - El XML no contiene o no existe información en punto de partida (cac:OriginAddress).
        /// </summary>
        public string C1075 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1075"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información de sustento de traslado de mercaderias para el tipo de operación.
        /// </summary>
        public string C1076 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1076"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene el tag de sustento de traslado de mercaderias que no corresponde al tipo de operación.
        /// </summary>
        public string C1077 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1077"]);
               
            }
        }
        /// <summary>
        ///  El emisor no se encuentra autorizado a emitir en el SEE-Desde los sistemas del contribuyente
        /// </summary>
        public string C1078 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1078"]);
               
            }
        }
        /// <summary>
        ///  Solo puede enviar el comprobante en un resumen diario
        /// </summary>
        public string C1079 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1079"]);
               
            }
        }
        /// <summary>
        ///  Debe enviar su comprobante por el SEE-Empresas supervisadas
        /// </summary>
        public string C1080 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1080"]);
               
            }
        }
        /// <summary>
        ///  Por el servicio REST de recepcion solo se reciben comprobantes asociados a servicios publicos
        /// </summary>
        public string C1081 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1081"]);
               
            }
        }
        /// <summary>
        ///  Por el servicio SOAP de recepcion no se reciben comprobantes asociados a servicios publicos
        /// </summary>
        public string C1082 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1082"]);
               
            }
        }
        /// <summary>
        ///  El numero de RUC del receptor no existe.
        /// </summary>
        public string C1083 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1083"]);
               
            }
        }
        /// <summary>
        ///  Comprobante de contingencia ya fue informado por su resumen, si desea modificarse debe realizarse por su primer canal de presentación
        /// </summary>
        public string C1084 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C1084"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no esta activo
        /// </summary>
        public string C2010 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2010"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no esta habido
        /// </summary>
        public string C2011 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2011"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no está autorizado a emitir comprobantes electrónicos
        /// </summary>
        public string C2012 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2012"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no cumple con tipo de empresa o tributos requeridos
        /// </summary>
        public string C2013 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2013"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del número de documento de identidad del receptor del documento
        /// </summary>
        public string C2014 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2014"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del tipo de documento de identidad del receptor del documento
        /// </summary>
        public string C2015 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2015"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado  en el tipo de documento de identidad del receptor no cumple con el estandar o no esta permitido.
        /// </summary>
        public string C2016 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2016"]);
               
            }
        }
        /// <summary>
        ///  El numero de documento de identidad del receptor debe ser  RUC
        /// </summary>
        public string C2017 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2017"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2018 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2018"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de nombre o razon social del emisor del documento
        /// </summary>
        public string C2019 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2019"]);
               
            }
        }
        /// <summary>
        ///  El nombre o razon social del emisor no cumple con el estandar
        /// </summary>
        public string C2020 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2020"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de RegistrationName del receptor del documento
        /// </summary>
        public string C2021 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2021"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName -  El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2022 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2022"]);
               
            }
        }
        /// <summary>
        ///  El Numero de orden del item no cumple con el formato establecido
        /// </summary>
        public string C2023 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2023"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag InvoicedQuantity en el detalle de los Items o es cero (0)
        /// </summary>
        public string C2024 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2024"]);
               
            }
        }
        /// <summary>
        ///  InvoicedQuantity El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2025 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2025"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:Item/cbc:Description en el detalle de los Items
        /// </summary>
        public string C2026 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2026"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de cac:Item/cbc:Description del item
        /// </summary>
        public string C2027 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2027"]);
               
            }
        }
        /// <summary>
        ///  Debe existir el tag cac:AlternativeConditionPrice
        /// </summary>
        public string C2028 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2028"]);
               
            }
        }
        /// <summary>
        ///  PriceTypeCode El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2029 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2029"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cbc:PriceTypeCode
        /// </summary>
        public string C2030 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2030"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en total valor de venta no cumple con el estandar
        /// </summary>
        public string C2031 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2031"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag LineExtensionAmount en el detalle de los Items
        /// </summary>
        public string C2032 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2032"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TaxAmount de la linea no cumple con el formato establecido
        /// </summary>
        public string C2033 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2033"]);
               
            }
        }
        /// <summary>
        ///  TaxAmount es obligatorio
        /// </summary>
        public string C2034 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2034"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxCategory/cac:TaxScheme/cbc:ID El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2035 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2035"]);
               
            }
        }
        /// <summary>
        ///  El codigo del tributo es invalido
        /// </summary>
        public string C2036 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2036"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:TaxCategory/cac:TaxScheme/cbc:ID del Item
        /// </summary>
        public string C2037 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2037"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxScheme/cbc:Name del item - No existe el tag o el dato ingresado no cumple con el estandar
        /// </summary>
        public string C2038 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2038"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:TaxCategory/cac:TaxScheme/cbc:Name del Item
        /// </summary>
        public string C2039 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2039"]);
               
            }
        }
        /// <summary>
        ///  El tipo de afectacion del IGV es incorrecto
        /// </summary>
        public string C2040 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2040"]);
               
            }
        }
        /// <summary>
        ///  El sistema de calculo del ISC es incorrecto
        /// </summary>
        public string C2041 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2041"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar el IGV. Es un campo obligatorio
        /// </summary>
        public string C2042 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2042"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en PayableAmount no cumple con el formato establecido
        /// </summary>
        public string C2043 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2043"]);
               
            }
        }
        /// <summary>
        ///  PayableAmount es obligatorio
        /// </summary>
        public string C2044 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2044"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en AdditionalMonetaryTotal/cbc:ID es incorrecto
        /// </summary>
        public string C2045 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2045"]);
               
            }
        }
        /// <summary>
        ///  AdditionalMonetaryTotal/cbc:ID debe tener valor
        /// </summary>
        public string C2046 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2046"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio al menos un AdditionalMonetaryTotal con codigo 1001, 1002, 1003 o 3001
        /// </summary>
        public string C2047 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2047"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TaxAmount no cumple con el formato establecido
        /// </summary>
        public string C2048 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2048"]);
               
            }
        }
        /// <summary>
        ///  TaxAmount es obligatorio
        /// </summary>
        public string C2049 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2049"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme ID - No existe el tag o el dato ingresado no cumple con el estandar
        /// </summary>
        public string C2050 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2050"]);
               
            }
        }
        /// <summary>
        ///  El codigo del tributo es invalido
        /// </summary>
        public string C2051 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2051"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag código de tributo internacional de impuestos globales
        /// </summary>
        public string C2052 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2052"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme Name - No existe el tag o el dato ingresado no cumple con el estandar
        /// </summary>
        public string C2053 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2053"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TaxScheme Name de impuestos globales
        /// </summary>
        public string C2054 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2054"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme TaxTypeCode - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2055 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2055"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TaxScheme TaxTypeCode de impuestos globales
        /// </summary>
        public string C2056 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2056"]);
               
            }
        }
        /// <summary>
        ///  El Name o TaxTypeCode debe corresponder con el Id para el IGV
        /// </summary>
        public string C2057 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2057"]);
               
            }
        }
        /// <summary>
        ///  El Name o TaxTypeCode debe corresponder con el Id para el ISC
        /// </summary>
        public string C2058 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2058"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TaxSubtotal/cbc:TaxAmount no cumple con el formato establecido
        /// </summary>
        public string C2059 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2059"]);
               
            }
        }
        /// <summary>
        ///  TaxSubtotal/cbc:TaxAmount es obligatorio
        /// </summary>
        public string C2060 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2060"]);
               
            }
        }
        /// <summary>
        ///  El tag global cac:TaxTotal/cbc:TaxAmount debe tener el mismo valor que cac:TaxTotal/cac:Subtotal/cbc:TaxAmount
        /// </summary>
        public string C2061 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2061"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en PayableAmount no cumple con el formato establecido
        /// </summary>
        public string C2062 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2062"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag PayableAmount
        /// </summary>
        public string C2063 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2063"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en ChargeTotalAmount no cumple con el formato establecido
        /// </summary>
        public string C2064 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2064"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el campo Total Descuentos no cumple con el formato establecido
        /// </summary>
        public string C2065 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2065"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar una descripcion para el tag sac:AdditionalProperty/cbc:Value
        /// </summary>
        public string C2066 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2066"]);
               
            }
        }
        /// <summary>
        ///  cac:Price/cbc:PriceAmount - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2067 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2067"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:Price/cbc:PriceAmount en el detalle de los Items
        /// </summary>
        public string C2068 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2068"]);
               
            }
        }
        /// <summary>
        ///  DocumentCurrencyCode - El dato ingresado no cumple con la estructura
        /// </summary>
        public string C2069 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2069"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de DocumentCurrencyCode
        /// </summary>
        public string C2070 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2070"]);
               
            }
        }
        /// <summary>
        ///  La moneda debe ser la misma en todo el documento. Salvo las percepciones que sólo son en moneda nacional
        /// </summary>
        public string C2071 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2071"]);
               
            }
        }
        /// <summary>
        ///  CustomizationID - La versión del documento no es la correcta
        /// </summary>
        public string C2072 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2072"]);
               
            }
        }
        /// <summary>
        ///  El XML no existe informacion de CustomizationID
        /// </summary>
        public string C2073 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2073"]);
               
            }
        }
        /// <summary>
        ///  UBLVersionID - La versión del UBL no es correcta
        /// </summary>
        public string C2074 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2074"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de UBLVersionID
        /// </summary>
        public string C2075 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2075"]);
               
            }
        }
        /// <summary>
        ///  cac:Signature/cbc:ID - Falta el identificador de la firma
        /// </summary>
        public string C2076 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2076"]);
               
            }
        }
        /// <summary>
        ///  El tag cac:Signature/cbc:ID debe contener informacion
        /// </summary>
        public string C2077 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2077"]);
               
            }
        }
        /// <summary>
        ///  cac:Signature/cac:SignatoryParty/cac:PartyIdentification/cbc:ID - Debe ser igual al RUC del emisor
        /// </summary>
        public string C2078 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2078"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:Signature/cac:SignatoryParty/cac:PartyIdentification/cbc:ID
        /// </summary>
        public string C2079 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2079"]);
               
            }
        }
        /// <summary>
        ///  cac:Signature/cac:SignatoryParty/cac:PartyName/cbc:Name - No cumple con el estandar
        /// </summary>
        public string C2080 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2080"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:Signature/cac:SignatoryParty/cac:PartyName/cbc:Name
        /// </summary>
        public string C2081 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2081"]);
               
            }
        }
        /// <summary>
        ///  cac:Signature/cac:DigitalSignatureAttachment/cac:ExternalReference/cbc:URI - No cumple con el estandar
        /// </summary>
        public string C2082 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2082"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:Signature/cac:DigitalSignatureAttachment/cac:ExternalReference/cbc:URI
        /// </summary>
        public string C2083 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2083"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/ds:Signature/@Id - No cumple con el estandar
        /// </summary>
        public string C2084 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2084"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/ds:Signature/@Id
        /// </summary>
        public string C2085 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2085"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:CanonicalizationMethod/@Algorithm - No cumple con el estandar
        /// </summary>
        public string C2086 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2086"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:CanonicalizationMethod/@Algorithm
        /// </summary>
        public string C2087 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2087"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:SignatureMethod/@Algorithm - No cumple con el estandar
        /// </summary>
        public string C2088 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2088"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:SignatureMethod/@Algorithm
        /// </summary>
        public string C2089 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2089"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:Reference/@URI - Debe estar vacio para id
        /// </summary>
        public string C2090 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2090"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:Reference/@URI
        /// </summary>
        public string C2091 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2091"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/.../ds:Transform@Algorithm - No cumple con el estandar
        /// </summary>
        public string C2092 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2092"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:Reference/ds:Transform@Algorithm
        /// </summary>
        public string C2093 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2093"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:Reference/ds:DigestMethod/@Algorithm - No cumple con el estandar
        /// </summary>
        public string C2094 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2094"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:Reference/ds:DigestMethod/@Algorithm
        /// </summary>
        public string C2095 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2095"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:Reference/ds:DigestValue - No  cumple con el estandar
        /// </summary>
        public string C2096 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2096"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:SignedInfo/ds:Reference/ds:DigestValue
        /// </summary>
        public string C2097 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2097"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:SignatureValue - No cumple con el estandar
        /// </summary>
        public string C2098 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2098"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:SignatureValue
        /// </summary>
        public string C2099 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2099"]);
               
            }
        }
        /// <summary>
        ///  ext:UBLExtensions/.../ds:Signature/ds:KeyInfo/ds:X509Data/ds:X509Certificate - No cumple con el estandar
        /// </summary>
        public string C2100 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2100"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ext:UBLExtensions/.../ds:Signature/ds:KeyInfo/ds:X509Data/ds:X509Certificate
        /// </summary>
        public string C2101 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2101"]);
               
            }
        }
        /// <summary>
        ///  Error al procesar la factura
        /// </summary>
        public string C2102 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2102"]);
               
            }
        }
        /// <summary>
        ///  La serie ingresada no es válida
        /// </summary>
        public string C2103 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2103"]);
               
            }
        }
        /// <summary>
        ///  Numero de RUC del emisor no existe
        /// </summary>
        public string C2104 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2104"]);
               
            }
        }
        /// <summary>
        ///  Comprobante a dar de baja no se encuentra registrado en SUNAT
        /// </summary>
        public string C2105 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2105"]);
               
            }
        }
        /// <summary>
        ///  Factura a dar de baja ya se encuentra en estado de baja
        /// </summary>
        public string C2106 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2106"]);
               
            }
        }
        /// <summary>
        ///  Numero de RUC SOL no coincide con RUC emisor
        /// </summary>
        public string C2107 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2107"]);
               
            }
        }
        /// <summary>
        ///  Presentacion fuera de fecha
        /// </summary>
        public string C2108 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2108"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue registrado previamente con otros datos
        /// </summary>
        public string C2109 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2109"]);
               
            }
        }
        /// <summary>
        ///  UBLVersionID - La versión del UBL no es correcta
        /// </summary>
        public string C2110 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2110"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de UBLVersionID
        /// </summary>
        public string C2111 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2111"]);
               
            }
        }
        /// <summary>
        ///  CustomizationID - La version del documento no es correcta
        /// </summary>
        public string C2112 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2112"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomizationID
        /// </summary>
        public string C2113 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2113"]);
               
            }
        }
        /// <summary>
        ///  DocumentCurrencyCode -  El dato ingresado no cumple con la estructura
        /// </summary>
        public string C2114 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2114"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de DocumentCurrencyCode
        /// </summary>
        public string C2115 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2115"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la Nota de credito debe ser factura electronica o ticket
        /// </summary>
        public string C2116 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2116"]);
               
            }
        }
        /// <summary>
        ///  La serie o numero del documento modificado por la Nota de Credito no cumple con el formato establecido
        /// </summary>
        public string C2117 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2117"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar las facturas relacionadas a la Nota de Credito
        /// </summary>
        public string C2118 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2118"]);
               
            }
        }
        /// <summary>
        ///  El documento modificado en la Nota de credito no esta registrada.
        /// </summary>
        public string C2119 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2119"]);
               
            }
        }
        /// <summary>
        ///  El documento modificado en la Nota de credito se encuentra de baja
        /// </summary>
        public string C2120 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2120"]);
               
            }
        }
        /// <summary>
        ///  El documento modificado en la Nota de credito esta registrada como rechazada
        /// </summary>
        public string C2121 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2121"]);
               
            }
        }
        /// <summary>
        ///  El tag cac:LegalMonetaryTotal/cbc:PayableAmount debe tener informacion valida
        /// </summary>
        public string C2122 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2122"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName -  El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2123 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2123"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag RegistrationName del emisor del documento
        /// </summary>
        public string C2124 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2124"]);
               
            }
        }
        /// <summary>
        ///  ReferenceID -  El dato ingresado debe indicar SERIE-CORRELATIVO del documento al que se relaciona la Nota
        /// </summary>
        public string C2125 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2125"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene informacion en el tag ReferenceID del documento al que se relaciona la nota
        /// </summary>
        public string C2126 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2126"]);
               
            }
        }
        /// <summary>
        ///  ResponseCode -  El dato ingresado no cumple  con  la  estructura
        /// </summary>
        public string C2127 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2127"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de ResponseCode
        /// </summary>
        public string C2128 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2128"]);
               
            }
        }
        /// <summary>
        ///  AdditionalAccountID -  El dato ingresado  en el tipo de documento de identidad del receptor no cumple con el estandar
        /// </summary>
        public string C2129 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2129"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de AdditionalAccountID del receptor del documento
        /// </summary>
        public string C2130 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2130"]);
               
            }
        }
        /// <summary>
        ///  CustomerAssignedAccountID - El numero de documento de identidad del receptor debe ser RUC
        /// </summary>
        public string C2131 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2131"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomerAssignedAccountID del receptor del documento
        /// </summary>
        public string C2132 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2132"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName -  El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2133 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2133"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de RegistrationName del receptor del documento
        /// </summary>
        public string C2134 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2134"]);
               
            }
        }
        /// <summary>
        ///  cac:DiscrepancyResponse/cbc:Description - El dato ingresado no cumple con la estructura
        /// </summary>
        public string C2135 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2135"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de cac:DiscrepancyResponse/cbc:Description
        /// </summary>
        public string C2136 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2136"]);
               
            }
        }
        /// <summary>
        ///  El Numero de orden del item no cumple con el formato establecido
        /// </summary>
        public string C2137 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2137"]);
               
            }
        }
        /// <summary>
        ///  CreditedQuantity/@unitCode - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2138 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2138"]);
               
            }
        }
        /// <summary>
        ///  CreditedQuantity - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2139 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2139"]);
               
            }
        }
        /// <summary>
        ///  El PriceTypeCode debe tener el valor 01
        /// </summary>
        public string C2140 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2140"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxCategory/cac:TaxScheme/cbc:ID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2141 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2141"]);
               
            }
        }
        /// <summary>
        ///  El codigo del tributo es invalido
        /// </summary>
        public string C2142 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2142"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxScheme/cbc:Name del item - No existe el tag o el dato ingresado no cumple con el estandar
        /// </summary>
        public string C2143 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2143"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxCategory/cac:TaxScheme/cbc:TaxTypeCode El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2144 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2144"]);
               
            }
        }
        /// <summary>
        ///  El tipo de afectacion del IGV es incorrecto
        /// </summary>
        public string C2145 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2145"]);
               
            }
        }
        /// <summary>
        ///  El Nombre Internacional debe ser VAT
        /// </summary>
        public string C2146 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2146"]);
               
            }
        }
        /// <summary>
        ///  El sistema de calculo del ISC es incorrecto
        /// </summary>
        public string C2147 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2147"]);
               
            }
        }
        /// <summary>
        ///  El Nombre Internacional debe ser EXC
        /// </summary>
        public string C2148 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2148"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en PayableAmount no cumple con el formato establecido
        /// </summary>
        public string C2149 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2149"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en AdditionalMonetaryTotal/cbc:ID es incorrecto
        /// </summary>
        public string C2150 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2150"]);
               
            }
        }
        /// <summary>
        ///  AdditionalMonetaryTotal/cbc:ID debe tener valor
        /// </summary>
        public string C2151 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2151"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio al menos un AdditionalInformation
        /// </summary>
        public string C2152 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2152"]);
               
            }
        }
        /// <summary>
        ///  Error al procesar la Nota de Credito
        /// </summary>
        public string C2153 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2153"]);
               
            }
        }
        /// <summary>
        ///  TaxAmount - El dato ingresado en impuestos globales no cumple con el estandar
        /// </summary>
        public string C2154 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2154"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TaxAmount de impuestos globales
        /// </summary>
        public string C2155 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2155"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme ID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2156 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2156"]);
               
            }
        }
        /// <summary>
        ///  El codigo del tributo es invalido
        /// </summary>
        public string C2157 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2157"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de TaxScheme ID de impuestos globales
        /// </summary>
        public string C2158 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2158"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme Name - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2159 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2159"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de TaxScheme Name de impuestos globales
        /// </summary>
        public string C2160 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2160"]);
               
            }
        }
        /// <summary>
        ///  CustomizationID - La version del documento no es correcta
        /// </summary>
        public string C2161 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2161"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomizationID
        /// </summary>
        public string C2162 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2162"]);
               
            }
        }
        /// <summary>
        ///  UBLVersionID - La versión del UBL no es correcta
        /// </summary>
        public string C2163 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2163"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de UBLVersionID
        /// </summary>
        public string C2164 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2164"]);
               
            }
        }
        /// <summary>
        ///  Error al procesar la Nota de Debito
        /// </summary>
        public string C2165 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2165"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2166 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2166"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag RegistrationName del emisor del documento
        /// </summary>
        public string C2167 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2167"]);
               
            }
        }
        /// <summary>
        ///  DocumentCurrencyCode -  El dato ingresado no cumple con el formato establecido
        /// </summary>
        public string C2168 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2168"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de DocumentCurrencyCode
        /// </summary>
        public string C2169 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2169"]);
               
            }
        }
        /// <summary>
        ///  ReferenceID - El dato ingresado debe indicar SERIE-CORRELATIVO del documento al que se relaciona la Nota
        /// </summary>
        public string C2170 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2170"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene informacion en el tag ReferenceID del documento al que se relaciona la nota
        /// </summary>
        public string C2171 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2171"]);
               
            }
        }
        /// <summary>
        ///  ResponseCode - El dato ingresado no cumple con la estructura
        /// </summary>
        public string C2172 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2172"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de ResponseCode
        /// </summary>
        public string C2173 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2173"]);
               
            }
        }
        /// <summary>
        ///  cac:DiscrepancyResponse/cbc:Description - El dato ingresado no cumple con la estructura
        /// </summary>
        public string C2174 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2174"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de cac:DiscrepancyResponse/cbc:Description
        /// </summary>
        public string C2175 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2175"]);
               
            }
        }
        /// <summary>
        ///  AdditionalAccountID -  El dato ingresado  en el tipo de documento de identidad del receptor no cumple con el estandar
        /// </summary>
        public string C2176 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2176"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de AdditionalAccountID del receptor del documento
        /// </summary>
        public string C2177 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2177"]);
               
            }
        }
        /// <summary>
        ///  CustomerAssignedAccountID - El numero de documento de identidad del receptor debe ser RUC.
        /// </summary>
        public string C2178 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2178"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomerAssignedAccountID del receptor del documento
        /// </summary>
        public string C2179 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2179"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2180 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2180"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de RegistrationName del receptor del documento
        /// </summary>
        public string C2181 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2181"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme ID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2182 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2182"]);
               
            }
        }
        /// <summary>
        ///  El codigo del tributo es invalido
        /// </summary>
        public string C2183 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2183"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de TaxScheme ID de impuestos globales
        /// </summary>
        public string C2184 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2184"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme Name - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2185 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2185"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de TaxScheme Name de impuestos globales
        /// </summary>
        public string C2186 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2186"]);
               
            }
        }
        /// <summary>
        ///  El Numero de orden del item no cumple con el formato establecido
        /// </summary>
        public string C2187 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2187"]);
               
            }
        }
        /// <summary>
        ///  DebitedQuantity/@unitCode El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2188 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2188"]);
               
            }
        }
        /// <summary>
        ///  DebitedQuantity El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2189 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2189"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag Price/cbc:PriceAmount en el detalle de los Items
        /// </summary>
        public string C2190 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2190"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag Price/cbc:LineExtensionAmount en el detalle de los Items
        /// </summary>
        public string C2191 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2191"]);
               
            }
        }
        /// <summary>
        ///  EL PriceTypeCode debe tener el valor 01
        /// </summary>
        public string C2192 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2192"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxCategory/cac:TaxScheme/cbc:ID El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2193 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2193"]);
               
            }
        }
        /// <summary>
        ///  El codigo del tributo es invalido
        /// </summary>
        public string C2194 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2194"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxScheme/cbc:Name del item - No existe el tag o el dato ingresado no cumple con el estandar
        /// </summary>
        public string C2195 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2195"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxCategory/cac:TaxScheme/cbc:TaxTypeCode El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2196 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2196"]);
               
            }
        }
        /// <summary>
        ///  El tipo de afectacion del IGV es incorrecto
        /// </summary>
        public string C2197 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2197"]);
               
            }
        }
        /// <summary>
        ///  El Nombre Internacional debe ser VAT
        /// </summary>
        public string C2198 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2198"]);
               
            }
        }
        /// <summary>
        ///  El sistema de calculo del ISC es incorrecto
        /// </summary>
        public string C2199 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2199"]);
               
            }
        }
        /// <summary>
        ///  El Nombre Internacional debe ser EXC
        /// </summary>
        public string C2200 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2200"]);
               
            }
        }
        /// <summary>
        ///  El tag cac:RequestedMonetaryTotal/cbc:PayableAmount debe tener informacion valida
        /// </summary>
        public string C2201 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2201"]);
               
            }
        }
        /// <summary>
        ///  TaxAmount - El dato ingresado en impuestos globales no cumple con el estandar
        /// </summary>
        public string C2202 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2202"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TaxAmount de impuestos globales
        /// </summary>
        public string C2203 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2203"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la Nota de Debito debe ser factura electronica, ticket o documento autorizado
        /// </summary>
        public string C2204 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2204"]);
               
            }
        }
        /// <summary>
        ///  La serie o numero del documento modificado por la Nota de Debito no cumple con el formato establecido
        /// </summary>
        public string C2205 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2205"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar los documentos afectados por la Nota de Debito
        /// </summary>
        public string C2206 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2206"]);
               
            }
        }
        /// <summary>
        ///  El documento modificado en la Nota de debito se encuentra de baja
        /// </summary>
        public string C2207 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2207"]);
               
            }
        }
        /// <summary>
        ///  El documento modificado en la Nota de debito esta registrada como rechazada
        /// </summary>
        public string C2208 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2208"]);
               
            }
        }
        /// <summary>
        ///  El documento modificado en la Nota de debito no esta registrada
        /// </summary>
        public string C2209 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2209"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado no cumple con el formato RC-fecha-correlativo
        /// </summary>
        public string C2210 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2210"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ID
        /// </summary>
        public string C2211 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2211"]);
               
            }
        }
        /// <summary>
        ///  UBLVersionID - La versión del UBL del resumen de boletas no es correcta
        /// </summary>
        public string C2212 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2212"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag UBLVersionID
        /// </summary>
        public string C2213 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2213"]);
               
            }
        }
        /// <summary>
        ///  CustomizationID - La versión del resumen de boletas no es correcta
        /// </summary>
        public string C2214 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2214"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag CustomizationID
        /// </summary>
        public string C2215 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2215"]);
               
            }
        }
        /// <summary>
        ///  CustomerAssignedAccountID -  El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2216 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2216"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag CustomerAssignedAccountID del emisor del documento
        /// </summary>
        public string C2217 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2217"]);
               
            }
        }
        /// <summary>
        ///  AdditionalAccountID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2218 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2218"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag AdditionalAccountID del emisor del documento
        /// </summary>
        public string C2219 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2219"]);
               
            }
        }
        /// <summary>
        ///  El ID debe coincidir con el nombre del archivo
        /// </summary>
        public string C2220 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2220"]);
               
            }
        }
        /// <summary>
        ///  El RUC debe coincidir con el RUC del nombre del archivo
        /// </summary>
        public string C2221 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2221"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no está autorizado a emitir comprobantes electronicos
        /// </summary>
        public string C2222 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2222"]);
               
            }
        }
        /// <summary>
        ///  El archivo ya fue presentado anteriormente
        /// </summary>
        public string C2223 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2223"]);
               
            }
        }
        /// <summary>
        ///  Numero de RUC SOL no coincide con RUC emisor
        /// </summary>
        public string C2224 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2224"]);
               
            }
        }
        /// <summary>
        ///  Numero de RUC del emisor no existe
        /// </summary>
        public string C2225 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2225"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no esta activo
        /// </summary>
        public string C2226 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2226"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no cumple con tipo de empresa o tributos requeridos
        /// </summary>
        public string C2227 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2227"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2228 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2228"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag RegistrationName del emisor del documento
        /// </summary>
        public string C2229 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2229"]);
               
            }
        }
        /// <summary>
        ///  IssueDate - El dato ingresado no cumple con el patron YYYY-MM-DD
        /// </summary>
        public string C2230 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2230"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag IssueDate
        /// </summary>
        public string C2231 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2231"]);
               
            }
        }
        /// <summary>
        ///  IssueDate- El dato ingresado no es valido
        /// </summary>
        public string C2232 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2232"]);
               
            }
        }
        /// <summary>
        ///  ReferenceDate - El dato ingresado no cumple con el patron YYYY-MM-DD
        /// </summary>
        public string C2233 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2233"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ReferenceDate
        /// </summary>
        public string C2234 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2234"]);
               
            }
        }
        /// <summary>
        ///  ReferenceDate- El dato ingresado no es valido
        /// </summary>
        public string C2235 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2235"]);
               
            }
        }
        /// <summary>
        ///  La fecha del IssueDate no debe ser mayor a la fecha de recepción
        /// </summary>
        public string C2236 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2236"]);
               
            }
        }
        /// <summary>
        ///  La fecha del ReferenceDate no debe ser mayor al Today
        /// </summary>
        public string C2237 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2237"]);
               
            }
        }
        /// <summary>
        ///  LineID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2238 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2238"]);
               
            }
        }
        /// <summary>
        ///  LineID - El dato ingresado debe ser correlativo mayor a cero
        /// </summary>
        public string C2239 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2239"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag LineID de SummaryDocumentsLine
        /// </summary>
        public string C2240 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2240"]);
               
            }
        }
        /// <summary>
        ///  DocumentTypeCode - El valor del tipo de documento es invalido
        /// </summary>
        public string C2241 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2241"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag DocumentTypeCode
        /// </summary>
        public string C2242 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2242"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado  no cumple con el patron SERIE
        /// </summary>
        public string C2243 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2243"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag DocumentSerialID
        /// </summary>
        public string C2244 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2244"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en StartDocumentNumberID debe ser numerico
        /// </summary>
        public string C2245 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2245"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag StartDocumentNumberID
        /// </summary>
        public string C2246 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2246"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en sac:EndDocumentNumberID debe ser numerico
        /// </summary>
        public string C2247 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2247"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag sac:EndDocumentNumberID
        /// </summary>
        public string C2248 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2248"]);
               
            }
        }
        /// <summary>
        ///  Los rangos deben ser mayores a cero
        /// </summary>
        public string C2249 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2249"]);
               
            }
        }
        /// <summary>
        ///  En el rango de comprobantes, el EndDocumentNumberID debe ser mayor o igual al StartInvoiceNumberID
        /// </summary>
        public string C2250 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2250"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TotalAmount debe ser numerico mayor o igual a cero
        /// </summary>
        public string C2251 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2251"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TotalAmount
        /// </summary>
        public string C2252 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2252"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TotalAmount debe ser numerico mayor a cero
        /// </summary>
        public string C2253 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2253"]);
               
            }
        }
        /// <summary>
        ///  PaidAmount - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2254 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2254"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag PaidAmount
        /// </summary>
        public string C2255 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2255"]);
               
            }
        }
        /// <summary>
        ///  InstructionID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2256 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2256"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag InstructionID
        /// </summary>
        public string C2257 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2257"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar Referencia de Importes asociados a las boletas de venta
        /// </summary>
        public string C2258 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2258"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar 3 Referencias de Importes asociados a las boletas de venta
        /// </summary>
        public string C2259 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2259"]);
               
            }
        }
        /// <summary>
        ///  PaidAmount - El dato ingresado debe ser mayor o igual a 0.00
        /// </summary>
        public string C2260 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2260"]);
               
            }
        }
        /// <summary>
        ///  cbc:Amount - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2261 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2261"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cbc:Amount
        /// </summary>
        public string C2262 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2262"]);
               
            }
        }
        /// <summary>
        ///  ChargeIndicator - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2263 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2263"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ChargeIndicator
        /// </summary>
        public string C2264 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2264"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar Información acerca del Importe Total de Otros Cargos
        /// </summary>
        public string C2265 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2265"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar cargos mayores o iguales a cero
        /// </summary>
        public string C2266 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2266"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme ID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2267 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2267"]);
               
            }
        }
        /// <summary>
        ///  El codigo del tributo es invalido
        /// </summary>
        public string C2268 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2268"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TaxScheme ID de Información acerca del importe total de un tipo particular de impuesto
        /// </summary>
        public string C2269 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2269"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme Name - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2270 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2270"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TaxScheme Name de impuesto
        /// </summary>
        public string C2271 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2271"]);
               
            }
        }
        /// <summary>
        ///  TaxScheme TaxTypeCode - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2272 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2272"]);
               
            }
        }
        /// <summary>
        ///  TaxAmount - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2273 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2273"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag TaxAmount
        /// </summary>
        public string C2274 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2274"]);
               
            }
        }
        /// <summary>
        ///  Si el codigo de tributo es 2000, el nombre del tributo debe ser ISC
        /// </summary>
        public string C2275 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2275"]);
               
            }
        }
        /// <summary>
        ///  Si el codigo de tributo es 1000, el nombre del tributo debe ser IGV
        /// </summary>
        public string C2276 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2276"]);
               
            }
        }
        /// <summary>
        ///  No se ha consignado ninguna informacion del importe total de tributos
        /// </summary>
        public string C2277 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2277"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar Información acerca del importe total de IGV/IVAP
        /// </summary>
        public string C2278 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2278"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar Items de consolidado de documentos
        /// </summary>
        public string C2279 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2279"]);
               
            }
        }
        /// <summary>
        ///  Existen problemas con la informacion del resumen de comprobantes
        /// </summary>
        public string C2280 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2280"]);
               
            }
        }
        /// <summary>
        ///  Error en la validacion de los rangos de los comprobantes
        /// </summary>
        public string C2281 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2281"]);
               
            }
        }
        /// <summary>
        ///  Existe documento ya informado anteriormente
        /// </summary>
        public string C2282 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2282"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado no cumple con el formato RA-fecha-correlativo
        /// </summary>
        public string C2283 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2283"]);
               
            }
        }
        /// <summary>
        ///  El tag ID esta vacío
        /// </summary>
        public string C2284 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2284"]);
               
            }
        }
        /// <summary>
        ///  El ID debe coincidir  con el nombre del archivo
        /// </summary>
        public string C2285 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2285"]);
               
            }
        }
        /// <summary>
        ///  El RUC debe coincidir con el RUC del nombre del archivo
        /// </summary>
        public string C2286 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2286"]);
               
            }
        }
        /// <summary>
        ///  AdditionalAccountID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2287 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2287"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag AdditionalAccountID del emisor del documento
        /// </summary>
        public string C2288 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2288"]);
               
            }
        }
        /// <summary>
        ///  CustomerAssignedAccountID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2289 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2289"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag CustomerAssignedAccountID del emisor del documento
        /// </summary>
        public string C2290 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2290"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no esta autorizado a emitir comprobantes electronicos
        /// </summary>
        public string C2291 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2291"]);
               
            }
        }
        /// <summary>
        ///  Numero de RUC SOL no coincide con RUC emisor
        /// </summary>
        public string C2292 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2292"]);
               
            }
        }
        /// <summary>
        ///  Numero de RUC del emisor no existe
        /// </summary>
        public string C2293 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2293"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no esta activo
        /// </summary>
        public string C2294 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2294"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no cumple con tipo de empresa o tributos requeridos
        /// </summary>
        public string C2295 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2295"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2296 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2296"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag RegistrationName del emisor del documento
        /// </summary>
        public string C2297 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2297"]);
               
            }
        }
        /// <summary>
        ///  IssueDate - El dato ingresado no cumple con el patron YYYY-MM-DD
        /// </summary>
        public string C2298 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2298"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag IssueDate
        /// </summary>
        public string C2299 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2299"]);
               
            }
        }
        /// <summary>
        ///  IssueDate - El dato ingresado no es valido
        /// </summary>
        public string C2300 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2300"]);
               
            }
        }
        /// <summary>
        ///  La fecha del IssueDate no debe ser mayor a la fecha de recepción
        /// </summary>
        public string C2301 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2301"]);
               
            }
        }
        /// <summary>
        ///  ReferenceDate - El dato ingresado no cumple con el patron YYYY-MM-DD
        /// </summary>
        public string C2302 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2302"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ReferenceDate
        /// </summary>
        public string C2303 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2303"]);
               
            }
        }
        /// <summary>
        ///  ReferenceDate - El dato ingresado no es valido
        /// </summary>
        public string C2304 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2304"]);
               
            }
        }
        /// <summary>
        ///  LineID - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2305 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2305"]);
               
            }
        }
        /// <summary>
        ///  LineID - El dato ingresado debe ser correlativo mayor a cero
        /// </summary>
        public string C2306 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2306"]);
               
            }
        }
        /// <summary>
        ///  El tag LineID de VoidedDocumentsLine esta vacío
        /// </summary>
        public string C2307 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2307"]);
               
            }
        }
        /// <summary>
        ///  DocumentTypeCode - El valor del tipo de documento es invalido
        /// </summary>
        public string C2308 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2308"]);
               
            }
        }
        /// <summary>
        ///  El tag DocumentTypeCode es vacío
        /// </summary>
        public string C2309 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2309"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado  no cumple con el patron SERIE
        /// </summary>
        public string C2310 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2310"]);
               
            }
        }
        /// <summary>
        ///  El tag DocumentSerialID es vacío
        /// </summary>
        public string C2311 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2311"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en DocumentNumberID debe ser numerico y como maximo de 8 digitos
        /// </summary>
        public string C2312 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2312"]);
               
            }
        }
        /// <summary>
        ///  El tag DocumentNumberID esta vacío
        /// </summary>
        public string C2313 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2313"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en VoidReasonDescription debe contener información válida
        /// </summary>
        public string C2314 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2314"]);
               
            }
        }
        /// <summary>
        ///  El tag VoidReasonDescription esta vacío
        /// </summary>
        public string C2315 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2315"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar Items en VoidedDocumentsLine
        /// </summary>
        public string C2316 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2316"]);
               
            }
        }
        /// <summary>
        ///  Error al procesar el resumen de anulados
        /// </summary>
        public string C2317 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2317"]);
               
            }
        }
        /// <summary>
        ///  CustomizationID - La version del documento no es correcta
        /// </summary>
        public string C2318 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2318"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag CustomizationID
        /// </summary>
        public string C2319 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2319"]);
               
            }
        }
        /// <summary>
        ///  UBLVersionID - La version del UBL  no es la correcta
        /// </summary>
        public string C2320 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2320"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag UBLVersionID
        /// </summary>
        public string C2321 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2321"]);
               
            }
        }
        /// <summary>
        ///  Error en la validacion de los rangos
        /// </summary>
        public string C2322 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2322"]);
               
            }
        }
        /// <summary>
        ///  Existe documento ya informado anteriormente en una comunicacion de baja
        /// </summary>
        public string C2323 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2323"]);
               
            }
        }
        /// <summary>
        ///  El archivo de comunicacion de baja ya fue presentado anteriormente
        /// </summary>
        public string C2324 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2324"]);
               
            }
        }
        /// <summary>
        ///  El certificado usado no es el comunicado a SUNAT
        /// </summary>
        public string C2325 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2325"]);
               
            }
        }
        /// <summary>
        ///  El certificado usado se encuentra de baja
        /// </summary>
        public string C2326 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2326"]);
               
            }
        }
        /// <summary>
        ///  El certificado usado no se encuentra vigente
        /// </summary>
        public string C2327 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2327"]);
               
            }
        }
        /// <summary>
        ///  El certificado usado se encuentra revocado
        /// </summary>
        public string C2328 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2328"]);
               
            }
        }
        /// <summary>
        ///  La fecha de emision se encuentra fuera del limite permitido
        /// </summary>
        public string C2329 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2329"]);
               
            }
        }
        /// <summary>
        ///  La fecha de generación de la comunicación debe ser igual a la fecha consignada en el nombre del archivo
        /// </summary>
        public string C2330 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2330"]);
               
            }
        }
        /// <summary>
        ///  Número de RUC del nombre del archivo no coincide con el consignado en el contenido del archivo XML
        /// </summary>
        public string C2331 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2331"]);
               
            }
        }
        /// <summary>
        ///  Número de Serie del nombre del archivo no coincide con el consignado en el contenido del archivo XML
        /// </summary>
        public string C2332 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2332"]);
               
            }
        }
        /// <summary>
        ///  Número de documento en el nombre del archivo no coincide con el consignado en el contenido del XML
        /// </summary>
        public string C2333 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2333"]);
               
            }
        }
        /// <summary>
        ///  El documento electrónico ingresado ha sido alterado
        /// </summary>
        public string C2334 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2334"]);
               
            }
        }
        /// <summary>
        ///  El documento electrónico ingresado ha sido alterado
        /// </summary>
        public string C2335 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2335"]);
               
            }
        }
        /// <summary>
        ///  Ocurrió un error en el proceso de validación de la firma digital
        /// </summary>
        public string C2336 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2336"]);
               
            }
        }
        /// <summary>
        ///  La moneda debe ser la misma en todo el documento
        /// </summary>
        public string C2337 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2337"]);
               
            }
        }
        /// <summary>
        ///  La moneda debe ser la misma en todo el documento
        /// </summary>
        public string C2338 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2338"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en PayableAmount no cumple con el formato establecido
        /// </summary>
        public string C2339 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2339"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en AdditionalMonetaryTotal/cbc:ID es incorrecto
        /// </summary>
        public string C2340 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2340"]);
               
            }
        }
        /// <summary>
        ///  AdditionalMonetaryTotal/cbc:ID debe tener valor
        /// </summary>
        public string C2341 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2341"]);
               
            }
        }
        /// <summary>
        ///  Fecha de emision de la factura no coincide con la informada en la comunicacion
        /// </summary>
        public string C2342 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2342"]);
               
            }
        }
        /// <summary>
        ///  cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount - El dato ingresado no cumple con el estandar
        /// </summary>
        public string C2343 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2343"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount
        /// </summary>
        public string C2344 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2344"]);
               
            }
        }
        /// <summary>
        ///  La serie no corresponde al tipo de comprobante
        /// </summary>
        public string C2345 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2345"]);
               
            }
        }
        /// <summary>
        ///  La fecha de generación del resumen debe ser igual a la fecha consignada en el nombre del archivo
        /// </summary>
        public string C2346 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2346"]);
               
            }
        }
        /// <summary>
        ///  Los rangos informados en el archivo XML se encuentran duplicados o superpuestos
        /// </summary>
        public string C2347 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2347"]);
               
            }
        }
        /// <summary>
        ///  Los documentos informados en el archivo XML se encuentran duplicados
        /// </summary>
        public string C2348 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2348"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento sac:AdditionalMonetaryTotal con cbc:ID igual a 1001
        /// </summary>
        public string C2349 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2349"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento sac:AdditionalMonetaryTotal con cbc:ID igual a 1002
        /// </summary>
        public string C2350 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2350"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento sac:AdditionalMonetaryTotal con cbc:ID igual a 1003
        /// </summary>
        public string C2351 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2351"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento cac:TaxTotal a nivel global para IGV (cbc:ID igual a 1000)
        /// </summary>
        public string C2352 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2352"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento cac:TaxTotal a nivel global para ISC (cbc:ID igual a 2000)
        /// </summary>
        public string C2353 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2353"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento cac:TaxTotal a nivel global para Otros (cbc:ID igual a 9999)
        /// </summary>
        public string C2354 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2354"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento cac:TaxTotal a nivel de item por codigo de tributo
        /// </summary>
        public string C2355 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2355"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento cac:TaxTotal a nivel de item para ISC (cbc:ID igual a 2000)
        /// </summary>
        public string C2356 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2356"]);
               
            }
        }
        /// <summary>
        ///  No debe existir un elemento sac:BillingPayment a nivel de item con el mismo valor de cbc:InstructionID
        /// </summary>
        public string C2357 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2357"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento sac:BillingPayment a nivel de item con cbc:InstructionID igual a 02
        /// </summary>
        public string C2358 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2358"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento sac:BillingPayment a nivel de item con cbc:InstructionID igual a 03
        /// </summary>
        public string C2359 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2359"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento sac:BillingPayment a nivel de item con cbc:InstructionID igual a 04
        /// </summary>
        public string C2360 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2360"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento cac:TaxTotal a nivel de item para Otros (cbc:ID igual a 9999)
        /// </summary>
        public string C2361 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2361"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un tag cac:AccountingSupplierParty/cbc:AdditionalAccountID
        /// </summary>
        public string C2362 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2362"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un tag cac:AccountingCustomerParty/cbc:AdditionalAccountID
        /// </summary>
        public string C2363 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2363"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene un tipo y número de Guía de Remisión repetido
        /// </summary>
        public string C2364 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2364"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene un tipo y número de Documento Relacionado repetido
        /// </summary>
        public string C2365 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2365"]);
               
            }
        }
        /// <summary>
        ///  El codigo en el tag sac:AdditionalProperty/cbc:ID debe tener 4 posiciones
        /// </summary>
        public string C2366 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2366"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en PriceAmount del Precio de venta unitario por item no cumple con el formato establecido
        /// </summary>
        public string C2367 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2367"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TaxSubtotal/cbc:TaxAmount del item no cumple con el formato establecido
        /// </summary>
        public string C2368 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2368"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en PriceAmount del Valor de venta unitario por item no cumple con el formato establecido
        /// </summary>
        public string C2369 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2369"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en LineExtensionAmount del item no cumple con el formato establecido
        /// </summary>
        public string C2370 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2370"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cbc:TaxExemptionReasonCode de Afectacion al IGV
        /// </summary>
        public string C2371 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2371"]);
               
            }
        }
        /// <summary>
        ///  El tag en el item cac:TaxTotal/cbc:TaxAmount debe tener el mismo valor que cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount
        /// </summary>
        public string C2372 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2372"]);
               
            }
        }
        /// <summary>
        ///  Si existe monto de ISC en el ITEM debe especificar el sistema de calculo
        /// </summary>
        public string C2373 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2373"]);
               
            }
        }
        /// <summary>
        ///  La factura a dar de baja tiene una fecha de recepcion fuera del plazo permitido
        /// </summary>
        public string C2374 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2374"]);
               
            }
        }
        /// <summary>
        ///  Fecha de emision del comprobante no coincide con la fecha de emision consignada en la comunicación
        /// </summary>
        public string C2375 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2375"]);
               
            }
        }
        /// <summary>
        ///  La boleta de venta a dar de baja fue informada en un resumen con fecha de recepcion fuera del plazo permitido
        /// </summary>
        public string C2376 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2376"]);
               
            }
        }
        /// <summary>
        ///  El Name o TaxTypeCode debe corresponder al codigo de tributo del item
        /// </summary>
        public string C2377 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2377"]);
               
            }
        }
        /// <summary>
        ///  El Name o TaxTypeCode debe corresponder con el Id para el ISC
        /// </summary>
        public string C2378 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2378"]);
               
            }
        }
        /// <summary>
        ///  La numeracion de boleta de venta a dar de baja fue generada en una fecha fuera del plazo permitido
        /// </summary>
        public string C2379 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2379"]);
               
            }
        }
        /// <summary>
        ///  El documento tiene observaciones
        /// </summary>
        public string C2380 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2380"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 1: No todos los items corresponden a operaciones gravadas a IGV
        /// </summary>
        public string C2381 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2381"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 2: No todos los items corresponden a operaciones inafectas o exoneradas al IGV
        /// </summary>
        public string C2382 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2382"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 3: Falta leyenda con codigo 1002
        /// </summary>
        public string C2383 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2383"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 3: Existe item con operación onerosa
        /// </summary>
        public string C2384 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2384"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 4: Debe exitir Total descuentos mayor a cero
        /// </summary>
        public string C2385 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2385"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 5: Todos los items deben tener operaciones afectas a ISC
        /// </summary>
        public string C2386 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2386"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 6: El monto de percepcion no existe o es cero
        /// </summary>
        public string C2387 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2387"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 6: Todos los items deben tener código de Afectación al IGV igual a 10
        /// </summary>
        public string C2388 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2388"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 7: El codigo de moneda no es diferente a PEN
        /// </summary>
        public string C2389 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2389"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 8: No todos los items corresponden a operaciones gravadas a IGV
        /// </summary>
        public string C2390 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2390"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 9: No todos los items corresponden a operaciones inafectas o exoneradas al IGV
        /// </summary>
        public string C2391 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2391"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 10: Falta leyenda con codigo 1002
        /// </summary>
        public string C2392 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2392"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 10: Existe item con operación onerosa
        /// </summary>
        public string C2393 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2393"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 11: Debe existir Total descuentos mayor a cero
        /// </summary>
        public string C2394 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2394"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el Grupo 12: El codigo de moneda no es diferente a PEN
        /// </summary>
        public string C2395 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2395"]);
               
            }
        }
        /// <summary>
        ///  Si el monto total es mayor a S/. 700.00 debe consignar tipo y numero de documento del adquiriente
        /// </summary>
        public string C2396 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2396"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento del adquiriente no puede ser Numero de RUC
        /// </summary>
        public string C2397 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2397"]);
               
            }
        }
        /// <summary>
        ///  El documento a dar de baja se encuentra rechazado
        /// </summary>
        public string C2398 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2398"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la Nota de credito debe ser boleta electronica
        /// </summary>
        public string C2399 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2399"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la Nota de debito debe ser boleta electronica
        /// </summary>
        public string C2400 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2400"]);
               
            }
        }
        /// <summary>
        ///  No se puede leer (parsear) el archivo XML
        /// </summary>
        public string C2401 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2401"]);
               
            }
        }
        /// <summary>
        ///  El caso de prueba no existe
        /// </summary>
        public string C2402 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2402"]);
               
            }
        }
        /// <summary>
        ///  La numeracion o nombre del documento ya ha sido enviado anteriormente
        /// </summary>
        public string C2403 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2403"]);
               
            }
        }
        /// <summary>
        ///  Documento afectado por la nota electronica no se encuentra autorizado
        /// </summary>
        public string C2404 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2404"]);
               
            }
        }
        /// <summary>
        ///  Contribuyente no se encuentra autorizado como emisor de boletas electronicas
        /// </summary>
        public string C2405 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2405"]);
               
            }
        }
        /// <summary>
        ///  Existe mas de un tag sac:AdditionalMonetaryTotal con el mismo ID
        /// </summary>
        public string C2406 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2406"]);
               
            }
        }
        /// <summary>
        ///  Existe mas de un tag sac:AdditionalProperty con el mismo ID
        /// </summary>
        public string C2407 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2407"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en PriceAmount del Valor referencial unitario por item no cumple con el formato establecido
        /// </summary>
        public string C2408 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2408"]);
               
            }
        }
        /// <summary>
        ///  Existe mas de un tag cac:AlternativeConditionPrice con el mismo cbc:PriceTypeCode
        /// </summary>
        public string C2409 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2409"]);
               
            }
        }
        /// <summary>
        ///  Se ha consignado un valor invalido en el campo cbc:PriceTypeCode
        /// </summary>
        public string C2410 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2410"]);
               
            }
        }
        /// <summary>
        ///  Ha consignado mas de un elemento cac:AllowanceCharge con el mismo campo cbc:ChargeIndicator
        /// </summary>
        public string C2411 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2411"]);
               
            }
        }
        /// <summary>
        ///  Se ha consignado mas de un documento afectado por la nota (tag cac:BillingReference)
        /// </summary>
        public string C2412 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2412"]);
               
            }
        }
        /// <summary>
        ///  Se ha consignado mas de un motivo o sustento de la nota (tag cac:DiscrepancyResponse/cbc:Description)
        /// </summary>
        public string C2413 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2413"]);
               
            }
        }
        /// <summary>
        ///  No se ha consignado en la nota el tag cac:DiscrepancyResponse
        /// </summary>
        public string C2414 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2414"]);
               
            }
        }
        /// <summary>
        ///  Se ha consignado en la nota mas de un tag cac:DiscrepancyResponse
        /// </summary>
        public string C2415 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2415"]);
               
            }
        }
        /// <summary>
        ///  Si existe leyenda Transferencia Gratuita debe consignar Total Valor de Venta de Operaciones Gratuitas
        /// </summary>
        public string C2416 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2416"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar Valor Referencial unitario por item en operaciones no onerosas
        /// </summary>
        public string C2417 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2417"]);
               
            }
        }
        /// <summary>
        ///  Si consigna Valor Referencial unitario por item en operaciones no onerosas,la operacion debe ser no onerosa.
        /// </summary>
        public string C2418 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2418"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en AllowanceTotalAmount no cumple con el formato establecido
        /// </summary>
        public string C2419 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2419"]);
               
            }
        }
        /// <summary>
        ///  Ya transcurrieron mas de 25 dias calendarios para concluir con su proceso de homologacion
        /// </summary>
        public string C2420 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2420"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar  toda la informacion de  sustento de translado de bienes.
        /// </summary>
        public string C2421 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2421"]);
               
            }
        }
        /// <summary>
        ///  El valor unitario debe ser menor al precio unitario.
        /// </summary>
        public string C2422 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2422"]);
               
            }
        }
        /// <summary>
        ///  Si ha consignado monto ISC a nivel de item, debe consignar un monto a nivel de total.
        /// </summary>
        public string C2423 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2423"]);
               
            }
        }
        /// <summary>
        ///  RC Debe consignar solo un elemento sac:BillingPayment a nivel de item con cbc:InstructionID igual a 05.
        /// </summary>
        public string C2424 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2424"]);
               
            }
        }
        /// <summary>
        ///  Si la  operacion es gratuita PriceTypeCode =02 y cbc:PriceAmount> 0 el codigo de afectacion de igv debe ser  no onerosa es  decir diferente de 10,20,30.
        /// </summary>
        public string C2425 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2425"]);
               
            }
        }
        /// <summary>
        ///  Documentos relacionados duplicados en el comprobante.
        /// </summary>
        public string C2426 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2426"]);
               
            }
        }
        /// <summary>
        ///  Solo debe de existir un tag AdditionalInformation.
        /// </summary>
        public string C2427 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2427"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de facturas con detracciones.
        /// </summary>
        public string C2428 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2428"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de facturas con comercio exterior.
        /// </summary>
        public string C2429 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2429"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de facturas con tag de factura guia.
        /// </summary>
        public string C2430 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2430"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de facturas con tags no tributarios.
        /// </summary>
        public string C2431 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2431"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de boletas con tags no tributarios.
        /// </summary>
        public string C2432 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2432"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de facturas con tag venta itinerante.
        /// </summary>
        public string C2433 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2433"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de boletas con tag venta itinerante.
        /// </summary>
        public string C2434 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2434"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de boletas con ISC.
        /// </summary>
        public string C2435 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2435"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el grupo de boletas de venta con percepcion: El monto de percepcion no existe o es cero.
        /// </summary>
        public string C2436 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2436"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con el grupo de boletas de venta con percepcion: Todos los items deben tener código de Afectación al IGV igual a 10.
        /// </summary>
        public string C2437 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2437"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de facturas con tag venta anticipada I.
        /// </summary>
        public string C2438 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2438"]);
               
            }
        }
        /// <summary>
        ///  Comprobante no cumple con grupo de facturas con tag venta anticipada II.
        /// </summary>
        public string C2439 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2439"]);
               
            }
        }
        /// <summary>
        ///  Número de DNI no existe
        /// </summary>
        public string C2450 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2450"]);
               
            }
        }
        /// <summary>
        ///  Vendedor supera el monto permitido para la emision de una liquidacion de compra
        /// </summary>
        public string C2451 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2451"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de la dirección completa y detallada en domicilio del vendedor
        /// </summary>
        public string C2452 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2452"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del ubigeo del domicilio del vendedor
        /// </summary>
        public string C2453 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2453"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de la dirección completa y detallada del lugar donde se realiza la operación
        /// </summary>
        public string C2454 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2454"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del ubigeo del lugar donde se realiza la operación
        /// </summary>
        public string C2455 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2455"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el tipo de domicilio del vendedor
        /// </summary>
        public string C2456 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2456"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tipo de domicilio del vendedor no corresponde al valor esperado
        /// </summary>
        public string C2457 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2457"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el tipo de ubicación del lugar donde se realiza la operación
        /// </summary>
        public string C2458 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2458"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tipo de ubicación del lugar donde se realiza la operación no corresponde al valor esperado
        /// </summary>
        public string C2459 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2459"]);
               
            }
        }
        /// <summary>
        ///  Número de DNI corresponde a una persona fallecida a la fecha de emision
        /// </summary>
        public string C2460 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2460"]);
               
            }
        }
        /// <summary>
        ///  Número de DNI corresponde a una persona menor de edad
        /// </summary>
        public string C2461 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2461"]);
               
            }
        }
        /// <summary>
        ///  Número de DNI tiene un Numero de RUC asignado activo
        /// </summary>
        public string C2462 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2462"]);
               
            }
        }
        /// <summary>
        ///  Emisor no se encuentra afecto a Renta de tercera categoría
        /// </summary>
        public string C2463 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2463"]);
               
            }
        }
        /// <summary>
        ///  El producto de la tasa por el monto base de la afectación de la retención de renta no corresponde al monto de afectacion de linea
        /// </summary>
        public string C2464 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2464"]);
               
            }
        }
        /// <summary>
        ///  Tipo de comprobante que realizo el anticipo debe ser 10-Liquidacion de compra
        /// </summary>
        public string C2465 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2465"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Comercializacion del oro: Codigo unico de concesion minera
        /// </summary>
        public string C2466 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2466"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Comercializacion del oro: Ley mineral
        /// </summary>
        public string C2467 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2467"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Comercializacion del oro: Naturaleza del mineral
        /// </summary>
        public string C2468 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2468"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Comercializacion del oro: Nombre del derecho minero
        /// </summary>
        public string C2469 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2469"]);
               
            }
        }
        /// <summary>
        ///  El monto base de la retencion de renta global no cumple con el formato establecido
        /// </summary>
        public string C2470 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2470"]);
               
            }
        }
        /// <summary>
        ///  La liquidacion de compra a dar de baja no debe tener pagos registrados
        /// </summary>
        public string C2471 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2471"]);
               
            }
        }
        /// <summary>
        ///  El documento no contiene la fecha de inicio del periodo de abono
        /// </summary>
        public string C2472 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2472"]);
               
            }
        }
        /// <summary>
        ///  El documento no contiene la fecha de fin del periodo de abono
        /// </summary>
        public string C2473 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2473"]);
               
            }
        }
        /// <summary>
        ///  El documento no contiene el "Tipo de canal facturado"
        /// </summary>
        public string C2474 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2474"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como "Tipo de canal facturado" es incorrecto
        /// </summary>
        public string C2475 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2475"]);
               
            }
        }
        /// <summary>
        ///  Debe registrarse el "Indicador de tipo de comisión"
        /// </summary>
        public string C2476 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2476"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el "Indicador de tipo de comisión" no corresponde al valor esperado
        /// </summary>
        public string C2477 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2477"]);
               
            }
        }
        /// <summary>
        ///  Para Bancos emisores debe ingresar el "Indicador de institución financiera"
        /// </summary>
        public string C2478 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2478"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el "Indicador de institución financiera" no corresponde al valor esperado
        /// </summary>
        public string C2479 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2479"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el tag /cac:InvoiceLine/cac:ItemPriceExtension  
        /// </summary>
        public string C2480 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2480"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag /cac:InvoiceLine/cac:ItemPriceExtension/cbc:Amount no cumple con el formato establecido
        /// </summary>
        public string C2481 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2481"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el tag /cac:SubInvoiceLine/cac:ItemPriceExtension
        /// </summary>
        public string C2482 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2482"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag cac:InvoiceLine/cac:SubInvoiceLine/cac:ItemPriceExtension/cbc:Amount no cumple con el formato establecido
        /// </summary>
        public string C2483 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2483"]);
               
            }
        }
        /// <summary>
        ///  Para Bancos emisores locales debe ingresar el Numero de RUC
        /// </summary>
        public string C2484 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2484"]);
               
            }
        }
        /// <summary>
        ///  Tipo de documento de identidad debe ser RUC
        /// </summary>
        public string C2485 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2485"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag /cac:SubInvoiceLine/cbc:LineExtensionAmount no cumple con el formato establecido
        /// </summary>
        public string C2486 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2486"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:LegalMonetaryTotal/cbc:LineExtensionAmount
        /// </summary>
        public string C2487 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2487"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag cac:LegalMonetaryTotal/cbc:LineExtensionAmount no cumple con el formato establecido
        /// </summary>
        public string C2488 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2488"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el "Tipo de documento de identidad" no cumple el formato establecido
        /// </summary>
        public string C2489 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2489"]);
               
            }
        }
        /// <summary>
        ///  Existe más de un Tag UBL cac:OriginatorParty/cac:PartyIdentification
        /// </summary>
        public string C2490 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2490"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el Tag UBL cac:OriginatorParty/cac:PartyIdentification/cbc:ID
        /// </summary>
        public string C2491 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2491"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag cac:SubInvoiceLine/cbc:ID no cumple con el formato establecido
        /// </summary>
        public string C2492 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2492"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag /cac:SubInvoiceLine/cbc:ID no debe repetirse en el mismo cac:InvoiceLine
        /// </summary>
        public string C2493 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2493"]);
               
            }
        }
        /// <summary>
        ///  No existe el tag cac:TaxTotal en el /Invoice/cac:InvoiceLine/cac:SubInvoiceLine
        /// </summary>
        public string C2494 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2494"]);
               
            }
        }
        /// <summary>
        ///  El tag cac:TaxTotal no debe repetirse en el /Invoice/cac:InvoiceLine/cac:SubInvoiceLine
        /// </summary>
        public string C2495 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2495"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag /cac:SubInvoiceLine/cac:TaxTotal/cbc:TaxAmount no cumple el formato establecido
        /// </summary>
        public string C2496 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2496"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag /cac:SubInvoiceLine/cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount no cumple el formato establecido 
        /// </summary>
        public string C2497 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2497"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag cac:TaxCategory/cac:TaxScheme/cbc:ID del /cac:SubInvoiceLine
        /// </summary>
        public string C2498 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2498"]);
               
            }
        }
        /// <summary>
        ///  El código de tributo no debe repetirse a nivel del /cac:SubInvoiceLine
        /// </summary>
        public string C2499 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2499"]);
               
            }
        }
        /// <summary>
        ///  Ingresar descripción y valor venta por ítem para documento de anticipos.
        /// </summary>
        public string C2500 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2500"]);
               
            }
        }
        /// <summary>
        ///  Valor venta debe ser mayor a cero.
        /// </summary>
        public string C2501 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2501"]);
               
            }
        }
        /// <summary>
        ///  El importe total para tipo de operación Venta interna-Anticipos debe ser mayor a cero.
        /// </summary>
        public string C2502 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2502"]);
               
            }
        }
        /// <summary>
        ///  PaidAmount: monto anticipado por documento debe ser mayor a cero.
        /// </summary>
        public string C2503 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2503"]);
               
            }
        }
        /// <summary>
        ///  Falta referencia de la factura relacionada con anticipo.
        /// </summary>
        public string C2504 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2504"]);
               
            }
        }
        /// <summary>
        ///  Código de documento de referencia debe ser 02 o 03.
        /// </summary>
        public string C2505 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2505"]);
               
            }
        }
        /// <summary>
        ///  cac:PrepaidPayment/cbc:ID: Factura o boleta no existe o comunicada de Baja.
        /// </summary>
        public string C2506 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2506"]);
               
            }
        }
        /// <summary>
        ///  Factura relacionada con anticipo no corresponde como factura de anticipo.
        /// </summary>
        public string C2507 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2507"]);
               
            }
        }
        /// <summary>
        ///  Ingresar documentos por anticipos.
        /// </summary>
        public string C2508 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2508"]);
               
            }
        }
        /// <summary>
        ///  Total de anticipos diferente a los montos anticipados por documento.
        /// </summary>
        public string C2509 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2509"]);
               
            }
        }
        /// <summary>
        ///  Nro nombre del documento no tiene el formato correcto.
        /// </summary>
        public string C2510 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2510"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento no es aceptado.
        /// </summary>
        public string C2511 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2511"]);
               
            }
        }
        /// <summary>
        ///  No existe información de serie o número.
        /// </summary>
        public string C2512 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2512"]);
               
            }
        }
        /// <summary>
        ///  Dato no cumple con formato de acuerdo al tipo de documento
        /// </summary>
        public string C2513 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2513"]);
               
            }
        }
        /// <summary>
        ///  No existe información de receptor de documento.
        /// </summary>
        public string C2514 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2514"]);
               
            }
        }
        /// <summary>
        ///  Dato ingresado no cumple con catalogo 6.
        /// </summary>
        public string C2515 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2515"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar tipo de documento.
        /// </summary>
        public string C2516 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2516"]);
               
            }
        }
        /// <summary>
        ///  Dato no cumple con formato establecido.
        /// </summary>
        public string C2517 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2517"]);
               
            }
        }
        /// <summary>
        ///  Calculo IGV no es correcto.
        /// </summary>
        public string C2518 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2518"]);
               
            }
        }
        /// <summary>
        ///  El importe total no coincide con la sumatoria de los valores de venta mas los tributos mas los cargos menos los descuentos que no afectan la base imponible
        /// </summary>
        public string C2519 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2519"]);
               
            }
        }
        /// <summary>
        ///  El tipo documento del emisor que realiza el anticipo debe ser 6 del catalogo de tipo de documento.
        /// </summary>
        public string C2520 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2520"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado debe indicar SERIE-CORRELATIVO del documento que se realizo el anticipo.
        /// </summary>
        public string C2521 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2521"]);
               
            }
        }
        /// <summary>
        ///  No existe información del documento del anticipo.
        /// </summary>
        public string C2522 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2522"]);
               
            }
        }
        /// <summary>
        ///  GrossWeightMeasure - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C2523 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2523"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar el documento afectado por la nota
        /// </summary>
        public string C2524 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2524"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en Quantity no cumple con el formato establecido.
        /// </summary>
        public string C2525 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2525"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en Percent no cumple con el formato establecido.
        /// </summary>
        public string C2526 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2526"]);
               
            }
        }
        /// <summary>
        ///  PrepaidAmount: Monto total anticipado debe ser mayor a cero.
        /// </summary>
        public string C2527 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2527"]);
               
            }
        }
        /// <summary>
        ///  cac:OriginatorDocumentReference/cbc:ID/@SchemaID - El tipo documento debe ser 6 del catalogo de tipo de documento.
        /// </summary>
        public string C2528 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2528"]);
               
            }
        }
        /// <summary>
        ///  RUC que emitio documento de anticipo, no existe.
        /// </summary>
        public string C2529 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2529"]);
               
            }
        }
        /// <summary>
        ///  RUC que solicita la emision de la factura, no existe.
        /// </summary>
        public string C2530 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2530"]);
               
            }
        }
        /// <summary>
        ///  Codigo del Local Anexo del emisor no existe.
        /// </summary>
        public string C2531 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2531"]);
               
            }
        }
        /// <summary>
        ///  No existe información de modalidad de transporte.
        /// </summary>
        public string C2532 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2532"]);
               
            }
        }
        /// <summary>
        ///  Si ha consignado Transporte Privado, debe consignar Licencia de conducir, Placa, N constancia de inscripcion y marca del vehiculo.
        /// </summary>
        public string C2533 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2533"]);
               
            }
        }
        /// <summary>
        ///  Si ha consignado Transporte Público, debe consignar Datos del transportista.
        /// </summary>
        public string C2534 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2534"]);
               
            }
        }
        /// <summary>
        ///  La nota de crédito por otros conceptos tributarios debe tener Otros Documentos Relacionados.
        /// </summary>
        public string C2535 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2535"]);
               
            }
        }
        /// <summary>
        ///  Serie y numero no se encuentra registrado como baja por cambio de destinatario.
        /// </summary>
        public string C2536 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2536"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference/cac:DocumentReference/cbc:DocumentTypeCode - El tipo de documento de serie y número dado de baja es incorrecta.
        /// </summary>
        public string C2537 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2537"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no se encuentra autorizado como emisor electronico de Guía o de factura o de boletaFactura GEM.
        /// </summary>
        public string C2538 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2538"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no esta activo.
        /// </summary>
        public string C2539 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2539"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no esta habido.
        /// </summary>
        public string C2540 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2540"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del tipo de documento identidad del remitente.
        /// </summary>
        public string C2541 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2541"]);
               
            }
        }
        /// <summary>
        ///  cac:DespatchSupplierParty/cbc:CustomerAssignedAccountID@schemeID - El valor ingresado como tipo de documento identidad del remitente es incorrecta.
        /// </summary>
        public string C2542 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2542"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de la dirección completa y detallada en domicilio fiscal.
        /// </summary>
        public string C2543 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2543"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la provincia en domicilio fiscal.
        /// </summary>
        public string C2544 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2544"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del departamento en domicilio fiscal.
        /// </summary>
        public string C2545 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2545"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del distrito en domicilio fiscal.
        /// </summary>
        public string C2546 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2546"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del país en domicilio fiscal.
        /// </summary>
        public string C2547 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2547"]);
               
            }
        }
        /// <summary>
        ///  El valor del país inválido.
        /// </summary>
        public string C2548 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2548"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del tipo de documento identidad del destinatario.
        /// </summary>
        public string C2549 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2549"]);
               
            }
        }
        /// <summary>
        ///  cac:DeliveryCustomerParty/cbc:CustomerAssignedAccountID@schemeID - El dato ingresado de tipo de documento identidad del destinatario no cumple con el estandar.
        /// </summary>
        public string C2550 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2550"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CustomerAssignedAccountID del proveedor de servicios.
        /// </summary>
        public string C2551 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2551"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del tipo de documento identidad del proveedor.
        /// </summary>
        public string C2552 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2552"]);
               
            }
        }
        /// <summary>
        ///  cac:SellerSupplierParty/cbc:CustomerAssignedAccountID@schemeID - El dato ingresado no es valido.
        /// </summary>
        public string C2553 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2553"]);
               
            }
        }
        /// <summary>
        ///  Para el motivo de traslado ingresado el Destinatario debe ser igual al remitente.
        /// </summary>
        public string C2554 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2554"]);
               
            }
        }
        /// <summary>
        ///  Destinatario no debe ser igual al remitente.
        /// </summary>
        public string C2555 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2555"]);
               
            }
        }
        /// <summary>
        ///  cbc:TransportModeCode -  dato ingresado no es valido.
        /// </summary>
        public string C2556 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2556"]);
               
            }
        }
        /// <summary>
        ///  La fecha del StartDate no debe ser menor al Today.
        /// </summary>
        public string C2557 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2557"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion en Numero de Ruc del transportista.
        /// </summary>
        public string C2558 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2558"]);
               
            }
        }
        /// <summary>
        ///  /DespatchAdvice/cac:Shipment/cac:ShipmentStage/cac:CarrierParty/cac:PartyIdentification/cbc:ID  - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C2559 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2559"]);
               
            }
        }
        /// <summary>
        ///  Transportista  no debe ser igual al remitente o destinatario.
        /// </summary>
        public string C2560 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2560"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del tipo de documento identidad del transportista.
        /// </summary>
        public string C2561 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2561"]);
               
            }
        }
        /// <summary>
        ///  /DespatchAdvice/cac:Shipment/cac:ShipmentStage/cac:CarrierParty/cac:PartyIdentification/cbc:ID@schemeID  - El dato ingresado no es valido.
        /// </summary>
        public string C2562 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2562"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de Apellido, Nombre o razon social del transportista.
        /// </summary>
        public string C2563 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2563"]);
               
            }
        }
        /// <summary>
        ///  Razon social transportista - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C2564 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2564"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del tipo de unidad de transporte.
        /// </summary>
        public string C2565 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2565"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del Numero de placa del vehículo.
        /// </summary>
        public string C2566 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2566"]);
               
            }
        }
        /// <summary>
        ///  Numero de placa del vehículo - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C2567 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2567"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion en el Numero de documento de identidad del conductor.
        /// </summary>
        public string C2568 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2568"]);
               
            }
        }
        /// <summary>
        ///  Documento identidad del conductor - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C2569 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2569"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del tipo de documento identidad del conductor.
        /// </summary>
        public string C2570 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2570"]);
               
            }
        }
        /// <summary>
        ///  cac:DriverPerson/ID@schemeID - El valor ingresado de tipo de documento identidad de conductor es incorrecto.
        /// </summary>
        public string C2571 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2571"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del Numero de licencia del conductor.
        /// </summary>
        public string C2572 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2572"]);
               
            }
        }
        /// <summary>
        ///  Numero de licencia del conductor - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C2573 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2573"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de direccion detallada de punto de llegada.
        /// </summary>
        public string C2574 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2574"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CityName.
        /// </summary>
        public string C2575 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2575"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de District.
        /// </summary>
        public string C2576 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2576"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de direccion detallada de punto de partida.
        /// </summary>
        public string C2577 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2577"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de CityName.
        /// </summary>
        public string C2578 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2578"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de District.
        /// </summary>
        public string C2579 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2579"]);
               
            }
        }
        /// <summary>
        ///  El XML No contiene el tag o no existe información de la cantidad del item.
        /// </summary>
        public string C2580 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2580"]);
               
            }
        }
        /// <summary>
        ///  No puede dar de baja "Recibos de servicios publicos" por SEE-Desde los sistemas del contribuyente
        /// </summary>
        public string C2581 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2581"]);
               
            }
        }
        /// <summary>
        ///  Solo se debe incluir el tag de Comprobante de referencia cuando se trata de una nota de credito o debito
        /// </summary>
        public string C2582 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2582"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar tipo de documento que modifica
        /// </summary>
        public string C2583 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2583"]);
               
            }
        }
        /// <summary>
        ///  El XML debe contener al menos un tributo de IGV en el /cac:SubInvoiceLine
        /// </summary>
        public string C2584 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2584"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como indicador de cargo/descuento a nivel de /cac:SubInvoiceLine no corresponde al valor esperado
        /// </summary>
        public string C2585 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2585"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de codigo de motivo de cargo/descuento a nivel de /cac:SubInvoiceLine
        /// </summary>
        public string C2586 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2586"]);
               
            }
        }
        /// <summary>
        ///  El factor de cargo/descuento a nivel de /cac:SubInvoiceLine no cumple con el formato establecido
        /// </summary>
        public string C2587 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2587"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag cac:SubInvoiceLine/cac:Allowancecharge/cbc:Amount no cumple con el formato establecido
        /// </summary>
        public string C2588 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2588"]);
               
            }
        }
        /// <summary>
        ///  El Monto base de cargo/descuento a nivel de /cac:SubInvoiceLine no cumple con el formato establecido
        /// </summary>
        public string C2589 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2589"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tag /cac:SubInvoiceLine/cac:TaxTotal/cac:TaxSubtotal/cbc:TaxableAmount no cumple el formato establecido 
        /// </summary>
        public string C2590 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2590"]);
               
            }
        }
        /// <summary>
        ///  No existe el tag cac:LegalMonetaryTotal/cbc:LineExtensionAmount
        /// </summary>
        public string C2591 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2591"]);
               
            }
        }
        /// <summary>
        ///  No existe el tag cac:LegalMonetaryTotal/cbc:TaxInclusiveAmount
        /// </summary>
        public string C2592 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2592"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio del vendedor no cumple con el formato establecido
        /// </summary>
        public string C2593 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2593"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la nota electronica no es valido
        /// </summary>
        public string C2594 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2594"]);
               
            }
        }
        /// <summary>
        ///  Falta consignar informacion del CUSPP
        /// </summary>
        public string C2595 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2595"]);
               
            }
        }
        /// <summary>
        ///  Falta consignar informacion del Periodo
        /// </summary>
        public string C2596 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2596"]);
               
            }
        }
        /// <summary>
        ///  Falta consignar información del monto de interes moratorio
        /// </summary>
        public string C2597 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2597"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue enviado fuera del plazo permitido.
        /// </summary>
        public string C2600 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2600"]);
               
            }
        }
        /// <summary>
        ///  Senor contribuyente a la fecha no se encuentra registrado ó habilitado con la condición de Agente de percepción.
        /// </summary>
        public string C2601 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2601"]);
               
            }
        }
        /// <summary>
        ///  El régimen percepción enviado no corresponde con su condición de Agente de percepción.
        /// </summary>
        public string C2602 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2602"]);
               
            }
        }
        /// <summary>
        ///  La tasa de percepción enviada no corresponde con el régimen de percepción.
        /// </summary>
        public string C2603 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2603"]);
               
            }
        }
        /// <summary>
        ///  El Cliente no puede ser el mismo que el Emisor del comprobante de percepción.
        /// </summary>
        public string C2604 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2604"]);
               
            }
        }
        /// <summary>
        ///  Número de RUC no existe.
        /// </summary>
        public string C2605 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2605"]);
               
            }
        }
        /// <summary>
        ///  Documento de identidad del Cliente no existe.
        /// </summary>
        public string C2606 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2606"]);
               
            }
        }
        /// <summary>
        ///  La moneda del importe de cobro debe ser la misma que la del documento relacionado.
        /// </summary>
        public string C2607 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2607"]);
               
            }
        }
        /// <summary>
        ///  Los montos de pago, percibidos y montos cobrados consignados para el documento relacionado no son correctos.
        /// </summary>
        public string C2608 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2608"]);
               
            }
        }
        /// <summary>
        ///  El comprobante electrónico enviado no se encuentra registrado en la SUNAT.
        /// </summary>
        public string C2609 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2609"]);
               
            }
        }
        /// <summary>
        ///  La fecha de emisión, Importe total del comprobante y la moneda del comprobante electrónico enviado no son los registrados en los Sistemas de SUNAT.
        /// </summary>
        public string C2610 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2610"]);
               
            }
        }
        /// <summary>
        ///  El comprobante electrónico no ha sido emitido al cliente.
        /// </summary>
        public string C2611 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2611"]);
               
            }
        }
        /// <summary>
        ///  La fecha de cobro debe estar entre el primer día calendario del mes al cual corresponde la fecha de emisión del comprobante de percepción o desde la fecha de emisión del comprobante relacionado.
        /// </summary>
        public string C2612 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2612"]);
               
            }
        }
        /// <summary>
        ///  El Nro. de documento con número de cobro ya se encuentra en la Relación de Documentos Relacionados agregados.
        /// </summary>
        public string C2613 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2613"]);
               
            }
        }
        /// <summary>
        ///  El Nro. de documento con el número de cobro ya se encuentra registrado como pago realizado.
        /// </summary>
        public string C2614 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2614"]);
               
            }
        }
        /// <summary>
        ///  Importe total percibido debe ser igual a la suma de los importes percibidos por cada documento relacionado.
        /// </summary>
        public string C2615 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2615"]);
               
            }
        }
        /// <summary>
        ///  Importe total cobrado debe ser igual a la suma de los importe totales cobrados por cada documento relacionado.
        /// </summary>
        public string C2616 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2616"]);
               
            }
        }
        /// <summary>
        ///  Senor contribuyente a la fecha no se encuentra registrado ó habilitado con la condición de Agente de retención.
        /// </summary>
        public string C2617 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2617"]);
               
            }
        }
        /// <summary>
        ///  El régimen retención enviado no corresponde con su condición de Agente de retención.
        /// </summary>
        public string C2618 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2618"]);
               
            }
        }
        /// <summary>
        ///  La tasa de retención enviada no corresponde con el régimen de retención.
        /// </summary>
        public string C2619 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2619"]);
               
            }
        }
        /// <summary>
        ///  El Proveedor no puede ser el mismo que el Emisor del comprobante de retención.
        /// </summary>
        public string C2620 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2620"]);
               
            }
        }
        /// <summary>
        ///  Número de RUC del Proveedor no existe.
        /// </summary>
        public string C2621 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2621"]);
               
            }
        }
        /// <summary>
        ///  La moneda del importe de pago debe ser la misma que la del documento relacionado.
        /// </summary>
        public string C2622 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2622"]);
               
            }
        }
        /// <summary>
        ///  Los montos de pago, retenidos y montos pagados consignados para el documento relacionado no son correctos.
        /// </summary>
        public string C2623 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2623"]);
               
            }
        }
        /// <summary>
        ///  El comprobante electrónico no ha sido emitido por el proveedor.
        /// </summary>
        public string C2624 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2624"]);
               
            }
        }
        /// <summary>
        ///  La fecha de pago debe estar entre el primer día calendario del mes al cual corresponde la fecha de emisión del comprobante de retención o desde la fecha de emisión del comprobante relacionado.
        /// </summary>
        public string C2625 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2625"]);
               
            }
        }
        /// <summary>
        ///  El Nro. de documento con el número de pago ya se encuentra en la Relación de Documentos Relacionados agregados.
        /// </summary>
        public string C2626 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2626"]);
               
            }
        }
        /// <summary>
        ///  El Nro. de documento con el número de pago ya se encuentra registrado como pago realizado.
        /// </summary>
        public string C2627 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2627"]);
               
            }
        }
        /// <summary>
        ///  Importe total retenido debe ser igual a la suma de los importes retenidos por cada documento relacionado.
        /// </summary>
        public string C2628 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2628"]);
               
            }
        }
        /// <summary>
        ///  Importe total pagado debe ser igual a la suma de los importes pagados por cada documento relacionado.
        /// </summary>
        public string C2629 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2629"]);
               
            }
        }
        /// <summary>
        ///  La serie o numero del documento(01) modificado por la Nota de Credito no cumple con el formato establecido para tipo codigo Nota Credito 10.
        /// </summary>
        public string C2630 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2630"]);
               
            }
        }
        /// <summary>
        ///  La serie o numero del documento(12) modificado por la Nota de Credito no cumple con el formato establecido para tipo codigo Nota Credito 10.
        /// </summary>
        public string C2631 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2631"]);
               
            }
        }
        /// <summary>
        ///  La serie o numero del documento(56) modificado por la Nota de Credito no cumple con el formato establecido para tipo codigo Nota Credito 10.
        /// </summary>
        public string C2632 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2632"]);
               
            }
        }
        /// <summary>
        ///  La serie o numero del documento(03) modificado por la Nota de Credito no cumple con el formato establecido para tipo codigo Nota Credito 10.
        /// </summary>
        public string C2633 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2633"]);
               
            }
        }
        /// <summary>
        ///  ReferenceID - El dato ingresado debe indicar serie correcta del documento al que se relaciona la Nota tipo 10.
        /// </summary>
        public string C2634 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2634"]);
               
            }
        }
        /// <summary>
        ///  Debe existir DocumentTypeCode de Otros documentos relacionados con valor 99 para un tipo codigo Nota Credito 10.
        /// </summary>
        public string C2635 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2635"]);
               
            }
        }
        /// <summary>
        ///  No existe datos del ID de los documentos relacionados con valor 99 para un tipo codigo Nota Credito 10.
        /// </summary>
        public string C2636 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2636"]);
               
            }
        }
        /// <summary>
        ///  No existe datos del DocumentType de los documentos relacionados con valor 99 para un tipo codigo Nota Credito 10.
        /// </summary>
        public string C2637 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2637"]);
               
            }
        }
        /// <summary>
        ///  Si tiene operaciones de un tributo en alguna línea, debe consignar el tag del total del tributo 
        /// </summary>
        public string C2638 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2638"]);
               
            }
        }
        /// <summary>
        ///  Operacion gratuita, solo debe consignar un monto referencial
        /// </summary>
        public string C2640 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2640"]);
               
            }
        }
        /// <summary>
        ///  Operacion gratuita,  debe consignar Total valor venta - operaciones gratuitas  mayor a cero
        /// </summary>
        public string C2641 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2641"]);
               
            }
        }
        /// <summary>
        ///  Operaciones de exportacion, deben consignar Tipo Afectacion igual a 40
        /// </summary>
        public string C2642 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2642"]);
               
            }
        }
        /// <summary>
        ///  Factura de operacion sujeta IVAP debe consignar Monto de impuestos por item
        /// </summary>
        public string C2643 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2643"]);
               
            }
        }
        /// <summary>
        ///  Comprobante operacion sujeta IVAP solo debe tener ítems con código de afectación del IGV igual a 17
        /// </summary>
        public string C2644 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2644"]);
               
            }
        }
        /// <summary>
        ///  Factura de operacion sujeta a IVAP debe consignar items con codigo de tributo 1000
        /// </summary>
        public string C2645 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2645"]);
               
            }
        }
        /// <summary>
        ///  Factura de operacion sujeta a IVAP debe consignar  items con nombre  de tributo IVAP
        /// </summary>
        public string C2646 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2646"]);
               
            }
        }
        /// <summary>
        ///  Código tributo  UN/ECE debe ser VAT
        /// </summary>
        public string C2647 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2647"]);
               
            }
        }
        /// <summary>
        ///  Factura de operacion sujeta al IVAP, solo puede consignar informacion para operacion gravadas
        /// </summary>
        public string C2648 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2648"]);
               
            }
        }
        /// <summary>
        ///  Operación sujeta al IVAP, debe consignar monto en total operaciones gravadas
        /// </summary>
        public string C2649 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2649"]);
               
            }
        }
        /// <summary>
        ///  Factura de operacion sujeta al IVAP , no debe consignar valor para ISC o debe ser 0
        /// </summary>
        public string C2650 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2650"]);
               
            }
        }
        /// <summary>
        ///  Factura de operacion sujeta al IVAP , no debe consignar valor para IGV o debe ser 0
        /// </summary>
        public string C2651 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2651"]);
               
            }
        }
        /// <summary>
        ///  Factura de operacion sujeta al IVAP , debe registrar mensaje 2007
        /// </summary>
        public string C2652 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2652"]);
               
            }
        }
        /// <summary>
        ///  Servicios prestados No domiciliados. Total IGV debe se mayor a cero
        /// </summary>
        public string C2653 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2653"]);
               
            }
        }
        /// <summary>
        ///  Servicios prestados No domiciliados. Código tributo a consignar debe ser 1000
        /// </summary>
        public string C2654 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2654"]);
               
            }
        }
        /// <summary>
        ///  Servicios prestados No domiciliados. El código de afectación debe ser 40
        /// </summary>
        public string C2655 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2655"]);
               
            }
        }
        /// <summary>
        ///  Servicios prestados No domiciliados. Código tributo  UN/ECE debe ser VAT
        /// </summary>
        public string C2656 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2656"]);
               
            }
        }
        /// <summary>
        ///  El Nro. de documento ya fué utilizado en la emision de CPE.
        /// </summary>
        public string C2657 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2657"]);
               
            }
        }
        /// <summary>
        ///  El Nro. de documento no se ha informado o no se encuentra en estado Revertido
        /// </summary>
        public string C2658 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2658"]);
               
            }
        }
        /// <summary>
        ///  La fecha de cobro de cada documento relacionado deben ser del mismo Periodo (mm/aaaa), asimismo estas fechas podrán ser menores o iguales a la fecha de emisión del comprobante de percepción
        /// </summary>
        public string C2659 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2659"]);
               
            }
        }
        /// <summary>
        ///  Los datos del CPE revertido no corresponden a los registrados en la SUNAT
        /// </summary>
        public string C2660 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2660"]);
               
            }
        }
        /// <summary>
        ///  La fecha de cobro de cada documento relacionado deben ser del mismo Periodo (mm/aaaa), asimismo estas fechas podrán ser menores o iguales a la fecha de emisión del comprobante de retencion
        /// </summary>
        public string C2661 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2661"]);
               
            }
        }
        /// <summary>
        ///  El Nro. de documento ya fué utilizado en la emision de CRE.
        /// </summary>
        public string C2662 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2662"]);
               
            }
        }
        /// <summary>
        ///  El documento indicado no existe no puede ser modificado
        /// </summary>
        public string C2663 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2663"]);
               
            }
        }
        /// <summary>
        ///  El calculo de la base imponible de percepción y el monto de la percepción no coincide con el monto total informado.
        /// </summary>
        public string C2664 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2664"]);
               
            }
        }
        /// <summary>
        ///  El contribuyente no se encuentra autorizado a emitir Tickets
        /// </summary>
        public string C2665 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2665"]);
               
            }
        }
        /// <summary>
        ///  Las percepciones son solo válidas para boletas de venta al contado.
        /// </summary>
        public string C2666 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2666"]);
               
            }
        }
        /// <summary>
        ///  Importe total percibido debe ser igual a la suma de los importes percibidos por cada documento relacionado.
        /// </summary>
        public string C2667 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2667"]);
               
            }
        }
        /// <summary>
        ///  Importe total cobrado debe ser igual a la suma de los importes cobrados por cada documento relacionado.
        /// </summary>
        public string C2668 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2668"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TotalInvoiceAmount debe ser numérico mayor a cero
        /// </summary>
        public string C2669 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2669"]);
               
            }
        }
        /// <summary>
        ///  La razón social no corresponde al ruc informado.
        /// </summary>
        public string C2670 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2670"]);
               
            }
        }
        /// <summary>
        ///  La fecha de generación de la comunicación/resumen debe ser mayor o igual a la fecha de generación/emisión de los documentos
        /// </summary>
        public string C2671 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2671"]);
               
            }
        }
        /// <summary>
        ///  La fecha de generación del documento revertido debe ser menor o igual a la fecha actual.
        /// </summary>
        public string C2672 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2672"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado no cumple con el formato RR-fecha-correlativo.
        /// </summary>
        public string C2673 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2673"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado  no cumple con el formato de DocumentSerialID, para DocumentTypeCode con valor 20.
        /// </summary>
        public string C2674 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2674"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado  no cumple con el formato de DocumentSerialID, para DocumentTypeCode con valor 40.
        /// </summary>
        public string C2675 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2675"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de RUC del emisor
        /// </summary>
        public string C2676 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2676"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como número de RUC del emisor es incorrecto
        /// </summary>
        public string C2677 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2677"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del tipo de documento del emisor
        /// </summary>
        public string C2678 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2678"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de documento de identidad del cliente
        /// </summary>
        public string C2679 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2679"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como documento de identidad del cliente es incorrecto
        /// </summary>
        public string C2680 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2680"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del tipo de documento del cliente
        /// </summary>
        public string C2681 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2681"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como tipo de documento del cliente es incorrecto
        /// </summary>
        public string C2682 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2682"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe total Percibido
        /// </summary>
        public string C2683 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2683"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda del Importe total Percibido
        /// </summary>
        public string C2684 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2684"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Importe total Percibido debe ser PEN
        /// </summary>
        public string C2685 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2685"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe total Cobrado
        /// </summary>
        public string C2686 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2686"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en SUNATTotalCashed debe ser numérico mayor a cero
        /// </summary>
        public string C2687 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2687"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda del Importe total Cobrado
        /// </summary>
        public string C2689 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2689"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Importe total Cobrado debe ser PEN
        /// </summary>
        public string C2690 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2690"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del tipo de documento relacionado
        /// </summary>
        public string C2691 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2691"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento relacionado no es válido
        /// </summary>
        public string C2692 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2692"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de documento relacionado
        /// </summary>
        public string C2693 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2693"]);
               
            }
        }
        /// <summary>
        ///  El número de documento relacionado no está permitido o no es valido
        /// </summary>
        public string C2694 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2694"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe total documento Relacionado
        /// </summary>
        public string C2695 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2695"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el importe total documento relacionado debe ser numérico mayor a cero
        /// </summary>
        public string C2696 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2696"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de cobro
        /// </summary>
        public string C2697 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2697"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el número de cobro no es válido
        /// </summary>
        public string C2698 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2698"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe del cobro
        /// </summary>
        public string C2699 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2699"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el Importe del cobro debe ser numérico mayor a cero
        /// </summary>
        public string C2700 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2700"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda del documento Relacionado
        /// </summary>
        public string C2701 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2701"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la fecha de cobro del documento Relacionado
        /// </summary>
        public string C2702 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2702"]);
               
            }
        }
        /// <summary>
        ///  La fecha de cobro del documento relacionado no es válido
        /// </summary>
        public string C2703 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2703"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe percibido
        /// </summary>
        public string C2704 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2704"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el Importe percibido debe ser numérico mayor a cero
        /// </summary>
        public string C2705 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2705"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda de importe percibido
        /// </summary>
        public string C2706 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2706"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda de importe percibido debe ser PEN
        /// </summary>
        public string C2707 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2707"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la Fecha de Percepción
        /// </summary>
        public string C2708 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2708"]);
               
            }
        }
        /// <summary>
        ///  La fecha de percepción no es válido
        /// </summary>
        public string C2709 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2709"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Monto total a cobrar
        /// </summary>
        public string C2710 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2710"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el Monto total a cobrar debe ser numérico mayor a cero
        /// </summary>
        public string C2711 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2711"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda del Monto total a cobrar
        /// </summary>
        public string C2712 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2712"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Monto total a cobrar debe ser PEN
        /// </summary>
        public string C2713 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2713"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda de referencia para el tipo de cambio no es válido
        /// </summary>
        public string C2714 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2714"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda objetivo para la Tasa de Cambio debe ser PEN
        /// </summary>
        public string C2715 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2715"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tipo de cambio debe ser numérico mayor a cero
        /// </summary>
        public string C2716 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2716"]);
               
            }
        }
        /// <summary>
        ///  La fecha de cambio no es válido
        /// </summary>
        public string C2717 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2717"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del documento Relacionado no es válido
        /// </summary>
        public string C2718 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2718"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda de referencia para el tipo de cambio
        /// </summary>
        public string C2719 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2719"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda objetivo para la Tasa de Cambio
        /// </summary>
        public string C2720 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2720"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del tipo de cambio
        /// </summary>
        public string C2721 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2721"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la fecha de cambio
        /// </summary>
        public string C2722 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2722"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de documento de identidad del proveedor
        /// </summary>
        public string C2723 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2723"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como documento de identidad del proveedor es incorrecto
        /// </summary>
        public string C2724 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2724"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe total Retenido
        /// </summary>
        public string C2725 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2725"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda del Importe total Retenido
        /// </summary>
        public string C2726 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2726"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda del Importe total Retenido
        /// </summary>
        public string C2727 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2727"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Importe total Retenido debe ser PEN
        /// </summary>
        public string C2728 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2728"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe total Pagado
        /// </summary>
        public string C2729 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2729"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en SUNATTotalPaid debe ser numérico mayor a cero
        /// </summary>
        public string C2730 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2730"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda del Importe total Pagado
        /// </summary>
        public string C2731 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2731"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Importe total Pagado debe ser PEN
        /// </summary>
        public string C2732 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2732"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de pago
        /// </summary>
        public string C2733 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2733"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el número de pago no es válido
        /// </summary>
        public string C2734 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2734"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe del pago
        /// </summary>
        public string C2735 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2735"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el Importe del pago debe ser numérico mayor a cero
        /// </summary>
        public string C2736 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2736"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la fecha de pago del documento Relacionado
        /// </summary>
        public string C2737 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2737"]);
               
            }
        }
        /// <summary>
        ///  La fecha de pago del documento relacionado no es válido
        /// </summary>
        public string C2738 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2738"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe retenido
        /// </summary>
        public string C2739 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2739"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el Importe retenido debe ser numérico mayor a cero
        /// </summary>
        public string C2740 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2740"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la moneda de importe retenido
        /// </summary>
        public string C2741 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2741"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda de importe retenido debe ser PEN
        /// </summary>
        public string C2742 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2742"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la Fecha de Retención
        /// </summary>
        public string C2743 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2743"]);
               
            }
        }
        /// <summary>
        ///  La fecha de retención no es válido
        /// </summary>
        public string C2744 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2744"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Importe total a pagar (neto)
        /// </summary>
        public string C2745 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2745"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el Importe total a pagar (neto) debe ser numérico mayor a cero
        /// </summary>
        public string C2746 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2746"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la Moneda del monto neto pagado
        /// </summary>
        public string C2747 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2747"]);
               
            }
        }
        /// <summary>
        ///  El valor de la Moneda del monto neto pagado debe ser PEN
        /// </summary>
        public string C2748 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2748"]);
               
            }
        }
        /// <summary>
        ///  La moneda de referencia para el tipo de cambio debe ser la misma que la del documento relacionado
        /// </summary>
        public string C2749 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2749"]);
               
            }
        }
        /// <summary>
        ///  El comprobante que desea revertir no existe.
        /// </summary>
        public string C2750 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2750"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue informado previamente en una reversión.
        /// </summary>
        public string C2751 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2751"]);
               
            }
        }
        /// <summary>
        ///  El número de ítem no puede estar duplicado.
        /// </summary>
        public string C2752 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2752"]);
               
            }
        }
        /// <summary>
        ///  No debe existir mas de una referencia en guía dada de baja.
        /// </summary>
        public string C2753 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2753"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento de la guia dada de baja es incorrecto (tipo documento = 09).
        /// </summary>
        public string C2754 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2754"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento relacionado es incorrecto (ver catalogo nro 21).
        /// </summary>
        public string C2755 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2755"]);
               
            }
        }
        /// <summary>
        ///  El numero de documento relacionado no cumple con el estandar.
        /// </summary>
        public string C2756 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2756"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de documento de identidad del destinatario.
        /// </summary>
        public string C2757 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2757"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como numero de documento de identidad del destinatario no cumple con el estandar.
        /// </summary>
        public string C2758 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2758"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del tipo de documento del destinatario.
        /// </summary>
        public string C2759 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2759"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como tipo de documento del destinatario es incorrecto.
        /// </summary>
        public string C2760 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2760"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del nombre o razon social del destinatario.
        /// </summary>
        public string C2761 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2761"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como tipo de documento del nombre o razon social del destinatario es incorrecto.
        /// </summary>
        public string C2762 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2762"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del número de documento de identidad del tercero relacionado.
        /// </summary>
        public string C2763 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2763"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como numero de documento de identidad del tercero relacionado no cumple con el estandar.
        /// </summary>
        public string C2764 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2764"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del tipo de documento del tercero relacionado.
        /// </summary>
        public string C2765 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2765"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como tipo de documento del tercero relacionado es incorrecto.
        /// </summary>
        public string C2766 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2766"]);
               
            }
        }
        /// <summary>
        ///  Para exportación, el XML no contiene el tag o no existe informacion del numero de DAM.
        /// </summary>
        public string C2767 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2767"]);
               
            }
        }
        /// <summary>
        ///  Para importación, el XML no contiene el tag o no existe informacion del numero de manifiesto de carga o numero de DAM.
        /// </summary>
        public string C2768 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2768"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como numero de DAM no cumple con el estandar.
        /// </summary>
        public string C2769 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2769"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como numero de manifiesto de carga no cumple con el estandar.
        /// </summary>
        public string C2770 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2770"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion en numero de bultos o pallets obligatorio para importación.
        /// </summary>
        public string C2771 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2771"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como numero de bultos o pallets no cumple con el estandar.
        /// </summary>
        public string C2772 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2772"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como modalidad de transporte no es correcto.
        /// </summary>
        public string C2773 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2773"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene datos de vehiculo o datos de conductores para una operación de transporte publico completo.
        /// </summary>
        public string C2774 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2774"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion del codigo de ubigeo.
        /// </summary>
        public string C2775 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2775"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como codigo de ubigeo no cumple con el estandar.
        /// </summary>
        public string C2776 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2776"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion de direccion completa y detallada.
        /// </summary>
        public string C2777 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2777"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como direccion completa y detallada no cumple con el estandar.
        /// </summary>
        public string C2778 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2778"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion de cantida de items
        /// </summary>
        public string C2779 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2779"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en cantidad de items no cumple con el estandar
        /// </summary>
        public string C2780 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2780"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe informacion de descripcion del items
        /// </summary>
        public string C2781 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2781"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en descripcion del items no cumple con el estandar
        /// </summary>
        public string C2782 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2782"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en codigo del item no cumple con el estandar.
        /// </summary>
        public string C2783 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2783"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar codigo de regimen de percepcion (sac:AdditionalMonetaryTotal/cbc:ID@schemeID).
        /// </summary>
        public string C2784 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2784"]);
               
            }
        }
        /// <summary>
        ///  sac:ReferenceAmount es obligatorio y mayor a cero cuando sac:AdditionalMonetaryTotal/cbc:ID es 2001
        /// </summary>
        public string C2785 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2785"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en sac:ReferenceAmount no cumple con el formato establecido
        /// </summary>
        public string C2786 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2786"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar la moneda para la Base imponible percepcion.
        /// </summary>
        public string C2787 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2787"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en moneda debe ser PEN
        /// </summary>
        public string C2788 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2788"]);
               
            }
        }
        /// <summary>
        ///  cbc:PayableAmount es obligatorio y mayor a cero cuando sac:AdditionalMonetaryTotal/cbc:ID es 2001
        /// </summary>
        public string C2789 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2789"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en cbc:PayableAmount no cumple con el formato establecido
        /// </summary>
        public string C2790 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2790"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar la moneda para el Monto de la percepcion (cbc:PayableAmount/@currencyID)
        /// </summary>
        public string C2791 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2791"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en moneda del monto de cargo/descuento para percepcion debe ser PEN
        /// </summary>
        public string C2792 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2792"]);
               
            }
        }
        /// <summary>
        ///  sac:TotalAmount es obligatorio y mayor a cero cuando sac:AdditionalMonetaryTotal/cbc:ID es 2001
        /// </summary>
        public string C2793 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2793"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en sac:TotalAmount no cumple con el formato establecido
        /// </summary>
        public string C2794 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2794"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar la moneda para el Monto Total incluido la percepcion (sac:TotalAmount/@currencyID)
        /// </summary>
        public string C2795 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2795"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en sac:TotalAmount/@currencyID debe ser PEN
        /// </summary>
        public string C2796 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2796"]);
               
            }
        }
        /// <summary>
        ///  El Monto de percepcion no puede ser mayor al importe total del comprobante.
        /// </summary>
        public string C2797 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2797"]);
               
            }
        }
        /// <summary>
        ///  El Monto de percepcion no tiene el valor correcto según el tipo de percepcion.
        /// </summary>
        public string C2798 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2798"]);
               
            }
        }
        /// <summary>
        ///  sac:TotalAmount no tiene el valor correcto cuando sac:AdditionalMonetaryTotal/cbc:ID es 2001
        /// </summary>
        public string C2799 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2799"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el tipo de documento de identidad del receptor no esta permitido.
        /// </summary>
        public string C2800 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2800"]);
               
            }
        }
        /// <summary>
        ///  El DNI ingresado no cumple con el estandar.
        /// </summary>
        public string C2801 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2801"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como numero de documento de identidad del receptor no cumple con el formato establecido
        /// </summary>
        public string C2802 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2802"]);
               
            }
        }
        /// <summary>
        ///  ID - No cumple con el formato UUID
        /// </summary>
        public string C2803 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2803"]);
               
            }
        }
        /// <summary>
        ///  La fecha de recepcion del comprobante por OSE, no debe de ser mayor a la fecha de recepcion de SUNAT
        /// </summary>
        public string C2804 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2804"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag IssueTime
        /// </summary>
        public string C2805 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2805"]);
               
            }
        }
        /// <summary>
        ///  IssueTime - El dato ingresado  no cumple con el patrón hh:mm:ss.sssss
        /// </summary>
        public string C2806 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2806"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ResponseDate
        /// </summary>
        public string C2807 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2807"]);
               
            }
        }
        /// <summary>
        ///  ResponseDate - El dato ingresado  no cumple con el patrón YYYY-MM-DD
        /// </summary>
        public string C2808 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2808"]);
               
            }
        }
        /// <summary>
        ///  La fecha de recepcion del comprobante por OSE, no debe de ser mayor a la fecha de comprobacion del OSE
        /// </summary>
        public string C2809 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2809"]);
               
            }
        }
        /// <summary>
        ///  La fecha de comprobacion del comprobante en OSE no puede ser mayor a la fecha de recepcion en SUNAT
        /// </summary>
        public string C2810 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2810"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ResponseTime
        /// </summary>
        public string C2811 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2811"]);
               
            }
        }
        /// <summary>
        ///  ResponseTime - El dato ingresado  no cumple con el patrón hh:mm:ss.sssss
        /// </summary>
        public string C2812 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2812"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Número de documento de identificación del que envía el CPE (emisor o PSE)
        /// </summary>
        public string C2813 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2813"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Número de documento de identificación del que envía el CPE (emisor o PSE) es incorrecto
        /// </summary>
        public string C2814 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2814"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo schemeID o no existe información del Tipo de documento de identidad del que envía el CPE (emisor o PSE)
        /// </summary>
        public string C2816 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2816"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de documento de identidad del que envía el CPE (emisor o PSE) es incorrecto
        /// </summary>
        public string C2817 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2817"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo schemeAgencyName o no existe información del Tipo de documento de identidad del que envía el CPE (emisor o PSE)
        /// </summary>
        public string C2818 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2818"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el atributo schemeAgencyName del Tipo de documento de identidad del que envía el CPE (emisor o PSE) es incorrecto
        /// </summary>
        public string C2819 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2819"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo schemeURI o no existe información del Tipo de documento de identidad del que envía el CPE (emisor o PSE)
        /// </summary>
        public string C2820 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2820"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el atributo schemeURI del Tipo de documento de identidad del que envía el CPE (emisor o PSE) es incorrecto
        /// </summary>
        public string C2821 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2821"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Número de documento de identificación del OSE
        /// </summary>
        public string C2822 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2822"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Número de documento de identificación del OSE es incorrecto
        /// </summary>
        public string C2823 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2823"]);
               
            }
        }
        /// <summary>
        ///  El certificado digital con el que se firma el CDR OSE no corresponde con el RUC del OSE informado
        /// </summary>
        public string C2824 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2824"]);
               
            }
        }
        /// <summary>
        ///  El Número de documento de identificación del OSE informado no esta registrado en el padron.
        /// </summary>
        public string C2825 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2825"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo schemeID o no existe información del Tipo de documento de identidad del OSE
        /// </summary>
        public string C2826 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2826"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de documento de identidad del OSE es incorrecto
        /// </summary>
        public string C2827 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2827"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo schemeAgencyName o no existe información del Tipo de documento de identidad del OSE
        /// </summary>
        public string C2828 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2828"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el atributo schemeAgencyName del Tipo de documento de identidad del OSE es incorrecto
        /// </summary>
        public string C2829 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2829"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo schemeURI o no existe información del Tipo de documento de identidad del OSE
        /// </summary>
        public string C2830 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2830"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el atributo schemeURI del Tipo de documento de identidad del OSE es incorrecto
        /// </summary>
        public string C2831 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2831"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Código de Respuesta
        /// </summary>
        public string C2832 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2832"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Código de Respuesta es incorrecto
        /// </summary>
        public string C2833 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2833"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo listAgencyName o no existe información del Código de Respuesta
        /// </summary>
        public string C2834 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2834"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el atributo listAgencyName del Código de Respuesta es incorrecto
        /// </summary>
        public string C2835 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2835"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la Descripción de la Respuesta
        /// </summary>
        public string C2836 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2836"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Descripción de la Respuesta es incorrecto
        /// </summary>
        public string C2837 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2837"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Código de observación es incorrecto
        /// </summary>
        public string C2838 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2838"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo listURI o no existe información del Código de observación
        /// </summary>
        public string C2839 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2839"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el atributo listURI del Código de observación es incorrecto
        /// </summary>
        public string C2840 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2840"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la Descripción de la observación
        /// </summary>
        public string C2841 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2841"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Descripción de la observación es incorrecto
        /// </summary>
        public string C2842 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2842"]);
               
            }
        }
        /// <summary>
        ///  Se ha encontrado mas de una Descripción de la observación, tag cac:Response/cac:Status/cbc:StatusReason
        /// </summary>
        public string C2843 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2843"]);
               
            }
        }
        /// <summary>
        ///  No se encontro el tag cbc:StatusReasonCode cuando ingresó la Descripción de la observación
        /// </summary>
        public string C2844 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2844"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene mas de un elemento cac:DocumentReference
        /// </summary>
        public string C2845 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2845"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene informacion en el tag cac:DocumentReference/cbc:ID
        /// </summary>
        public string C2846 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2846"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Serie y número del comprobante no corresponde con el del comprobante
        /// </summary>
        public string C2848 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2848"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la Fecha de emisión del comprobante
        /// </summary>
        public string C2849 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2849"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Fecha de emisión del comprobante no corresponde con el del comprobante
        /// </summary>
        public string C2851 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2851"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la Hora de emisión del comprobante
        /// </summary>
        public string C2852 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2852"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Hora de emisión del comprobante no cumple con el patrón hh:mm:ss.sssss
        /// </summary>
        public string C2853 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2853"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Hora de emisión del comprobante no corresponde con el del comprobante
        /// </summary>
        public string C2854 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2854"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Tipo de comprobante
        /// </summary>
        public string C2855 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2855"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de comprobante es incorrecto
        /// </summary>
        public string C2856 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2856"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de comprobante no corresponde con el del comprobante
        /// </summary>
        public string C2857 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2857"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Hash del comprobante
        /// </summary>
        public string C2858 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2858"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Hash del comprobante es incorrecto
        /// </summary>
        public string C2859 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2859"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Hash del comprobante no corresponde con el del comprobante
        /// </summary>
        public string C2860 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2860"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Número de documento de identificación del emisor
        /// </summary>
        public string C2861 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2861"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Número de documento de identificación del emisor es incorrecto
        /// </summary>
        public string C2862 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2862"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Número de documento de identificación del emisor no corresponde con el del comprobante
        /// </summary>
        public string C2863 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2863"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del Tipo de documento de identidad del emisor
        /// </summary>
        public string C2864 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2864"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de documento de identidad del emisor es incorrecto
        /// </summary>
        public string C2865 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2865"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de documento de identidad del emisor no corresponde con el del comprobante
        /// </summary>
        public string C2866 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2866"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Número de documento de identificación del receptor
        /// </summary>
        public string C2867 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2867"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Número de documento de identificación del receptor es incorrecto
        /// </summary>
        public string C2868 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2868"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Número de documento de identificación del receptor no corresponde con el del comprobante
        /// </summary>
        public string C2869 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2869"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del Tipo de documento de identidad del receptor
        /// </summary>
        public string C2870 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2870"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de documento de identidad del receptor es incorrecto
        /// </summary>
        public string C2871 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2871"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como Tipo de documento de identidad del receptor no corresponde con el del comprobante
        /// </summary>
        public string C2872 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2872"]);
               
            }
        }
        /// <summary>
        ///  El PSE informado no se encuentra vinculado con el  emisor del comprobante en la fecha de comprobación
        /// </summary>
        public string C2873 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2873"]);
               
            }
        }
        /// <summary>
        ///  El Número de documento de identificación del OSE informado no se encuentra vinculado al emisor del comprobante en la fecha de recepcion en SUNAT
        /// </summary>
        public string C2874 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2874"]);
               
            }
        }
        /// <summary>
        ///  ID - El dato ingresado no cumple con el formato R#-fecha-correlativo
        /// </summary>
        public string C2875 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2875"]);
               
            }
        }
        /// <summary>
        ///  La fecha de recepción del comprobante por OSE debe ser mayor a la fecha de emisión del comprobante enviado
        /// </summary>
        public string C2876 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2876"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio ingresar el peso bruto total de la guía
        /// </summary>
        public string C2880 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2880"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio indicar la unidad de medida del Peso Total de la guía
        /// </summary>
        public string C2881 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2881"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio indicar la unidad de medida del ítem
        /// </summary>
        public string C2883 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2883"]);
               
            }
        }
        /// <summary>
        ///  Los comprobantes modificados por la nota deben ser del mismo tipo
        /// </summary>
        public string C2884 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2884"]);
               
            }
        }
        /// <summary>
        ///  La fecha de emisión de la nota debe ser mayor o igual a la fecha de emisión de los documentos que modifica
        /// </summary>
        public string C2885 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2885"]);
               
            }
        }
        /// <summary>
        ///  La tasa de percepción no existe en el catálogo
        /// </summary>
        public string C2891 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2891"]);
               
            }
        }
        /// <summary>
        ///  El valor del tag no cumple con el formato establecido
        /// </summary>
        public string C2892 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2892"]);
               
            }
        }
        /// <summary>
        ///  El valor no cumple con el formato establecido o es menor o igual a cero (0)
        /// </summary>
        public string C2893 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2893"]);
               
            }
        }
        /// <summary>
        ///  El valor del tag no cumple con el formato establecido
        /// </summary>
        public string C2894 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2894"]);
               
            }
        }
        /// <summary>
        ///  El valor no cumple con el formato establecido o es menor o igual a cero (0)
        /// </summary>
        public string C2895 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2895"]);
               
            }
        }
        /// <summary>
        ///  El código ingresado como estado del ítem no existe en el catálogo
        /// </summary>
        public string C2896 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2896"]);
               
            }
        }
        /// <summary>
        ///  El valor no cumple con el formato establecido o es menor o igual a cero (0)
        /// </summary>
        public string C2897 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2897"]);
               
            }
        }
        /// <summary>
        ///  Para los tipos de seguro 1 y 2, debe consignar el numero de poliza, la fecha de cobertura y el monto asegurado
        /// </summary>
        public string C2898 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2898"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de seguro 3 - Otros debe consignar el numero de poliza
        /// </summary>
        public string C2899 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2899"]);
               
            }
        }
        /// <summary>
        ///  El Número de comprobante de fin de rango debe ser igual o mayor al de inicio
        /// </summary>
        public string C2900 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2900"]);
               
            }
        }
        /// <summary>
        ///  El nombre comercial del emisor no cumple con el formato establecido
        /// </summary>
        public string C2901 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2901"]);
               
            }
        }
        /// <summary>
        ///  La urbanización del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C2902 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2902"]);
               
            }
        }
        /// <summary>
        ///  La provincia del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C2903 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2903"]);
               
            }
        }
        /// <summary>
        ///  El departamento del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C2904 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2904"]);
               
            }
        }
        /// <summary>
        ///  El distrito del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C2905 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2905"]);
               
            }
        }
        /// <summary>
        ///  El nombre comercial del proveedor no cumple con el formato establecido
        /// </summary>
        public string C2906 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2906"]);
               
            }
        }
        /// <summary>
        ///  La urbanización del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C2907 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2907"]);
               
            }
        }
        /// <summary>
        ///  La provincia del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C2908 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2908"]);
               
            }
        }
        /// <summary>
        ///  El departamento del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C2909 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2909"]);
               
            }
        }
        /// <summary>
        ///  El distrito del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C2910 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2910"]);
               
            }
        }
        /// <summary>
        ///  El nombre comercial del cliente no cumple con el formato establecido
        /// </summary>
        public string C2911 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2911"]);
               
            }
        }
        /// <summary>
        ///  La urbanización del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C2912 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2912"]);
               
            }
        }
        /// <summary>
        ///  La provincia del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C2913 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2913"]);
               
            }
        }
        /// <summary>
        ///  El departamento del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C2914 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2914"]);
               
            }
        }
        /// <summary>
        ///  El distrito del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C2915 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2915"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C2916 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2916"]);
               
            }
        }
        /// <summary>
        ///  Debe corresponder a algún valor válido establecido en el catálogo 13
        /// </summary>
        public string C2917 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2917"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C2918 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2918"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C2919 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2919"]);
               
            }
        }
        /// <summary>
        ///  Dato no cumple con formato de acuerdo al tipo de documento
        /// </summary>
        public string C2920 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2920"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar el detalle el tipo de servicio público
        /// </summary>
        public string C2921 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2921"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no se encuentra en el catálogo
        /// </summary>
        public string C2922 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2922"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar el código de servicios de telecomunicaciones para el tipo servicio público informado
        /// </summary>
        public string C2923 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2923"]);
               
            }
        }
        /// <summary>
        ///  Sólo enviar información para el tipos de servicios públicos 5
        /// </summary>
        public string C2924 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2924"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no se encuentra en el catálogo
        /// </summary>
        public string C2925 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2925"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar el número del suministro para el tipo servicio público informado
        /// </summary>
        public string C2926 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2926"]);
               
            }
        }
        /// <summary>
        ///  Comprobante de Servicio Publico no se encuenta registrado en sunat
        /// </summary>
        public string C2927 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2927"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no cumple con el tipo y longitud esperada
        /// </summary>
        public string C2928 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2928"]);
               
            }
        }
        /// <summary>
        ///  Debe remitir información del número de teléfono para el código de servicios de telecomunicaciones informado
        /// </summary>
        public string C2929 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2929"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la Nota de debito debe ser Servicio Publico electronico
        /// </summary>
        public string C2930 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2930"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no cumple con el tipo y longitud esperada
        /// </summary>
        public string C2931 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2931"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar el código de tarifa contratada para el tipo servicio público informado
        /// </summary>
        public string C2932 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2932"]);
               
            }
        }
        /// <summary>
        ///  Sólo enviar información para el tipos de servicios públicos 1 o 2
        /// </summary>
        public string C2933 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2933"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no se encuentra en el catálogo
        /// </summary>
        public string C2934 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2934"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar la unidad de medida
        /// </summary>
        public string C2935 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2935"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como unidad de medida no corresponde al valor esperado
        /// </summary>
        public string C2936 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2936"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar el detalle de la potencia contratada
        /// </summary>
        public string C2937 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2937"]);
               
            }
        }
        /// <summary>
        ///  Sólo enviar información para el tipo de servicios público 1
        /// </summary>
        public string C2938 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2938"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no cumple con el tipo y longitud esperada
        /// </summary>
        public string C2939 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2939"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar el tipo de medidor 
        /// </summary>
        public string C2940 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2940"]);
               
            }
        }
        /// <summary>
        ///  Sólo enviar información para el tipo de servicios público 1
        /// </summary>
        public string C2941 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2941"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no se encuentra en el catálogo
        /// </summary>
        public string C2942 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2942"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio informar el número del medidor
        /// </summary>
        public string C2943 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2943"]);
               
            }
        }
        /// <summary>
        ///  Sólo enviar información para el tipos de servicios públicos 1 o 2
        /// </summary>
        public string C2944 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2944"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no cumple con el tipo y longitud esperada
        /// </summary>
        public string C2945 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2945"]);
               
            }
        }
        /// <summary>
        ///  Debe informar el consumo del periodo
        /// </summary>
        public string C2946 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2946"]);
               
            }
        }
        /// <summary>
        ///  No existe el detalle del número del medidor
        /// </summary>
        public string C2947 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2947"]);
               
            }
        }
        /// <summary>
        ///  Sólo enviar información para el tipos de servicios públicos 1 o 2
        /// </summary>
        public string C2948 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2948"]);
               
            }
        }
        /// <summary>
        ///  El impuesto ICBPER no se encuentra vigente
        /// </summary>
        public string C2949 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2949"]);
               
            }
        }
        /// <summary>
        ///  El comprobante ha sido presentado fuera de plazo
        /// </summary>
        public string C2950 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2950"]);
               
            }
        }
        /// <summary>
        ///  Sólo enviar información para el tipos de servicios públicos 1 o 2
        /// </summary>
        public string C2951 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2951"]);
               
            }
        }
        /// <summary>
        ///  El valor del Tag no cumple con el tipo y longitud esperada
        /// </summary>
        public string C2952 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2952"]);
               
            }
        }
        /// <summary>
        ///  Es obligatorio indicar la unidad de medida del ítem
        /// </summary>
        public string C2953 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2953"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como codigo de motivo de cargo/descuento por linea no es valido (catalogo 53)
        /// </summary>
        public string C2954 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2954"]);
               
            }
        }
        /// <summary>
        ///  El formato ingresado en el tag cac:InvoiceLine/cac:Allowancecharge/cbc:Amount no cumple con el formato establecido
        /// </summary>
        public string C2955 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2955"]);
               
            }
        }
        /// <summary>
        ///  El Monto total de impuestos es obligatorio
        /// </summary>
        public string C2956 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2956"]);
               
            }
        }
        /// <summary>
        ///  El comprobante no puede ser dado de baja por exceder el plazo desde su fecha de emision
        /// </summary>
        public string C2957 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2957"]);
               
            }
        }
        /// <summary>
        ///  El comprobante no puede ser dado de baja por exceder el plazo desde su fecha de recepcion
        /// </summary>
        public string C2958 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2958"]);
               
            }
        }
        /// <summary>
        ///  El valor del atributo del tag cac:TaxTotal/cac:TaxSubtotal/cac:TaxCategory/cbc:ID/ no corresponde al esperado.
        /// </summary>
        public string C2959 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2959"]);
               
            }
        }
        /// <summary>
        ///  El valor del tag no corresponde al esperado.
        /// </summary>
        public string C2960 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2960"]);
               
            }
        }
        /// <summary>
        ///  El valor del tag codigo de tributo internacional no corresponde al esperado.
        /// </summary>
        public string C2961 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2961"]);
               
            }
        }
        /// <summary>
        ///  El valor del atributo del tag cac:TaxTotal/cac:TaxSubtotal/cac:TaxCategory/cac:TaxScheme/cbc:ID no corresponde al esperado.
        /// </summary>
        public string C2962 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2962"]);
               
            }
        }
        /// <summary>
        ///  El valor del atributo del tag cac:TaxTotal/cac:TaxSubtotal/cac:TaxCategory/cbc:ID/ no corresponde al esperado.
        /// </summary>
        public string C2963 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2963"]);
               
            }
        }
        /// <summary>
        ///  El valor del tag nombre del tributo no corresponde al esperado.
        /// </summary>
        public string C2964 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2964"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de otros tributos no corresponde al total
        /// </summary>
        public string C2965 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2965"]);
               
            }
        }
        /// <summary>
        ///  Sólo se puede indicar el códigos 55 del catálogo 53
        /// </summary>
        public string C2966 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2966"]);
               
            }
        }
        /// <summary>
        ///  Los importes de otros cargos a nivel de línea no corresponden a la suma total.
        /// </summary>
        public string C2967 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2967"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en cac:AllowanceCharge/cbc:Amount no cumple con el formato establecido. 
        /// </summary>
        public string C2968 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2968"]);
               
            }
        }
        /// <summary>
        ///  Los importes de otros cargos a nivel de línea no corresponden a la suma total.
        /// </summary>
        public string C2969 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2969"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en sac:SUNATTotalPaidBeforeRounding debe ser numérico mayor a cero
        /// </summary>
        public string C2970 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2970"]);
               
            }
        }
        /// <summary>
        ///  Si existe tag sac:SUNATTotalPaidBeforeRounding debe existir tag cbc:PayableRoundingAmount
        /// </summary>
        public string C2971 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2971"]);
               
            }
        }
        /// <summary>
        ///  Importe total pagado antes de redondeo debe ser igual a la suma de los importes pagados por cada documento relacionado
        /// </summary>
        public string C2972 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2972"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Importe total pagado antes de redondeo debe ser PEN
        /// </summary>
        public string C2973 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2973"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en cbc:PayableRoundingAmount debe ser numérico valido
        /// </summary>
        public string C2974 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2974"]);
               
            }
        }
        /// <summary>
        ///  Si existe tag cbc:PayableRoundingAmount debe existir tag sac:SUNATTotalPaidBeforeRounding
        /// </summary>
        public string C2975 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2975"]);
               
            }
        }
        /// <summary>
        ///  El valor para el ajuste por redondeo no es válido
        /// </summary>
        public string C2976 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2976"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Ajuste por redondeo debe ser PEN
        /// </summary>
        public string C2977 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2977"]);
               
            }
        }
        /// <summary>
        ///  Importe total pagado debe ser igual a la suma del Importe total pagado antes de redondeo mas el Ajuste por redondeo
        /// </summary>
        public string C2978 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2978"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en sac:SUNATTotalCashedBeforeRounding debe ser numérico mayor a cero
        /// </summary>
        public string C2979 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2979"]);
               
            }
        }
        /// <summary>
        ///  Si existe tag sac:SUNATTotalCashedBeforeRounding debe existir tag cbc:PayableRoundingAmount
        /// </summary>
        public string C2980 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2980"]);
               
            }
        }
        /// <summary>
        ///  Importe total cobrado antes de redondeo debe ser igual a la suma de los importes cobrados por cada documento relacionado
        /// </summary>
        public string C2981 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2981"]);
               
            }
        }
        /// <summary>
        ///  El valor de la moneda del Importe total cobrado antes de redondeo debe ser PEN
        /// </summary>
        public string C2982 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2982"]);
               
            }
        }
        /// <summary>
        ///  Si existe tag cbc:PayableRoundingAmount debe existir tag sac:SUNATTotalCashedBeforeRounding
        /// </summary>
        public string C2983 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2983"]);
               
            }
        }
        /// <summary>
        ///  Importe total cobrado debe ser igual a la suma del Importe total cobrado antes de redondeo mas el Ajuste por redondeo
        /// </summary>
        public string C2984 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2984"]);
               
            }
        }
        /// <summary>
        ///  Solo se acepta comprobantes con fecha de emisión hasta el 28/02/2014 si la tasa del comprobante de retencion 6%
        /// </summary>
        public string C2985 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2985"]);
               
            }
        }
        /// <summary>
        ///  Solo se acepta informacion de percepcion para nuevas boletas.
        /// </summary>
        public string C2986 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2986"]);
               
            }
        }
        /// <summary>
        ///  El comprobante ya fue informado y se encuentra anulado o rechazado.
        /// </summary>
        public string C2987 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2987"]);
               
            }
        }
        /// <summary>
        ///  El comprobante (fisico) a la que hace referencia la nota, no se encuentra autorizado.
        /// </summary>
        public string C2988 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2988"]);
               
            }
        }
        /// <summary>
        ///  El comprobante (electronico) a la que hace referencia la nota, no se encuentra informado.
        /// </summary>
        public string C2989 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2989"]);
               
            }
        }
        /// <summary>
        ///  El comprobante (electronico) a la que hace referencia la nota, se encuentra anulado o rechazada.
        /// </summary>
        public string C2990 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2990"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento modificado por la Nota de credito debe ser comprobante de servicio publico
        /// </summary>
        public string C2991 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2991"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de la tasa del tributo de la línea
        /// </summary>
        public string C2992 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2992"]);
               
            }
        }
        /// <summary>
        ///  El factor de afectación de IGV por linea debe ser diferente a 0.00.
        /// </summary>
        public string C2993 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2993"]);
               
            }
        }
        /// <summary>
        ///  La categoría de impuesto de la línea no corresponde al valor esperado (catalogo 5)
        /// </summary>
        public string C2994 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2994"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código internacional de tributo de la línea
        /// </summary>
        public string C2995 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2995"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del nombre de tributo de la línea
        /// </summary>
        public string C2996 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2996"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código de tributo de la línea
        /// </summary>
        public string C2997 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2997"]);
               
            }
        }
        /// <summary>
        ///  El código de tributo de la línea no corresponde al valor esperado
        /// </summary>
        public string C2998 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2998"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el total valor de venta globales no cumple con el formato establecido
        /// </summary>
        public string C2999 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C2999"]);
               
            }
        }
        /// <summary>
        ///  El monto total del impuestos sobre el valor de venta de operaciones gratuitas/inafectas/exoneradas debe ser igual a 0.00 
        /// </summary>
        public string C3000 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3000"]);
               
            }
        }
        /// <summary>
        ///  El Código producto de SUNAT no puede ser vacio si es de Exportacion
        /// </summary>
        public string C3001 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3001"]);
               
            }
        }
        /// <summary>
        ///  El Código producto de SUNAT  no es válido
        /// </summary>
        public string C3002 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3002"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de total valor de venta globales
        /// </summary>
        public string C3003 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3003"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la categoría de impuesto globales
        /// </summary>
        public string C3004 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3004"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código de tributo en operaciones inafectas/exoneradas
        /// </summary>
        public string C3005 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3005"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en descripcion de leyenda no cumple con el formato establecido.
        /// </summary>
        public string C3006 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3006"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de tributo global no corresponde al valor esperado.
        /// </summary>
        public string C3007 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3007"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - Otros tributos de pago de línea no corresponden al total
        /// </summary>
        public string C3008 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3008"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo Otros tributos de línea no corresponden al total
        /// </summary>
        public string C3009 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3009"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de total valor de venta en operaciones gravadas
        /// </summary>
        public string C3010 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3010"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el total valor de venta en operaciones gravadas  no cumple con el formato establecido
        /// </summary>
        public string C3011 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3011"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el importe del tributo en operaciones gravadas  no cumple con el formato establecido
        /// </summary>
        public string C3012 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3012"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la categoría de impuesto en operaciones gravadas
        /// </summary>
        public string C3013 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3013"]);
               
            }
        }
        /// <summary>
        ///  El codigo de leyenda no debe repetirse en el comprobante.
        /// </summary>
        public string C3014 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3014"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código de tributo en operaciones gravadas
        /// </summary>
        public string C3015 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3015"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en base monto por cargo/descuento globales no cumple con el formato establecido
        /// </summary>
        public string C3016 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3016"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del nombre de tributo en operaciones gravadas
        /// </summary>
        public string C3017 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3017"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código internacional del tributo en operaciones gravadas
        /// </summary>
        public string C3018 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3018"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en total precio de venta no cumple con el formato establecido
        /// </summary>
        public string C3019 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3019"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el monto total de impuestos no cumple con el formato establecido
        /// </summary>
        public string C3020 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3020"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el monto total de impuestos por línea no cumple con el formato establecido
        /// </summary>
        public string C3021 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3021"]);
               
            }
        }
        /// <summary>
        ///  El importe total de impuestos por línea no coincide con la sumatoria de los impuestos por línea.
        /// </summary>
        public string C3022 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3022"]);
               
            }
        }
        /// <summary>
        ///  El tipo de documento no se encuentra en el catálogo 
        /// </summary>
        public string C3023 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3023"]);
               
            }
        }
        /// <summary>
        ///  El tag cac:TaxTotal no debe repetirse a nivel de totales
        /// </summary>
        public string C3024 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3024"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en factor de cargo o descuento global no cumple con el formato establecido.
        /// </summary>
        public string C3025 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3025"]);
               
            }
        }
        /// <summary>
        ///  El tag cac:TaxTotal no debe repetirse a nivel de Item
        /// </summary>
        public string C3026 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3026"]);
               
            }
        }
        /// <summary>
        ///  El valor del atributo no se encuentra en el catálogo
        /// </summary>
        public string C3027 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3027"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en código de SW de facturación no cumple con el formato establecido.
        /// </summary>
        public string C3028 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3028"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del tipo de documento de identidad del emisor
        /// </summary>
        public string C3029 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3029"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código de local anexo del emisor
        /// </summary>
        public string C3030 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3030"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en TaxableAmount de la linea no cumple con el formato establecido
        /// </summary>
        public string C3031 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3031"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la categoría de impuesto de la línea
        /// </summary>
        public string C3032 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3032"]);
               
            }
        }
        /// <summary>
        ///  El codigo de bien o servicio sujeto a detracción no existe en el listado.
        /// </summary>
        public string C3033 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3033"]);
               
            }
        }
        /// <summary>
        ///  El xml no contiene el tag o no existe información en el nro de cuenta de detracción
        /// </summary>
        public string C3034 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3034"]);
               
            }
        }
        /// <summary>
        ///  El xml no contiene el tag o no existe información en el monto de detraccion
        /// </summary>
        public string C3035 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3035"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del nombre del tributo
        /// </summary>
        public string C3036 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3036"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en monto de detraccion no cumple con el formato establecido
        /// </summary>
        public string C3037 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3037"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de los IGV (operaciones gravadas) de línea no corresponden al total
        /// </summary>
        public string C3038 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3038"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones gravadas de línea no corresponden al total
        /// </summary>
        public string C3039 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3039"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - Exportaciones de línea no corresponden al total
        /// </summary>
        public string C3040 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3040"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones inafectas de línea no corresponden al total
        /// </summary>
        public string C3041 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3041"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones exoneradas de línea no corresponden al total
        /// </summary>
        public string C3042 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3042"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de total valor de venta ISC e IVAP
        /// </summary>
        public string C3043 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3043"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el total valor de venta ISC e IVAP no cumple con el formato establecido
        /// </summary>
        public string C3044 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3044"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - ISC de línea no corresponden al total
        /// </summary>
        public string C3045 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3045"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - IVAP de línea no corresponden al total
        /// </summary>
        public string C3046 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3046"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el importe del tributo para ISC e IVAP no cumple con el formato establecido
        /// </summary>
        public string C3047 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3047"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo ISC de línea no corresponden al total
        /// </summary>
        public string C3048 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3048"]);
               
            }
        }
        /// <summary>
        ///  El importe del IVAP no corresponden al determinado por la información consignada.
        /// </summary>
        public string C3049 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3049"]);
               
            }
        }
        /// <summary>
        ///  Afectación de IGV no corresponde al código de tributo de la linea.
        /// </summary>
        public string C3050 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3050"]);
               
            }
        }
        /// <summary>
        ///  Nombre de tributo no corresponde al código de tributo de la linea.
        /// </summary>
        public string C3051 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3051"]);
               
            }
        }
        /// <summary>
        ///  El factor de cargo/descuento por linea no cumple con el formato establecido.
        /// </summary>
        public string C3052 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3052"]);
               
            }
        }
        /// <summary>
        ///  El Monto base de cargo/descuento por linea no cumple con el formato establecido.
        /// </summary>
        public string C3053 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3053"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la categoría de impuesto en ISC o IVAP
        /// </summary>
        public string C3054 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3054"]);
               
            }
        }
        /// <summary>
        ///  Si el código de tributo es 2000, la categoría del tributo debe ser S
        /// </summary>
        public string C3055 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3055"]);
               
            }
        }
        /// <summary>
        ///  Si el código de tributo es 1016, la categoría del tributo debe ser S
        /// </summary>
        public string C3056 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3056"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones gratuitas de línea no corresponden al total
        /// </summary>
        public string C3057 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3057"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código de tributo para ISC o IVAP
        /// </summary>
        public string C3058 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3058"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de código de tributo.
        /// </summary>
        public string C3059 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3059"]);
               
            }
        }
        /// <summary>
        ///  El valor del tag código de tributo no corresponde al esperado.
        /// </summary>
        public string C3060 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3060"]);
               
            }
        }
        /// <summary>
        ///  No se permite importe mayor a cero cuando el codigo de tributo es IVAP y el comprobante esta sujeta a IVAP
        /// </summary>
        public string C3061 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3061"]);
               
            }
        }
        /// <summary>
        ///  La tasa o porcentaje de detracción no corresponde al valor esperado.
        /// </summary>
        public string C3062 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3062"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de matricula de embarcación en Detracciones para recursos hidrobiologicos.
        /// </summary>
        public string C3063 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3063"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene tag o no existe información del valor del concepto por linea.
        /// </summary>
        public string C3064 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3064"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene tag de la fecha del concepto por linea.
        /// </summary>
        public string C3065 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3065"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene un codigo de tributo no valido para Servicios Publicos.
        /// </summary>
        public string C3066 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3066"]);
               
            }
        }
        /// <summary>
        ///  El código de tributo no debe repetirse a nivel de item
        /// </summary>
        public string C3067 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3067"]);
               
            }
        }
        /// <summary>
        ///  El código de tributo no debe repetirse a nivel de totales
        /// </summary>
        public string C3068 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3068"]);
               
            }
        }
        /// <summary>
        ///  El xml contiene una linea con mas de un codigo de tributo repetitivo.
        /// </summary>
        public string C3069 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3069"]);
               
            }
        }
        /// <summary>
        ///  EL codigo internacional del tributo por linea no corresponde al valor esperado por su Id.
        /// </summary>
        public string C3070 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3070"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de motivo de cargo/descuento global no es valido (catalogo nro 53)
        /// </summary>
        public string C3071 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3071"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de codigo de motivo de cargo/descuento global.
        /// </summary>
        public string C3072 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3072"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion de codigo de motivo de cargo/descuento por item.
        /// </summary>
        public string C3073 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3073"]);
               
            }
        }
        /// <summary>
        ///  El monto del cargo para el para FISE debe ser igual mayor a 0.00 
        /// </summary>
        public string C3074 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3074"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de descuentos que afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3075 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3075"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de descuentos que no afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3076 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3076"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de cargos que afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3077 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3077"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de cargos que no afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3078 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3078"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de montos bases de los descuentos que afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3079 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3079"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de montos bases de los descuentos que no afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3080 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3080"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de montos bases de los cargos que afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3081 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3081"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de montos bases de los cargos que no afectan a BI por linea no corresponden al total
        /// </summary>
        public string C3082 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3082"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del total valor de venta.
        /// </summary>
        public string C3083 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3083"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de valor de venta no corresponde a los importes consignados
        /// </summary>
        public string C3084 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3084"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del total precio de venta.
        /// </summary>
        public string C3085 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3085"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria consignados en descuentos globales no corresponden al total.
        /// </summary>
        public string C3086 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3086"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria consignados en cargos globales no corresponden al total
        /// </summary>
        public string C3087 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3087"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como moneda del comprobante no es valido (catalogo nro 02).
        /// </summary>
        public string C3088 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3088"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene mas de un tag como elemento de numero de documento del emisor
        /// </summary>
        public string C3089 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3089"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene mas de un tag como elemento de numero de documento del receptor.
        /// </summary>
        public string C3090 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3090"]);
               
            }
        }
        /// <summary>
        ///  Si se tipo de operación es Venta Interna - Sujeta al FISE, debe ingresar cargo para FISE
        /// </summary>
        public string C3091 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3091"]);
               
            }
        }
        /// <summary>
        ///  Para cargo/descuento FISE, debe ingresar monto base y debe ser mayor a 0.00
        /// </summary>
        public string C3092 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3092"]);
               
            }
        }
        /// <summary>
        ///  Si el tipo de operación es Operación Sujeta a Percepción, debe ingresar cargo para Percepción
        /// </summary>
        public string C3093 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3093"]);
               
            }
        }
        /// <summary>
        ///  El comprobante más "código de operación del ítem" no debe repetirse
        /// </summary>
        public string C3094 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3094"]);
               
            }
        }
        /// <summary>
        ///  El comprobante no debe ser emitido y editado en el mismo envío
        /// </summary>
        public string C3095 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3095"]);
               
            }
        }
        /// <summary>
        ///  El comprobante no debe ser editado y anulado en el mismo envío
        /// </summary>
        public string C3096 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3096"]);
               
            }
        }
        /// <summary>
        ///  El emisor a la fecha no se encuentra registrado ó habilitado en el Registro de exportadores de servicios SUNAT
        /// </summary>
        public string C3097 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3097"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del pais de uso, exploración o aprovechamiento
        /// </summary>
        public string C3098 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3098"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como pais de uso, exploracion o aprovechamiento es incorrecto.
        /// </summary>
        public string C3099 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3099"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de tributo por linea es invalido para tipo de operación.
        /// </summary>
        public string C3100 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3100"]);
               
            }
        }
        /// <summary>
        ///  El factor de afectación de IGV por linea debe ser igual a 0.00 para Exoneradas, Inafectas, Exportación, Gratuitas de exoneradas o Gratuitas de inafectas.
        /// </summary>
        public string C3101 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3101"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como factor de afectacion por linea no cumple con el formato establecido.
        /// </summary>
        public string C3102 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3102"]);
               
            }
        }
        /// <summary>
        ///  El producto del factor y monto base de la afectación del IGV/IVAP no corresponde al monto de afectacion de linea.
        /// </summary>
        public string C3103 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3103"]);
               
            }
        }
        /// <summary>
        ///  El factor de afectación de ISC por linea debe ser diferente a 0.00.
        /// </summary>
        public string C3104 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3104"]);
               
            }
        }
        /// <summary>
        ///  El XML debe contener al menos un tributo por linea de afectacion por IGV
        /// </summary>
        public string C3105 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3105"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene mas de un tributo por linea (Gravado, Exonerado, Inafecto, Exportación)
        /// </summary>
        public string C3106 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3106"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de tributo global es invalido para tipo de operación.
        /// </summary>
        public string C3107 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3107"]);
               
            }
        }
        /// <summary>
        ///  El producto del factor y monto base de la afectación del ISC no corresponde al monto de afectacion de linea.
        /// </summary>
        public string C3108 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3108"]);
               
            }
        }
        /// <summary>
        ///  El producto del factor y monto base de la afectación de otros tributos no corresponde al monto de afectacion de linea.
        /// </summary>
        public string C3109 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3109"]);
               
            }
        }
        /// <summary>
        ///  El monto de afectacion de IGV por linea debe ser igual a 0.00 para Exoneradas, Inafectas, Exportación, Gratuitas de exoneradas o Gratuitas de inafectas.
        /// </summary>
        public string C3110 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3110"]);
               
            }
        }
        /// <summary>
        ///  El monto de afectación de IGV por linea debe ser diferente a 0.00.
        /// </summary>
        public string C3111 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3111"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de los IGV de operaciones gratuitas de la línea (codigo tributo 9996) no corresponden al total
        /// </summary>
        public string C3112 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3112"]);
               
            }
        }
        /// <summary>
        ///  El xml contiene información FISE que no corresponde al tipo de operación.
        /// </summary>
        public string C3113 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3113"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como indicador de cargo/descuento no corresponde al valor esperado.
        /// </summary>
        public string C3114 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3114"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como unidad de medida de cantidad de especie vendidas no corresponde al valor esperado.
        /// </summary>
        public string C3115 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3115"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del ubigeo de punto de origen en Detracciones - Servicio de transporte de carga.
        /// </summary>
        public string C3116 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3116"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la dirección del punto de origen en Detracciones - Servicio de transporte de carga.
        /// </summary>
        public string C3117 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3117"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del ubigeo de punto de destino en Detracciones - Servicio de transporte de carga.
        /// </summary>
        public string C3118 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3118"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información de la dirección del punto de destino en Detracciones - Servicio de transporte de carga.
        /// </summary>
        public string C3119 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3119"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Detalle del viaje en Detracciones - Servicio de transporte de carga.
        /// </summary>
        public string C3120 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3120"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del tipo de valor referencial en Detracciones - Servicios de transporte de carga.
        /// </summary>
        public string C3121 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3121"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del monto del valor referencial en Detracciones - Servicios de transporte de carga.
        /// </summary>
        public string C3122 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3122"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como monto valor referencial en Detracciones - Servicios de transporte de carga no cumple con el formato establecido.
        /// </summary>
        public string C3123 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3123"]);
               
            }
        }
        /// <summary>
        ///  Detracciones - Servicio de transporte de carga, debe tener un (y solo uno) Valor Referencial del Servicio de Transporte.
        /// </summary>
        public string C3124 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3124"]);
               
            }
        }
        /// <summary>
        ///  Detracciones - Servicio de transporte de carga, debe tener un (y solo uno) Valor Referencial sobre la carga efectiva.
        /// </summary>
        public string C3125 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3125"]);
               
            }
        }
        /// <summary>
        ///  Detracciones - Servicio de transporte de carga, debe tener un (y solo uno) Valor Referencial sobre la carga util nominal.
        /// </summary>
        public string C3126 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3126"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del Codigo de BBSS de detracción para el tipo de operación.
        /// </summary>
        public string C3127 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3127"]);
               
            }
        }
        /// <summary>
        ///  El XML contiene información de codigo de bien y servicio de detracción que no corresponde al tipo de operación.
        /// </summary>
        public string C3128 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3128"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de BBSS de detracción no corresponde al valor esperado.
        /// </summary>
        public string C3129 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3129"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de nombre de embarcación en Detracciones para recursos hidrobiologicos.
        /// </summary>
        public string C3130 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3130"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de tipo de especie vendidas en Detracciones para recursos hidrobiologicos.
        /// </summary>
        public string C3131 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3131"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de lugar de descarga en Detracciones para recursos hidrobiologicos.
        /// </summary>
        public string C3132 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3132"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de cantidad de especies vendidas en Detracciones para recursos hidrobiologicos.
        /// </summary>
        public string C3133 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3133"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de fecha de descarga en Detracciones para recursos hidrobiologicos.
        /// </summary>
        public string C3134 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3134"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene tag de la cantidad del concepto por linea.
        /// </summary>
        public string C3135 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3135"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de numero de documentos del huesped.
        /// </summary>
        public string C3136 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3136"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de tipo de documentos del huesped.
        /// </summary>
        public string C3137 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3137"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de codigo de pais de emision del documento de identidad
        /// </summary>
        public string C3138 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3138"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de apellidos y nombres del huesped.
        /// </summary>
        public string C3139 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3139"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de codigo del pais de residencia.
        /// </summary>
        public string C3140 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3140"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de fecha de ingreso del pais.
        /// </summary>
        public string C3141 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3141"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de fecha de ingreso al establecimiento.
        /// </summary>
        public string C3142 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3142"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de fecha de salida del establecimiento.
        /// </summary>
        public string C3143 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3143"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de fecha de consumo.
        /// </summary>
        public string C3144 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3144"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de numero de dias de permanencia.
        /// </summary>
        public string C3145 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3145"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Proveedores Estado: Número de Expediente
        /// </summary>
        public string C3146 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3146"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Proveedores Estado: Código de Unidad Ejecutora
        /// </summary>
        public string C3147 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3147"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Proveedores Estado: N° de Proceso de Selección
        /// </summary>
        public string C3148 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3148"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Proveedores Estado: N° de Contrato
        /// </summary>
        public string C3149 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3149"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Créditos Hipotecarios: Tipo de préstamo
        /// </summary>
        public string C3150 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3150"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Créditos Hipotecarios: Partida Registral
        /// </summary>
        public string C3151 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3151"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Créditos Hipotecarios: Número de contrato
        /// </summary>
        public string C3152 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3152"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Créditos Hipotecarios: Fecha de otorgamiento del crédito
        /// </summary>
        public string C3153 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3153"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Créditos Hipotecarios: Dirección del predio - Código de ubigeo
        /// </summary>
        public string C3154 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3154"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Créditos Hipotecarios: Dirección del predio - Dirección completa
        /// </summary>
        public string C3155 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3155"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Agente de Viajes: Numero de Ruc
        /// </summary>
        public string C3156 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3156"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Agente de Viajes: Tipo de documento
        /// </summary>
        public string C3157 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3157"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como Agente de Viajes-Tipo de documento no corresponde al valor esperado.
        /// </summary>
        public string C3158 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3158"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Pasajero - Apellidos y Nombres
        /// </summary>
        public string C3159 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3159"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Pasajero - Tipo de documento de identidad
        /// </summary>
        public string C3160 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3160"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte: Ciudad o lugar de origen - Código de ubigeo
        /// </summary>
        public string C3161 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3161"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte: Ciudad o lugar de origen - Dirección detallada
        /// </summary>
        public string C3162 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3162"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte: Ciudad o lugar de destino - Código de ubigeo
        /// </summary>
        public string C3163 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3163"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte: Ciudad o lugar de destino - Dirección detallada
        /// </summary>
        public string C3164 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3164"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte:Número de asiento
        /// </summary>
        public string C3165 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3165"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte: Hora programada de inicio de viaje
        /// </summary>
        public string C3166 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3166"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte: Fecha programada de inicio de viaje
        /// </summary>
        public string C3167 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3167"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Carta Porte Aéreo:  Lugar de origen - Código de ubigeo
        /// </summary>
        public string C3168 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3168"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Carta Porte Aéreo:  Lugar de origen - Dirección detallada
        /// </summary>
        public string C3169 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3169"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Carta Porte Aéreo:  Lugar de destino - Código de ubigeo
        /// </summary>
        public string C3170 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3170"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Carta Porte Aéreo:  Lugar de destino - Dirección detallada
        /// </summary>
        public string C3171 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3171"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene tag de la Hora del concepto por linea.
        /// </summary>
        public string C3172 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3172"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio transporte: Forma de Pago
        /// </summary>
        public string C3173 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3173"]);
               
            }
        }
        /// <summary>
        ///  El dato ingreso como Forma de Pago o Medio de Pago no corresponde al valor esperado (catalogo nro 59)
        /// </summary>
        public string C3174 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3174"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Servicio de transporte: Número de autorización de la transacción
        /// </summary>
        public string C3175 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3175"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Regalía Petrolera: Decreto Supremo de aprobación del contrato
        /// </summary>
        public string C3176 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3176"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Regalía Petrolera: Area de contrato (Lote)
        /// </summary>
        public string C3177 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3177"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Regalía Petrolera: Periodo de pago - Fecha de inicio
        /// </summary>
        public string C3178 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3178"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Regalía Petrolera: Periodo de pago - Fecha de fin
        /// </summary>
        public string C3179 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3179"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Regalía Petrolera: Fecha de Pago
        /// </summary>
        public string C3180 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3180"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como Codigo de producto SUNAT no corresponde al valor esperado para tipo de operación.
        /// </summary>
        public string C3181 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3181"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transportre Terreste - Número de asiento
        /// </summary>
        public string C3182 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3182"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Información de manifiesto de pasajeros
        /// </summary>
        public string C3183 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3183"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Número de documento de identidad del pasajero
        /// </summary>
        public string C3184 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3184"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Tipo de documento de identidad del pasajero
        /// </summary>
        public string C3185 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3185"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Nombres y apellidos del pasajero
        /// </summary>
        public string C3186 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3186"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Ciudad o lugar de destino - Dirección detallada
        /// </summary>
        public string C3187 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3187"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Ciudad o lugar de origen - Ubigeo
        /// </summary>
        public string C3188 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3188"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Ciudad o lugar de origen - Dirección detallada
        /// </summary>
        public string C3189 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3189"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Fecha de inicio programado
        /// </summary>
        public string C3190 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3190"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Hora de inicio programado
        /// </summary>
        public string C3191 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3191"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Total de anticipos
        /// </summary>
        public string C3192 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3192"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado Total anticipos no corresponde para el tipo de operación
        /// </summary>
        public string C3193 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3193"]);
               
            }
        }
        /// <summary>
        ///  Para los ajustes de operaciones de exportación solo es permitido registrar un documento que modifica.
        /// </summary>
        public string C3194 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3194"]);
               
            }
        }
        /// <summary>
        ///  El xml no contiene el tag de impuesto por linea (TaxtTotal).
        /// </summary>
        public string C3195 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3195"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de impuestos globales no corresponde al monto total de impuestos.
        /// </summary>
        public string C3196 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3196"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de Transporte Terrestre - Ciudad o lugar de destino - Ubigeo
        /// </summary>
        public string C3197 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3197"]);
               
            }
        }
        /// <summary>
        ///  La fecha de cierre no puede ser inferior a la fecha de inicio del cómputo del ciclo de facturación
        /// </summary>
        public string C3198 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3198"]);
               
            }
        }
        /// <summary>
        ///  Si utiliza el estandar GS1 debe especificar el tipo de estructura GTIN
        /// </summary>
        public string C3199 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3199"]);
               
            }
        }
        /// <summary>
        ///  El tipo de estructura GS1 no tiene un valor permitido
        /// </summary>
        public string C3200 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3200"]);
               
            }
        }
        /// <summary>
        ///  El código de producto GS1 no cumple el estandar
        /// </summary>
        public string C3201 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3201"]);
               
            }
        }
        /// <summary>
        ///  El numero de RUC del receptor no existe.
        /// </summary>
        public string C3202 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3202"]);
               
            }
        }
        /// <summary>
        ///  El tipo de nota es un dato único
        /// </summary>
        public string C3203 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3203"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag de BVME transporte ferroviario: Pasajero - Número de documento de identidad
        /// </summary>
        public string C3204 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3204"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el tipo de operación
        /// </summary>
        public string C3205 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3205"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como tipo de operación no corresponde a un valor esperado (catálogo nro. 51)
        /// </summary>
        public string C3206 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3206"]);
               
            }
        }
        /// <summary>
        ///  Comprobante físico no se encuentra autorizado 
        /// </summary>
        public string C3207 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3207"]);
               
            }
        }
        /// <summary>
        ///  La moneda del monto de la detracción debe ser PEN
        /// </summary>
        public string C3208 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3208"]);
               
            }
        }
        /// <summary>
        ///  El tipo de moneda de la nota debe ser el mismo que el declarado en el documento que modifica
        /// </summary>
        public string C3209 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3209"]);
               
            }
        }
        /// <summary>
        ///  Solo debe consignar sistema de calculo si el tributo es ISC
        /// </summary>
        public string C3210 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3210"]);
               
            }
        }
        /// <summary>
        ///  Falta identificador del pago del Monto de anticipo para relacionarlo con el comprobante que se realizo el  anticipo
        /// </summary>
        public string C3211 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3211"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene un identificador de pago repetido en los montos anticipados
        /// </summary>
        public string C3212 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3212"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene un pago anticipado pero no se ha consignado el documento que se realizo el anticipo
        /// </summary>
        public string C3213 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3213"]);
               
            }
        }
        /// <summary>
        ///  No existe información del Monto Anticipado para el comprobante que se realizo el anticipo
        /// </summary>
        public string C3214 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3214"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene un identificador de pago repetido en los comprobantes que se realizo el anticipo
        /// </summary>
        public string C3215 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3215"]);
               
            }
        }
        /// <summary>
        ///  Falta identificador del pago del comprobante para relacionarlo con el monto de  anticipo
        /// </summary>
        public string C3216 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3216"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar Numero de RUC del emisor del comprobante de anticipo
        /// </summary>
        public string C3217 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3217"]);
               
            }
        }
        /// <summary>
        ///  El comprobante que se realizo el anticipo no existe
        /// </summary>
        public string C3218 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3218"]);
               
            }
        }
        /// <summary>
        ///  El comprobante que se realizo el anticipo no se encuentra autorizado
        /// </summary>
        public string C3219 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3219"]);
               
            }
        }
        /// <summary>
        ///  Si consigna montos de anticipo debe informar el Total de Anticipos
        /// </summary>
        public string C3220 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3220"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de tributo global es invalido para tipo de nota
        /// </summary>
        public string C3221 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3221"]);
               
            }
        }
        /// <summary>
        ///  No existe información a nivel global de un tributo informado en la línea
        /// </summary>
        public string C3222 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3222"]);
               
            }
        }
        /// <summary>
        ///  La combinación de tributos no es permitida
        /// </summary>
        public string C3223 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3223"]);
               
            }
        }
        /// <summary>
        ///  Si existe "Valor referencial unitario en operac. no onerosas" con monto mayor a cero, la operacion debe ser gratuita (codigo de tributo 9996)
        /// </summary>
        public string C3224 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3224"]);
               
            }
        }
        /// <summary>
        ///  La base imponible a nivel de línea difiere de la información consignada en el comprobante
        /// </summary>
        public string C3225 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3225"]);
               
            }
        }
        /// <summary>
        ///  El resultado del monto del cargo o descuento global es incorrecto en base a la información consignada
        /// </summary>
        public string C3226 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3226"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del Total del valor de venta más los impuestos no concuerda con la base imponible
        /// </summary>
        public string C3227 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3227"]);
               
            }
        }
        /// <summary>
        ///  El Comprobante de Pago no está autorizado en los Sistemas de la SUNAT.
        /// </summary>
        public string C3228 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3228"]);
               
            }
        }
        /// <summary>
        ///  El monto para el redondeo del Importe Total excede el valor permitido
        /// </summary>
        public string C3229 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3229"]);
               
            }
        }
        /// <summary>
        ///  Tipo de nota debe ser "Ajustes afectos al IVAP"
        /// </summary>
        public string C3230 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3230"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar solo un elemento a nivel global para Percepciones (cbc:ID igual a 2001)
        /// </summary>
        public string C3231 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3231"]);
               
            }
        }
        /// <summary>
        ///  Sólo los contribuyentes que hayan emitido los siguientes documentos: Guías, factura, boleta y sus respectivas notas, hasta el 30/09/2018 están autorizados a utilizar esta versión UBL
        /// </summary>
        public string C3232 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3232"]);
               
            }
        }
        /// <summary>
        ///  Para cargo Percepción, debe ingresar monto base y debe ser mayor a 0.00
        /// </summary>
        public string C3233 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3233"]);
               
            }
        }
        /// <summary>
        ///  El código de precio "02" es sólo para operaciones gratuitas
        /// </summary>
        public string C3234 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3234"]);
               
            }
        }
        /// <summary>
        ///  No está autorizado a enviar comprobantes bajo el formato UBL 2.0
        /// </summary>
        public string C3235 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3235"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el campo cac:TaxSubtotal/cbc:BaseUnitMeasure no corresponde al valor esperado
        /// </summary>
        public string C3236 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3236"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el campo cac:TaxSubtotal/cbc:BaseUnitMeasure a nivel de ítem
        /// </summary>
        public string C3237 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3237"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado en el campo cac:TaxSubtotal/cbc:PerUnitAmount del ítem no corresponde al valor esperado
        /// </summary>
        public string C3238 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3238"]);
               
            }
        }
        /// <summary>
        ///  El código de local anexo consignado no se encuentra declarado en el RUC
        /// </summary>
        public string C3239 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3239"]);
               
            }
        }
        /// <summary>
        ///  El impuesto ICBPER no aplica para el NRUS
        /// </summary>
        public string C3240 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3240"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de operación 2100, 2101 y 2102 (Creditos) debe consignar Numero de contrato, Fecha de otorgamiento y Monto del crédito otorgado (capital)
        /// </summary>
        public string C3241 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3241"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de operación 2104 - Empresas del sistema de seguros, debe consignar Información adicional  a nivel de ítem
        /// </summary>
        public string C3242 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3242"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene tag o no existe información de la fecha del concepto por linea
        /// </summary>
        public string C3243 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3243"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar la informacion del tipo de transaccion del comprobante
        /// </summary>
        public string C3244 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3244"]);
               
            }
        }
        /// <summary>
        ///  Debe informar si el tipo de transaccion es al Contado o al Credito
        /// </summary>
        public string C3245 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3245"]);
               
            }
        }
        /// <summary>
        ///  El tipo de transaccion o el identificador de la cuota no cumple con el formato esperado
        /// </summary>
        public string C3246 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3246"]);
               
            }
        }
        /// <summary>
        ///  El tipo de transaccion no puede ser a la vez al Contado y al Credito
        /// </summary>
        public string C3247 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3247"]);
               
            }
        }
        /// <summary>
        ///  El tipo de transaccion o el identificador de la cuota no debe repetirse en el comprobante
        /// </summary>
        public string C3248 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3248"]);
               
            }
        }
        /// <summary>
        ///  Si el tipo de transaccion es al Credito debe existir al menos información de una cuota de pago
        /// </summary>
        public string C3249 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3249"]);
               
            }
        }
        /// <summary>
        ///  El Monto neto pendiente de pago no cumple el formato definido
        /// </summary>
        public string C3250 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3250"]);
               
            }
        }
        /// <summary>
        ///  Si el tipo de transaccion es al Credito debe consignarse el Monto neto pendiente de pago
        /// </summary>
        public string C3251 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3251"]);
               
            }
        }
        /// <summary>
        ///  Si existe información de cuota de pago, el tipo de transaccion debe ser al credito
        /// </summary>
        public string C3252 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3252"]);
               
            }
        }
        /// <summary>
        ///  El Monto del pago único o de las cuotas no cumple el formato definido
        /// </summary>
        public string C3253 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3253"]);
               
            }
        }
        /// <summary>
        ///  Si se consigna información de la cuota de pago, debe indicarse el monto de la cuota
        /// </summary>
        public string C3254 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3254"]);
               
            }
        }
        /// <summary>
        ///  Fecha del pago único o de las cuotas no cumple el formato definido
        /// </summary>
        public string C3255 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3255"]);
               
            }
        }
        /// <summary>
        ///  Si se consigna información de la cuota de pago, debe indicarse la fecha del pago único o de las cuotas
        /// </summary>
        public string C3256 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3256"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de nota de credito 13 debe consignar información de la operación al credito
        /// </summary>
        public string C3257 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3257"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de nota de credito 13 el documento afectado debe ser Factura
        /// </summary>
        public string C3259 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3259"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de nota de credito 13 el documento afectado debe ser Factura al credito
        /// </summary>
        public string C3260 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3260"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de nota de credito 13 no se puede modificar mas de una factura en la nota
        /// </summary>
        public string C3261 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3261"]);
               
            }
        }
        /// <summary>
        ///  Si existe retencion de IGV en el comprobante, el receptor debe ser un Agente de Retencion
        /// </summary>
        public string C3262 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3262"]);
               
            }
        }
        /// <summary>
        ///  El Importe de la retencion no tiene el valor correcto
        /// </summary>
        public string C3263 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3263"]);
               
            }
        }
        /// <summary>
        ///  El importe total de la operación (base imponible de retencion) no puede ser mayor al importe total del comprobante.
        /// </summary>
        public string C3264 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3264"]);
               
            }
        }
        /// <summary>
        ///  El Monto neto pendiente de pago debe ser menor o igual al Importe total del comprobante
        /// </summary>
        public string C3265 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3265"]);
               
            }
        }
        /// <summary>
        ///  El Monto del pago único o de las cuotas debe ser menor o igual al Importe total del comprobante
        /// </summary>
        public string C3266 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3266"]);
               
            }
        }
        /// <summary>
        ///  Fecha del pago único o de las cuotas no puede ser anterior o igual a la fecha de emisión del comprobante
        /// </summary>
        public string C3267 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3267"]);
               
            }
        }
        /// <summary>
        ///  El código de local anexo consignado no se encuentra declarado en el RUC
        /// </summary>
        public string C3268 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3268"]);
               
            }
        }
        /// <summary>
        ///  Si existe retencion de IGV en el comprobante, el emisor no debe ser un Agente de Retencion
        /// </summary>
        public string C3269 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3269"]);
               
            }
        }
        /// <summary>
        ///  El precio unitario de la operación que está informando difiere de los cálculos realizados en base a la información remitida
        /// </summary>
        public string C3270 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3270"]);
               
            }
        }
        /// <summary>
        ///  El valor de venta por ítem difiere de los importes consignados.
        /// </summary>
        public string C3271 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3271"]);
               
            }
        }
        /// <summary>
        ///  La base imponible a nivel de línea difiere de la información consignada en el comprobante
        /// </summary>
        public string C3272 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3272"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - Exportaciones de línea no corresponden al total
        /// </summary>
        public string C3273 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3273"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones inafectas de línea no corresponden al total
        /// </summary>
        public string C3274 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3274"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones exoneradas de línea no corresponden al total
        /// </summary>
        public string C3275 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3275"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones gratuitas de línea no corresponden al total
        /// </summary>
        public string C3276 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3276"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones gravadas de línea no corresponden al total
        /// </summary>
        public string C3277 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3277"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de valor de venta no corresponde a los importes consignados
        /// </summary>
        public string C3278 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3278"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del Total del valor de venta más los impuestos no concuerda con la base imponible
        /// </summary>
        public string C3279 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3279"]);
               
            }
        }
        /// <summary>
        ///  El importe total del comprobante no coincide con el valor calculado
        /// </summary>
        public string C3280 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3280"]);
               
            }
        }
        /// <summary>
        ///  El emisor electrónico no se encuentra inscrito en el Registro de Establecimientos Autorizados (REA)
        /// </summary>
        public string C3281 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3281"]);
               
            }
        }
        /// <summary>
        ///  Si se informa descuentos globales por anticipo debe existir "Total de anticipos" con monto mayor a cero
        /// </summary>
        public string C3282 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3282"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2001, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C3283 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3283"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2002, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C3284 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3284"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2003, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C3285 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3285"]);
               
            }
        }
        /// <summary>
        ///  El monto total de la nota de credito debe ser menor o igual al monto de la factura
        /// </summary>
        public string C3286 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3286"]);
               
            }
        }
        /// <summary>
        ///  Si se informa "Total de anticipos" debe consignar los descuentos globales por anticipo con monto mayor a cero
        /// </summary>
        public string C3287 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3287"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el Total Valor de Venta
        /// </summary>
        public string C3288 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3288"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2008, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C3289 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3289"]);
               
            }
        }
        /// <summary>
        ///  El valor de cargo/descuento por ítem difiere de los importes consignados.
        /// </summary>
        public string C3290 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3290"]);
               
            }
        }
        /// <summary>
        ///  El cálculo del IGV es Incorrecto
        /// </summary>
        public string C3291 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3291"]);
               
            }
        }
        /// <summary>
        ///  El importe total de impuestos por línea no coincide con la sumatoria de los impuestos por línea.
        /// </summary>
        public string C3292 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3292"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - IVAP de línea no corresponden al total
        /// </summary>
        public string C3293 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3293"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de impuestos globales no corresponde al monto total de impuestos.
        /// </summary>
        public string C3294 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3294"]);
               
            }
        }
        /// <summary>
        ///  El importe del IVAP no corresponden al determinado por la informacion consignada.
        /// </summary>
        public string C3295 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3295"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del monto base - ISC de línea no corresponden al total
        /// </summary>
        public string C3296 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3296"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del monto base - Otros tributos de línea no corresponden al total
        /// </summary>
        public string C3297 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3297"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo ISC de línea no corresponden al total
        /// </summary>
        public string C3298 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3298"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo Otros tributos de línea no corresponden al total
        /// </summary>
        public string C3299 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3299"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria consignados en descuentos globales no corresponden al total.
        /// </summary>
        public string C3300 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3300"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria consignados en cargos globales no corresponden al total
        /// </summary>
        public string C3301 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3301"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de los IGV de operaciones gratuitas de la línea (codigo tributo 9996) no corresponden al total
        /// </summary>
        public string C3302 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3302"]);
               
            }
        }
        /// <summary>
        ///  El monto para el redondeo del Importe Total excede el valor permitido
        /// </summary>
        public string C3303 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3303"]);
               
            }
        }
        /// <summary>
        ///  La moneda del monto para el redondeo debe ser PEN
        /// </summary>
        public string C3304 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3304"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el Total Precio de Venta
        /// </summary>
        public string C3305 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3305"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo ICBPER de línea no corresponden al total
        /// </summary>
        public string C3306 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3306"]);
               
            }
        }
        /// <summary>
        ///  El valor de cargo/descuento global difiere de los importes consignados
        /// </summary>
        public string C3307 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3307"]);
               
            }
        }
        /// <summary>
        ///  Solo debe consignar informacion de percepciones si el tipo de operación es 2001-Operación sujeta a Percepcion
        /// </summary>
        public string C3308 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3308"]);
               
            }
        }
        /// <summary>
        ///  Si tipo de operación es 2001-Operación sujeta a Percepcion debe consignar un Payment Terms con indicador Percepcion
        /// </summary>
        public string C3309 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3309"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el Monto total incluido la percepcion
        /// </summary>
        public string C3310 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3310"]);
               
            }
        }
        /// <summary>
        ///  El Monto total incluido la percepción no cumple con el formato establecido
        /// </summary>
        public string C3311 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3311"]);
               
            }
        }
        /// <summary>
        ///  El documento relacionado tiene monto informado de percepción
        /// </summary>
        public string C3312 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3312"]);
               
            }
        }
        /// <summary>
        ///  Si consigna información del codigo bien sujeto a detraccion, debe informar la cuenta de BN y montos de la detraccion
        /// </summary>
        public string C3313 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3313"]);
               
            }
        }
        /// <summary>
        ///  Si consigna cuenta de BN y montos de la detraccion, debe informar el codigo bien sujeto a detraccion
        /// </summary>
        public string C3314 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3314"]);
               
            }
        }
        /// <summary>
        ///  Si el tipo de nota de credito es 13, el Importe total debe ser cero
        /// </summary>
        public string C3315 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3315"]);
               
            }
        }
        /// <summary>
        ///  Si el tipo de operación es 2002, debe informar los datos de la retención de segunda categoria
        /// </summary>
        public string C3316 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3316"]);
               
            }
        }
        /// <summary>
        ///  Si consigna infomacion de la retencion de segunda categoria, el tipo de operacion debe ser 2002
        /// </summary>
        public string C3317 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3317"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar la base de la retencion de segunda categoria
        /// </summary>
        public string C3318 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3318"]);
               
            }
        }
        /// <summary>
        ///  La suma de las cuotas debe ser igual al Monto neto pendiente de pago.
        /// </summary>
        public string C3319 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3319"]);
               
            }
        }
        /// <summary>
        ///  El monto neto pendiente de pago debe ser menor o igual al monto de la factura
        /// </summary>
        public string C3320 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3320"]);
               
            }
        }
        /// <summary>
        ///  La fecha de la cuota debe ser mayor a la fecha de emisión de la factura
        /// </summary>
        public string C3321 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3321"]);
               
            }
        }
        /// <summary>
        ///  El valor debe ser 01 que corresponde a Emisión de Percepción Excepcional
        /// </summary>
        public string C3322 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3322"]);
               
            }
        }
        /// <summary>
        ///  Solo se permite 1 documento relacionado cuando el Indicador de emisión excepcional es "01"
        /// </summary>
        public string C3323 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3323"]);
               
            }
        }
        /// <summary>
        ///  Solo se permite "01" para el Tipo de documento relacionado cuando el valor del Indicador de emisión excepcional es "01"
        /// </summary>
        public string C3324 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3324"]);
               
            }
        }
        /// <summary>
        ///  El valor del TAG debe corresponder a una Factura - Percepción cuando el valor del Indicador de emisión excepcional es "01" y el Tipo de documento relacionado es "01" 
        /// </summary>
        public string C3325 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3325"]);
               
            }
        }
        /// <summary>
        ///  Solo se permite referenciar siempre y cuando el comprobante de percepción excepcional en el que se referencia al documento relacionado haya sido revertido.
        /// </summary>
        public string C3326 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3326"]);
               
            }
        }
        /// <summary>
        ///  No esta permitido referenciar el Código del régimen de percepción con el regimen del documento relacionado.
        /// </summary>
        public string C3327 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C3327"]);
               
            }
        }
        /// <summary>
        ///  El documento ya fue presentado anteriormente.
        /// </summary>
        public string C4000 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4000"]);
               
            }
        }
        /// <summary>
        ///  El numero de RUC del receptor no existe.
        /// </summary>
        public string C4001 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4001"]);
               
            }
        }
        /// <summary>
        ///  Para el TaxTypeCode, esta usando un valor que no existe en el catalogo.
        /// </summary>
        public string C4002 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4002"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue registrado previamente como rechazado.
        /// </summary>
        public string C4003 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4003"]);
               
            }
        }
        /// <summary>
        ///  El DocumentTypeCode de las guias debe existir y tener 2 posiciones
        /// </summary>
        public string C4004 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4004"]);
               
            }
        }
        /// <summary>
        ///  El DocumentTypeCode de las guias debe ser 09 o 31
        /// </summary>
        public string C4005 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4005"]);
               
            }
        }
        /// <summary>
        ///  El ID de las guias debe tener informacion de la SERIE-NUMERO de guia.
        /// </summary>
        public string C4006 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4006"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el ID de las guias.
        /// </summary>
        public string C4007 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4007"]);
               
            }
        }
        /// <summary>
        ///  El DocumentTypeCode de Otros documentos relacionados no cumple con el estandar.
        /// </summary>
        public string C4008 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4008"]);
               
            }
        }
        /// <summary>
        ///  El DocumentTypeCode de Otros documentos relacionados tiene valores incorrectos.
        /// </summary>
        public string C4009 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4009"]);
               
            }
        }
        /// <summary>
        ///  El ID de los documentos relacionados no cumplen con el estandar.
        /// </summary>
        public string C4010 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4010"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag ID de documentos relacionados.
        /// </summary>
        public string C4011 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4011"]);
               
            }
        }
        /// <summary>
        ///  El ubigeo indicado en el comprobante no es el mismo que esta registrado para el contribuyente.
        /// </summary>
        public string C4012 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4012"]);
               
            }
        }
        /// <summary>
        ///  El RUC  del receptor no esta activo
        /// </summary>
        public string C4013 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4013"]);
               
            }
        }
        /// <summary>
        ///  El RUC del receptor no esta habido
        /// </summary>
        public string C4014 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4014"]);
               
            }
        }
        /// <summary>
        ///  Si el tipo de documento del receptor no es RUC, debe tener operaciones de exportacion
        /// </summary>
        public string C4015 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4015"]);
               
            }
        }
        /// <summary>
        ///  El total valor venta neta de oper. gravadas IGV debe ser mayor a 0.00 o debe existir oper. gravadas onerosas
        /// </summary>
        public string C4016 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4016"]);
               
            }
        }
        /// <summary>
        ///  El total valor venta neta de oper. inafectas IGV debe ser mayor a 0.00 o debe existir oper. inafectas onerosas o de export.
        /// </summary>
        public string C4017 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4017"]);
               
            }
        }
        /// <summary>
        ///  El total valor venta neta de oper. exoneradas IGV debe ser mayor a 0.00 o debe existir oper. exoneradas
        /// </summary>
        public string C4018 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4018"]);
               
            }
        }
        /// <summary>
        ///  El calculo del IGV no es correcto
        /// </summary>
        public string C4019 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4019"]);
               
            }
        }
        /// <summary>
        ///  El ISC no esta informado correctamente
        /// </summary>
        public string C4020 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4020"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con codigo 2000, el importe de percepcion debe ser mayor a 0.00
        /// </summary>
        public string C4021 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4021"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2001, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C4022 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4022"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2002, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C4023 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4023"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2003, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C4024 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4024"]);
               
            }
        }
        /// <summary>
        ///  Si usa la leyenda de Transferencia o Servivicio gratuito, todos los items deben ser  no onerosos
        /// </summary>
        public string C4025 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4025"]);
               
            }
        }
        /// <summary>
        ///  No se puede indicar Guia de remision de remitente y Guia de remision de transportista en el mismo documento
        /// </summary>
        public string C4026 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4026"]);
               
            }
        }
        /// <summary>
        ///  El importe total no coincide con la sumatoria de los valores de venta mas los tributos mas los cargos
        /// </summary>
        public string C4027 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4027"]);
               
            }
        }
        /// <summary>
        ///  El monto total de la nota de credito debe ser menor o igual al monto de la factura
        /// </summary>
        public string C4028 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4028"]);
               
            }
        }
        /// <summary>
        ///  El ubigeo indicado en el comprobante no es el mismo que esta registrado para el contribuyente
        /// </summary>
        public string C4029 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4029"]);
               
            }
        }
        /// <summary>
        ///  El ubigeo indicado en el comprobante no es el mismo que esta registrado para el contribuyente
        /// </summary>
        public string C4030 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4030"]);
               
            }
        }
        /// <summary>
        ///  Debe indicar el nombre comercial
        /// </summary>
        public string C4031 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4031"]);
               
            }
        }
        /// <summary>
        ///  Si el código del motivo de emisión de la Nota de Credito es 03, debe existir la descripción del item
        /// </summary>
        public string C4032 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4032"]);
               
            }
        }
        /// <summary>
        ///  La fecha de generación de la numeración debe ser menor o igual a la fecha de generación de la comunicación
        /// </summary>
        public string C4033 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4033"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue registrado previamente como baja
        /// </summary>
        public string C4034 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4034"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue registrado previamente como rechazado
        /// </summary>
        public string C4035 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4035"]);
               
            }
        }
        /// <summary>
        ///  La fecha de emisión de los rangos debe ser menor o igual a la fecha de generación del resumen
        /// </summary>
        public string C4036 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4036"]);
               
            }
        }
        /// <summary>
        ///  El calculo del Total de IGV del Item no es correcto
        /// </summary>
        public string C4037 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4037"]);
               
            }
        }
        /// <summary>
        ///  El resumen contiene menos series por tipo de documento que el envío anterior para la misma fecha de emisión
        /// </summary>
        public string C4038 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4038"]);
               
            }
        }
        /// <summary>
        ///  No ha consignado información del ubigeo del domicilio fiscal
        /// </summary>
        public string C4039 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4039"]);
               
            }
        }
        /// <summary>
        ///  Si el importe de percepcion es mayor a 0.00, debe utilizar una leyenda con codigo 2000
        /// </summary>
        public string C4040 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4040"]);
               
            }
        }
        /// <summary>
        ///  El codigo de pais debe ser PE
        /// </summary>
        public string C4041 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4041"]);
               
            }
        }
        /// <summary>
        ///  Para tipo de operación se está usando un valor que no existe en el catálogo. Nro. 17.
        /// </summary>
        public string C4042 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4042"]);
               
            }
        }
        /// <summary>
        ///  Para el TransportModeCode, se está usando un valor que no existe en el catálogo Nro. 18.
        /// </summary>
        public string C4043 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4043"]);
               
            }
        }
        /// <summary>
        ///  PrepaidAmount: Monto total anticipado no coincide con la sumatoria de los montos por documento de anticipo.
        /// </summary>
        public string C4044 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4044"]);
               
            }
        }
        /// <summary>
        ///  No debe consignar los datos del transportista para la modalidad de transporte 02 - Transporte Privado.
        /// </summary>
        public string C4045 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4045"]);
               
            }
        }
        /// <summary>
        ///  No debe consignar información adicional en la dirección para los locales anexos.
        /// </summary>
        public string C4046 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4046"]);
               
            }
        }
        /// <summary>
        ///  sac:SUNATTransaction/cbc:ID debe ser igual a 10 o igual a 11 cuando ingrese información para sustentar el traslado.
        /// </summary>
        public string C4047 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4047"]);
               
            }
        }
        /// <summary>
        ///  cac:AdditionalDocumentReference/cbc:DocumentTypeCode - Contiene un valor no valido para documentos relacionado.
        /// </summary>
        public string C4048 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4048"]);
               
            }
        }
        /// <summary>
        ///  El numero de DNI del receptor no existe.
        /// </summary>
        public string C4049 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4049"]);
               
            }
        }
        /// <summary>
        ///  El numero de RUC del proveedor no existe.
        /// </summary>
        public string C4050 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4050"]);
               
            }
        }
        /// <summary>
        ///  El RUC del proveedor no esta activo.
        /// </summary>
        public string C4051 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4051"]);
               
            }
        }
        /// <summary>
        ///  El RUC del proveedor no esta habido.
        /// </summary>
        public string C4052 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4052"]);
               
            }
        }
        /// <summary>
        ///  Proveedor no debe ser igual al remitente o destinatario.
        /// </summary>
        public string C4053 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4053"]);
               
            }
        }
        /// <summary>
        ///  La guía no debe contener datos del proveedor.
        /// </summary>
        public string C4054 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4054"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información en descripcion del motivo de traslado.
        /// </summary>
        public string C4055 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4055"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información en el tag SplitConsignmentIndicator.
        /// </summary>
        public string C4056 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4056"]);
               
            }
        }
        /// <summary>
        ///  GrossWeightMeasure - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4057 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4057"]);
               
            }
        }
        /// <summary>
        ///  cbc:TotalPackageQuantity - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4058 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4058"]);
               
            }
        }
        /// <summary>
        ///  Numero de bultos o pallets - información válida para importación.
        /// </summary>
        public string C4059 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4059"]);
               
            }
        }
        /// <summary>
        ///  La guía no debe contener datos del transportista.
        /// </summary>
        public string C4060 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4060"]);
               
            }
        }
        /// <summary>
        ///  El numero de RUC del transportista no existe.
        /// </summary>
        public string C4061 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4061"]);
               
            }
        }
        /// <summary>
        ///  El RUC del transportista no esta activo.
        /// </summary>
        public string C4062 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4062"]);
               
            }
        }
        /// <summary>
        ///  El RUC del transportista no esta habido.
        /// </summary>
        public string C4063 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4063"]);
               
            }
        }
        /// <summary>
        ///  /DespatchAdvice/cac:Shipment/cac:ShipmentStage/cac:TransportMeans/cbc:RegistrationNationalityID - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4064 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4064"]);
               
            }
        }
        /// <summary>
        ///  cac:TransportMeans/cbc:TransportMeansTypeCode - El valor ingresado como tipo de unidad de transporte es incorrecta.
        /// </summary>
        public string C4065 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4065"]);
               
            }
        }
        /// <summary>
        ///  El numero de DNI del conductor no existe.
        /// </summary>
        public string C4066 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4066"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del ubigeo del punto de llegada.
        /// </summary>
        public string C4067 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4067"]);
               
            }
        }
        /// <summary>
        ///  Direccion de punto de lllegada - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4068 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4068"]);
               
            }
        }
        /// <summary>
        ///  CityName - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4069 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4069"]);
               
            }
        }
        /// <summary>
        ///  District - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4070 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4070"]);
               
            }
        }
        /// <summary>
        ///  Numero de Contenedor - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4071 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4071"]);
               
            }
        }
        /// <summary>
        ///  Numero de contenedor - información válida para importación.
        /// </summary>
        public string C4072 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4072"]);
               
            }
        }
        /// <summary>
        ///  TransEquipmentTypeCode - El valor ingresado como tipo de contenedor es incorrecta.
        /// </summary>
        public string C4073 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4073"]);
               
            }
        }
        /// <summary>
        ///  Numero Precinto - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4074 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4074"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe informacion del ubigeo del punto de partida.
        /// </summary>
        public string C4075 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4075"]);
               
            }
        }
        /// <summary>
        ///  Direccion de punto de partida - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4076 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4076"]);
               
            }
        }
        /// <summary>
        ///  CityName - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4077 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4077"]);
               
            }
        }
        /// <summary>
        ///  District - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4078 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4078"]);
               
            }
        }
        /// <summary>
        ///  Código de Puerto o Aeropuerto - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4079 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4079"]);
               
            }
        }
        /// <summary>
        ///  Tipo de Puerto o Aeropuerto - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4080 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4080"]);
               
            }
        }
        /// <summary>
        ///  El XML No contiene El tag o No existe información del Numero de orden del item.
        /// </summary>
        public string C4081 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4081"]);
               
            }
        }
        /// <summary>
        ///  Número de Orden del Ítem - El orden del ítem no cumple con el formato establecido.
        /// </summary>
        public string C4082 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4082"]);
               
            }
        }
        /// <summary>
        ///  Cantidad - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4083 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4083"]);
               
            }
        }
        /// <summary>
        ///  Descripción del Ítem - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4084 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4084"]);
               
            }
        }
        /// <summary>
        ///  Código del Ítem - El dato ingresado no cumple con el formato establecido.
        /// </summary>
        public string C4085 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4085"]);
               
            }
        }
        /// <summary>
        ///  El emisor y el cliente son Agentes de percepción de combustible en la fecha de emisión.
        /// </summary>
        public string C4086 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4086"]);
               
            }
        }
        /// <summary>
        ///  El Comprobante de Pago Electrónico no está Registrado en los Sistemas de la SUNAT.
        /// </summary>
        public string C4087 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4087"]);
               
            }
        }
        /// <summary>
        ///  El Comprobante de Pago no está autorizado en los Sistemas de la SUNAT.
        /// </summary>
        public string C4088 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4088"]);
               
            }
        }
        /// <summary>
        ///  La operación con este cliente está excluida del sistema de percepción. Es agente de retención.
        /// </summary>
        public string C4089 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4089"]);
               
            }
        }
        /// <summary>
        ///  La operación con este cliente está excluida del sistema de percepción. Es entidad exceptuada de la percepción.
        /// </summary>
        public string C4090 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4090"]);
               
            }
        }
        /// <summary>
        ///  La operación con este proveedor está excluida del sistema de retención. Es agente de percepción, agente de retención o buen contribuyente.
        /// </summary>
        public string C4091 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4091"]);
               
            }
        }
        /// <summary>
        ///  El nombre comercial del emisor no cumple con el formato establecido
        /// </summary>
        public string C4092 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4092"]);
               
            }
        }
        /// <summary>
        ///  El codigo de ubigeo del domicilio fiscal del emisor no es válido
        /// </summary>
        public string C4093 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4093"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C4094 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4094"]);
               
            }
        }
        /// <summary>
        ///  La urbanización del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C4095 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4095"]);
               
            }
        }
        /// <summary>
        ///  La provincia del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C4096 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4096"]);
               
            }
        }
        /// <summary>
        ///  El departamento del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C4097 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4097"]);
               
            }
        }
        /// <summary>
        ///  El distrito del domicilio fiscal del emisor no cumple con el formato establecido
        /// </summary>
        public string C4098 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4098"]);
               
            }
        }
        /// <summary>
        ///  El nombre comercial del cliente no cumple con el formato establecido
        /// </summary>
        public string C4099 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4099"]);
               
            }
        }
        /// <summary>
        ///  El ubigeo del cliente no cumple con el formato establecido o no es válido
        /// </summary>
        public string C4100 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4100"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C4101 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4101"]);
               
            }
        }
        /// <summary>
        ///  La urbanización del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C4102 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4102"]);
               
            }
        }
        /// <summary>
        ///  La provincia del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C4103 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4103"]);
               
            }
        }
        /// <summary>
        ///  El departamento del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C4104 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4104"]);
               
            }
        }
        /// <summary>
        ///  El distrito del domicilio fiscal del cliente no cumple con el formato establecido
        /// </summary>
        public string C4105 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4105"]);
               
            }
        }
        /// <summary>
        ///  El nombre comercial del proveedor no cumple con el formato establecido
        /// </summary>
        public string C4106 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4106"]);
               
            }
        }
        /// <summary>
        ///  El ubigeo del proveedor no cumple con el formato establecido o no es válido
        /// </summary>
        public string C4107 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4107"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C4108 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4108"]);
               
            }
        }
        /// <summary>
        ///  La urbanización del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C4109 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4109"]);
               
            }
        }
        /// <summary>
        ///  La provincia del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C4110 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4110"]);
               
            }
        }
        /// <summary>
        ///  El departamento del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C4111 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4111"]);
               
            }
        }
        /// <summary>
        ///  El distrito del domicilio fiscal del proveedor no cumple con el formato establecido
        /// </summary>
        public string C4112 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4112"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene o no existe informacion en el tag de  Información que sustenta el traslado.
        /// </summary>
        public string C4120 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4120"]);
               
            }
        }
        /// <summary>
        ///  Para el tipo de operación no se consigna el tag SUNATEmbededDespatchAdvice de Información de sustento de traslado.
        /// </summary>
        public string C4121 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4121"]);
               
            }
        }
        /// <summary>
        ///  Factura con información que sustenta el traslado, debe registrar leyenda 2008.
        /// </summary>
        public string C4122 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4122"]);
               
            }
        }
        /// <summary>
        ///  sac:SUNATEmbededDespatchAdvice - Para Factura Electrónica Remitente no se consigna datos en documento de referencia(cac:OrderReference).
        /// </summary>
        public string C4123 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4123"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Remitente debe indicar sujeto que realiza el traslado de bienes (1: Vendendor o 2: Comprador).
        /// </summary>
        public string C4124 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4124"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Remitente debe indicar modalidad de transporte para el sustento de traslado de bienes (cbc:TransportModeCode).
        /// </summary>
        public string C4125 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4125"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Debe indicar fecha de inicio de traslado para el  sustento de traslado de bienes (cac:TransitPeriod/cbc:StartDate).
        /// </summary>
        public string C4126 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4126"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Remitente debe indicar el punto de llegada para el sustento de traslado de bienes (cac:DeliveryAddrees).
        /// </summary>
        public string C4127 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4127"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Remitente debe indicar el punto de partida para el sustento de traslado de bienes (cac:OriginAddress).
        /// </summary>
        public string C4128 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4128"]);
               
            }
        }
        /// <summary>
        ///  Para Factura Electrónica Remitente no se consigna indicador de subcontratación (cbc:MarkAttentionIndicator)
        /// </summary>
        public string C4129 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4129"]);
               
            }
        }
        /// <summary>
        ///  sac:SUNATEmbededDespatchAdvice - Para Factura Electrónica Remitente debe consignar datos en documento de referencia (cac:OrderReference).
        /// </summary>
        public string C4130 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4130"]);
               
            }
        }
        /// <summary>
        ///  sac:SUNATEmbededDespatchAdvice - Para Factura Electrónica Transportista no se consigna destinatario para el sustento de traslado de bienes (cac:DeliveryCustomerParty).
        /// </summary>
        public string C4131 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4131"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Transportista no se consigna sujeto que realiza el traslado (cbc:HandlingCode).
        /// </summary>
        public string C4132 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4132"]);
               
            }
        }
        /// <summary>
        ///  Para Factura Electrónica Transportista no se consigna peso total de la factura para el sustento de traslado de bienes (cbc:GrossWeightMeasure).
        /// </summary>
        public string C4133 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4133"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Transportista no se consigna modalidad de transporte para el sustento de traslado de bienes (cbc:TransportModeCode).
        /// </summary>
        public string C4134 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4134"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Transportista no se consigna punto de llegada para el sustento de traslado de bienes (cac:DeliveryAddress).
        /// </summary>
        public string C4135 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4135"]);
               
            }
        }
        /// <summary>
        ///  cac:Shipment - Para Factura Electrónica Transportista no se consigna punto de partida para el sustento de traslado de bienes (cac:OriginAddress).
        /// </summary>
        public string C4136 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4136"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Debe consignar número de  documento de referencia que sustenta el traslado (./cbc:ID).
        /// </summary>
        public string C4137 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4137"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Debe consignar tipo de documento de referencia que sustenta el traslado (./cbc:OrderTypeCode).
        /// </summary>
        public string C4138 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4138"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Tipo de documento de referencia que sustenta el traslado no válido (01 - Factura o 09 - Guía de Remisión).
        /// </summary>
        public string C4139 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4139"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Serie-Numero ingresado en documento de referencia que sustenta el traslado no cumple con el formato establecido.
        /// </summary>
        public string C4140 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4140"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Debe consignar RUC emisor del documento de referencia que sustenta el traslado (./cac:DocumentReference/cac:IssuerParty/cac:PartyIdentification/cbc:ID).
        /// </summary>
        public string C4141 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4141"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference -  RUC emisor del documento de referencia que sustenta el traslado no cumple con el formato establecido.
        /// </summary>
        public string C4142 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4142"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - RUC Emisor de documento de referencia que sustenta el traslado no existe o se encuentra dado de baja.
        /// </summary>
        public string C4143 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4143"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Documento de Referencia ingresado no corresponde a un comprobante electrónico declarado y activo en SUNAT.
        /// </summary>
        public string C4144 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4144"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Documento de Referencia ingresado no corresponde comprobante autorizado por SUNAT.
        /// </summary>
        public string C4145 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4145"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Nombre o razon social del emisodr de referencia que sustenta el traslado de bienes no cumple con un formato válido.
        /// </summary>
        public string C4146 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4146"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar numero de documento de identidad del destinatario
        /// </summary>
        public string C4147 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4147"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar tipo de documento de identidad del destinatario
        /// </summary>
        public string C4148 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4148"]);
               
            }
        }
        /// <summary>
        ///  Tipo de documento de identidad del destinatario no válido (Catálogo N° 06)
        /// </summary>
        public string C4149 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4149"]);
               
            }
        }
        /// <summary>
        ///  Numero de documento de identidad del destinatario no cumple con un formato válido
        /// </summary>
        public string C4150 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4150"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar apellidos y nombres, denominación o razón social del destinatario
        /// </summary>
        public string C4151 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4151"]);
               
            }
        }
        /// <summary>
        ///  Nombre o razon social del destinatario no cumple con un formato válido
        /// </summary>
        public string C4152 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4152"]);
               
            }
        }
        /// <summary>
        ///  cbc:HandlingCode - Sujeto que realiza el traslado no es valido.
        /// </summary>
        public string C4153 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4153"]);
               
            }
        }
        /// <summary>
        ///  cbc:GrossWeightMeasure@unitCode: El valor ingresado en la unidad de medida para el peso bruto total no es correcta (KGM).
        /// </summary>
        public string C4154 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4154"]);
               
            }
        }
        /// <summary>
        ///  GrossWeightMeasure - El valor ingresado no cumple con el estandar.
        /// </summary>
        public string C4155 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4155"]);
               
            }
        }
        /// <summary>
        ///  Debe ingresar la totalidad de la información requerida al transportista.
        /// </summary>
        public string C4156 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4156"]);
               
            }
        }
        /// <summary>
        ///  No existe información en el tag datos de conductores.
        /// </summary>
        public string C4157 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4157"]);
               
            }
        }
        /// <summary>
        ///  No existe información en el tag datos de vehículos.
        /// </summary>
        public string C4158 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4158"]);
               
            }
        }
        /// <summary>
        ///  No es necesario consignar los datos del transportista para una operación de Transporte Privado.
        /// </summary>
        public string C4159 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4159"]);
               
            }
        }
        /// <summary>
        ///  cac:CarrierParty: Debe consignar número de  documento de identidad del transportista.
        /// </summary>
        public string C4160 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4160"]);
               
            }
        }
        /// <summary>
        ///  cac:CarrierParty: Debe consignar tipo de documento de identidad del transportista.
        /// </summary>
        public string C4161 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4161"]);
               
            }
        }
        /// <summary>
        ///  cac:CarrierParty: Tipo de documento de identidad del transportista debe ser 6-RUC
        /// </summary>
        public string C4162 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4162"]);
               
            }
        }
        /// <summary>
        ///  cac:CarrierParty: Numero de documento de identidad del transportista no cumple con un formato válido.
        /// </summary>
        public string C4163 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4163"]);
               
            }
        }
        /// <summary>
        ///  cac:CarrierParty: Debe consignar apellidos y nombres, denominación o razón social del transportista.
        /// </summary>
        public string C4164 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4164"]);
               
            }
        }
        /// <summary>
        ///  cac:CarrierParty: nombre o razon social del transportista no cumple con un formato válido.
        /// </summary>
        public string C4165 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4165"]);
               
            }
        }
        /// <summary>
        ///  cac: TransportHandlingUnit: Numero de placa (cbc:ID) no coincide con el numero de placa del vehiculo prinicipal.
        /// </summary>
        public string C4166 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4166"]);
               
            }
        }
        /// <summary>
        ///  cac:RoadTransport/cbc:LicensePlateID: Numero de placa del vehículo no cumple con el formato válido.
        /// </summary>
        public string C4167 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4167"]);
               
            }
        }
        /// <summary>
        ///  cac: TransportHandlingUnit: Numero de placa del vehículo principal no existe o no cumple con el formato válido (cbc:ID).
        /// </summary>
        public string C4168 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4168"]);
               
            }
        }
        /// <summary>
        ///  cac:TransportEquipment: debe consignar al menos un vehiculo secundario.
        /// </summary>
        public string C4169 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4169"]);
               
            }
        }
        /// <summary>
        ///  cac:TransportEquipment: Numero de placa del vehículo secundario no cumple con el formato válido (cbc:ID).
        /// </summary>
        public string C4170 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4170"]);
               
            }
        }
        /// <summary>
        ///  cac:DriverPerson: Debe consignar número de  documento de identidad del conductor (cbc:ID).
        /// </summary>
        public string C4171 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4171"]);
               
            }
        }
        /// <summary>
        ///  cac:DriverPerson: Debe consignar tipo de documento de identidad del conductor (cbc:ID/@schemeID).
        /// </summary>
        public string C4172 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4172"]);
               
            }
        }
        /// <summary>
        ///  cac:DriverPerson: Tipo de documento de identidad del conductor no válido (Catalogo Nro 06).
        /// </summary>
        public string C4173 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4173"]);
               
            }
        }
        /// <summary>
        ///  cac:DriverPerson: Numero de documento de identidad del conductor no cumple con el formato válido.
        /// </summary>
        public string C4174 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4174"]);
               
            }
        }
        /// <summary>
        ///  cac:DeliveryAddress: Debe consignar código de ubigeo de punto de llegada (cbc:ID).
        /// </summary>
        public string C4175 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4175"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como código de ubigeo de punto de llegada no corresponde a un valor esperado (catalogo nro 13).
        /// </summary>
        public string C4176 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4176"]);
               
            }
        }
        /// <summary>
        ///  cac:DeliveryAddress: Debe consignar código de ubigeo válido (Catálogo N° 13).
        /// </summary>
        public string C4177 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4177"]);
               
            }
        }
        /// <summary>
        ///  cac:DeliveryAddress: Debe consignar Dirección del punto de llegada (cbc:StreetName).
        /// </summary>
        public string C4178 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4178"]);
               
            }
        }
        /// <summary>
        ///  cac:DeliveryAddress: Dirección completa y detallada del punto de llegada no cumple con el formato válido.
        /// </summary>
        public string C4179 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4179"]);
               
            }
        }
        /// <summary>
        ///  cac:OriginAddress: Debe consignar código de ubigeo de punto de partida (cbc:ID).
        /// </summary>
        public string C4180 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4180"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como código de ubigeo de punto de partida no corresponde a un valor esperado (catalogo nro 13).
        /// </summary>
        public string C4181 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4181"]);
               
            }
        }
        /// <summary>
        ///  cac:OriginAddress: Debe consignar código de ubigeo válido (Catálogo N° 13).
        /// </summary>
        public string C4182 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4182"]);
               
            }
        }
        /// <summary>
        ///  cac:OriginAddress: Debe consignar Dirección detallada del punto de partida (cbc:StreetName).
        /// </summary>
        public string C4183 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4183"]);
               
            }
        }
        /// <summary>
        ///  cac:OriginAddres: Dirección completa y detallada del punto de partida no cumple con el estandar.
        /// </summary>
        public string C4184 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4184"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - Serie y numero no se encuentra registrado como baja por cambio de destinatario.
        /// </summary>
        public string C4185 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4185"]);
               
            }
        }
        /// <summary>
        ///  cbc:Note - El campo observaciones supera la cantidad maxima especificada (250 carácteres).
        /// </summary>
        public string C4186 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4186"]);
               
            }
        }
        /// <summary>
        ///  cac:OrderReference - El campo Tipo de documento (descripción) supera la cantidad maxima especificada (50 carácteres).
        /// </summary>
        public string C4187 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4187"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información del nombre o razon social del tercero relacionado.
        /// </summary>
        public string C4188 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4188"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como tipo de documento del nombre o razon social del tercero relacionado es incorrecto.
        /// </summary>
        public string C4189 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4189"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como descripcion de motivo de traslado no cumple con el estandar.
        /// </summary>
        public string C4190 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4190"]);
               
            }
        }
        /// <summary>
        ///  Para el motivo de traslado, no se consigna información en el numero de DAM.
        /// </summary>
        public string C4191 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4191"]);
               
            }
        }
        /// <summary>
        ///  Para el motivo de traslado, no se consigna información del manifiesto de carga.
        /// </summary>
        public string C4192 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4192"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como indicador de transbordo programado no cumple con el estandar.
        /// </summary>
        public string C4193 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4193"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe información en peso bruto total de la guia.
        /// </summary>
        public string C4194 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4194"]);
               
            }
        }
        /// <summary>
        ///  Numero de bultos o pallets es una información válida solo para importación.
        /// </summary>
        public string C4195 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4195"]);
               
            }
        }
        /// <summary>
        ///  La fecha de recepción en SUNAT es mayor a 1 hora(s) respecto a la fecha de comprobación por OSE
        /// </summary>
        public string C4196 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4196"]);
               
            }
        }
        /// <summary>
        ///  IssueTime - El dato ingresado  no cumple con el patrón hh:mm:ss.sssss
        /// </summary>
        public string C4197 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4197"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del código de local anexo del emisor
        /// </summary>
        public string C4198 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4198"]);
               
            }
        }
        /// <summary>
        ///  El código de local anexo consignado no se encuentra declarado en el RUC
        /// </summary>
        public string C4199 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4199"]);
               
            }
        }
        /// <summary>
        ///  Debe corresponder a algún valor válido establecido en el catálogo 13
        /// </summary>
        public string C4200 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4200"]);
               
            }
        }
        /// <summary>
        ///  EL monto del ISC se debe detallar a nivel de línea
        /// </summary>
        public string C4201 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4201"]);
               
            }
        }
        /// <summary>
        ///  El valor ingresado como numero de DAM no cumple con el estandar
        /// </summary>
        public string C4202 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4202"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en VoidReasonDescription debe contener información válida
        /// </summary>
        public string C4203 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4203"]);
               
            }
        }
        /// <summary>
        ///  Comprobante físico no se encuentra autorizado como comprobante de contingencia
        /// </summary>
        public string C4204 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4204"]);
               
            }
        }
        /// <summary>
        ///  El DNI debe tener 8 caracteres numéricos
        /// </summary>
        public string C4207 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4207"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como numero de documento de identidad del receptor no cumple con el formato establecido
        /// </summary>
        public string C4208 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4208"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado no cumple con el formato establecido
        /// </summary>
        public string C4209 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4209"]);
               
            }
        }
        /// <summary>
        ///  Vendedor supera el monto permitido para la emision de una liquidacion de compra
        /// </summary>
        public string C4210 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4210"]);
               
            }
        }
        /// <summary>
        ///  El importe del campo /cac:LegalMonetaryTotal/cbc:TaxInclusiveAmount no coincide con el valor calculado
        /// </summary>
        public string C4211 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4211"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el Total Valor de Venta
        /// </summary>
        public string C4212 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4212"]);
               
            }
        }
        /// <summary>
        ///  El comprobante tiene observaciones que no han sido detectados 
        /// </summary>
        public string C4230 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4230"]);
               
            }
        }
        /// <summary>
        ///  El código de Ubigeo no existe en el listado.
        /// </summary>
        public string C4231 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4231"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de los IGV de línea no corresponden al total
        /// </summary>
        public string C4232 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4232"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en order de compra no cumple con el formato establecido.
        /// </summary>
        public string C4233 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4233"]);
               
            }
        }
        /// <summary>
        ///  El código de producto no cumple con el formato establecido
        /// </summary>
        public string C4234 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4234"]);
               
            }
        }
        /// <summary>
        ///  No existe información en el nombre del concepto.
        /// </summary>
        public string C4235 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4235"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como direccion completa y detallada no cumple con el formato establecido.
        /// </summary>
        public string C4236 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4236"]);
               
            }
        }
        /// <summary>
        ///  La tasa del tributo de la línea no corresponde al valor esperado
        /// </summary>
        public string C4237 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4237"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como urbanización no cumple con el formato establecido
        /// </summary>
        public string C4238 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4238"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como provincia no cumple con el formato establecido
        /// </summary>
        public string C4239 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4239"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como departamento no cumple con el formato establecido
        /// </summary>
        public string C4240 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4240"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como distrito no cumple con el formato establecido
        /// </summary>
        public string C4241 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4241"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como local anexo no cumple con el formato establecido
        /// </summary>
        public string C4242 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4242"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2007, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C4243 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4243"]);
               
            }
        }
        /// <summary>
        ///  Si se utiliza la leyenda con código 2008, el total de operaciones exoneradas debe ser mayor a 0.00
        /// </summary>
        public string C4244 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4244"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como tipo de operación no corresponde a un valor esperado (catálogo nro. 51)
        /// </summary>
        public string C4245 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4245"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene un identificador de pago repetido en los anticipos
        /// </summary>
        public string C4246 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4246"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene un identificador de pago no relacionado a un documento de anticipo
        /// </summary>
        public string C4247 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4247"]);
               
            }
        }
        /// <summary>
        ///  El comprobante contiene mas de un documento de anticipo relacionado al mismo identificador de pago.
        /// </summary>
        public string C4248 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4248"]);
               
            }
        }
        /// <summary>
        ///  El código de motivo de traslado no existe en el listado (catalogo nro. 20)
        /// </summary>
        public string C4249 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4249"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como schemeAgencyName es incorrecto.
        /// </summary>
        public string C4250 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4250"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @listAgencyName es incorrecto.
        /// </summary>
        public string C4251 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4251"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @listName es incorrecto.
        /// </summary>
        public string C4252 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4252"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @listURI es incorrecto.
        /// </summary>
        public string C4253 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4253"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @listID es incorrecto.
        /// </summary>
        public string C4254 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4254"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @schemeName es incorrecto.
        /// </summary>
        public string C4255 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4255"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @schemeAgencyName es incorrecto.
        /// </summary>
        public string C4256 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4256"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @schemeURI es incorrecto.
        /// </summary>
        public string C4257 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4257"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @unitCodeListID es incorrecto.
        /// </summary>
        public string C4258 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4258"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @unitCodeListAgencyName es incorrecto.
        /// </summary>
        public string C4259 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4259"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @name es incorrecto.
        /// </summary>
        public string C4260 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4260"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @listSchemeURI es incorrecto.
        /// </summary>
        public string C4261 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4261"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el atributo o no existe lugar donde se entrega el bien para venta itinerante
        /// </summary>
        public string C4262 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4262"]);
               
            }
        }
        /// <summary>
        ///  Si no es una venta itinerante, no corresponde consignar lugar donde se entrega el bien 
        /// </summary>
        public string C4263 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4263"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el codigo de leyenda 2007 para el tipo de operación IVAP
        /// </summary>
        public string C4264 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4264"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el codigo de leyenda 2006 para tipo de operación de detracciones
        /// </summary>
        public string C4265 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4265"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el codigo de leyenda 2005 para el tipo de operación Venta itinerante
        /// </summary>
        public string C4266 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4266"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de producto GS1 no cumple con el formato establecido
        /// </summary>
        public string C4267 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4267"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como cargo/descuento no es valido a nivel de ítem.
        /// </summary>
        public string C4268 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4268"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de producto no cumple con el formato establecido.
        /// </summary>
        public string C4269 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4269"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como detalle del viaje no cumple con el formato establecido.
        /// </summary>
        public string C4270 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4270"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como descripcion del tramo no cumple con el formato establecido.
        /// </summary>
        public string C4271 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4271"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como valor refrencia del tramo virtual no cumple con el formato establecido.
        /// </summary>
        public string C4272 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4272"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como configuración vehicular no cumple con el formato establecido.
        /// </summary>
        public string C4273 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4273"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como tipo de carga util es incorrecto.
        /// </summary>
        public string C4274 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4274"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene el tag o no existe información del valor de la carga en TM.
        /// </summary>
        public string C4275 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4275"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como valor de la carga en TM cumple con el formato establecido.
        /// </summary>
        public string C4276 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4276"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como unidad de medida de la carga  del vehiculo no corresponde al valor esperado.
        /// </summary>
        public string C4277 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4277"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como valor referencial de carga util nominal no cumple con el formato establecido.
        /// </summary>
        public string C4278 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4278"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como codigo de identificación de concepto tributario no es valido (catalogo nro 55)
        /// </summary>
        public string C4279 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4279"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como valor del concepto de la linea no cumple con el formato establecido.
        /// </summary>
        public string C4280 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4280"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como cantidad del concepto de la linea no cumple con el formato establecido.
        /// </summary>
        public string C4281 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4281"]);
               
            }
        }
        /// <summary>
        ///  La fecha de ingreso al establecimiento es mayor a la fecha de salida al establecimiento.
        /// </summary>
        public string C4282 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4282"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como atributo @schemeID es incorrecto.
        /// </summary>
        public string C4283 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4283"]);
               
            }
        }
        /// <summary>
        ///  El cargo/descuento consignado no es permitido para el tipo de comprobante
        /// </summary>
        public string C4284 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4284"]);
               
            }
        }
        /// <summary>
        ///  El emisor a la fecha no se encuentra registrado ó habilitado con la condición de Agente de percepción
        /// </summary>
        public string C4285 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4285"]);
               
            }
        }
        /// <summary>
        ///  Si ha consignado Transporte Publico, debe consignar Datos del transportista.
        /// </summary>
        public string C4286 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4286"]);
               
            }
        }
        /// <summary>
        ///  El precio unitario de la operación que está informando difiere de los cálculos realizados en base a la información remitida
        /// </summary>
        public string C4287 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4287"]);
               
            }
        }
        /// <summary>
        ///  El valor de venta por ítem difiere de los importes consignados.
        /// </summary>
        public string C4288 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4288"]);
               
            }
        }
        /// <summary>
        ///  El valor de cargo/descuento por ítem difiere de los importes consignados.
        /// </summary>
        public string C4289 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4289"]);
               
            }
        }
        /// <summary>
        ///  El cálculo del IGV es Incorrecto
        /// </summary>
        public string C4290 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4290"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como cargo/descuento no es valido a nivel global.
        /// </summary>
        public string C4291 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4291"]);
               
            }
        }
        /// <summary>
        ///  Sólo hasta el 31.08.2019 se encuentra exceptuado de utilizar la versión 2.1 del estándar UBL 
        /// </summary>
        public string C4292 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4292"]);
               
            }
        }
        /// <summary>
        ///  El importe total de impuestos por línea no coincide con la sumatoria de los impuestos por línea.
        /// </summary>
        public string C4293 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4293"]);
               
            }
        }
        /// <summary>
        ///  La base imponible a nivel de línea difiere de la información consignada en el comprobante
        /// </summary>
        public string C4294 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4294"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - Exportaciones de línea no corresponden al total
        /// </summary>
        public string C4295 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4295"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones inafectas de línea no corresponden al total
        /// </summary>
        public string C4296 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4296"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones exoneradas de línea no corresponden al total
        /// </summary>
        public string C4297 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4297"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones gratuitas de línea no corresponden al total
        /// </summary>
        public string C4298 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4298"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - operaciones gravadas de línea no corresponden al total
        /// </summary>
        public string C4299 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4299"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total valor de venta - IVAP de línea no corresponden al total
        /// </summary>
        public string C4300 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4300"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de impuestos globales no corresponde al monto total de impuestos.
        /// </summary>
        public string C4301 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4301"]);
               
            }
        }
        /// <summary>
        ///  El importe del IVAP no corresponden al determinado por la informacion consignada.
        /// </summary>
        public string C4302 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4302"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del monto base - ISC de línea no corresponden al total
        /// </summary>
        public string C4303 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4303"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del monto base - Otros tributos de línea no corresponden al total
        /// </summary>
        public string C4304 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4304"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo ISC de línea no corresponden al total
        /// </summary>
        public string C4305 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4305"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo Otros tributos de línea no corresponden al total
        /// </summary>
        public string C4306 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4306"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria consignados en descuentos globales no corresponden al total.
        /// </summary>
        public string C4307 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4307"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria consignados en cargos globales no corresponden al total
        /// </summary>
        public string C4308 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4308"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de valor de venta no corresponde a los importes consignados
        /// </summary>
        public string C4309 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4309"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del Total del valor de venta más los impuestos no concuerda con la base imponible
        /// </summary>
        public string C4310 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4310"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria de los IGV de operaciones gratuitas de la línea (codigo tributo 9996) no corresponden al total
        /// </summary>
        public string C4311 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4311"]);
               
            }
        }
        /// <summary>
        ///  El importe total del comprobante no coincide con el valor calculado
        /// </summary>
        public string C4312 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4312"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como unidad de medida de los dias de permanencia no corresponde al valor esperado.
        /// </summary>
        public string C4313 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4313"]);
               
            }
        }
        /// <summary>
        ///  El monto para el redondeo del Importe Total excede el valor permitido
        /// </summary>
        public string C4314 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4314"]);
               
            }
        }
        /// <summary>
        ///  La moneda debe ser la misma en todo el documento. Salvo las percepciones que sólo son en moneda nacional.
        /// </summary>
        public string C4315 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4315"]);
               
            }
        }
        /// <summary>
        ///  La moneda del monto para el redondeo debe ser PEN
        /// </summary>
        public string C4316 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4316"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar el Total Precio de Venta
        /// </summary>
        public string C4317 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4317"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado en el campo cac:TaxSubtotal/cbc:TaxAmount del ítem no coincide con el valor calculado
        /// </summary>
        public string C4318 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4318"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como unidad de medida no corresponde al valor esperado
        /// </summary>
        public string C4320 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4320"]);
               
            }
        }
        /// <summary>
        ///  La sumatoria del total del importe del tributo ICBPER de línea no corresponden al total
        /// </summary>
        public string C4321 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4321"]);
               
            }
        }
        /// <summary>
        ///  El valor de cargo/descuento global difiere de los importes consignados
        /// </summary>
        public string C4322 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4322"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como tipo de usuario no corresponde al valor esperado
        /// </summary>
        public string C4323 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4323"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como tipo de tarifa contratada no corresponde al valor esperado
        /// </summary>
        public string C4324 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4324"]);
               
            }
        }
        /// <summary>
        ///  Para Factura Electrónica Transportista debe indicar el número de constancia de inscripcion del vehiculo o certificado de habilitación vehicular
        /// </summary>
        public string C4326 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4326"]);
               
            }
        }
        /// <summary>
        ///  Para Factura Electrónica Transportista debe consignar el indicador de subcontratacion
        /// </summary>
        public string C4327 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4327"]);
               
            }
        }
        /// <summary>
        ///  El valor del indicador de subcontratacion no corresponde al valor esperado
        /// </summary>
        public string C4328 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4328"]);
               
            }
        }
        /// <summary>
        ///  Para factura electrónica remitente debe consignar el motivo de traslado
        /// </summary>
        public string C4329 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4329"]);
               
            }
        }
        /// <summary>
        ///  Para factura electrónica tranportista debe indicar la GRE remitente o FE remitente  
        /// </summary>
        public string C4330 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4330"]);
               
            }
        }
        /// <summary>
        ///  Debe consignar obligatoriamente Codigo de producto SUNAT o Codigo de producto GTIN
        /// </summary>
        public string C4331 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4331"]);
               
            }
        }
        /// <summary>
        ///  El Código producto de SUNAT no es válido
        /// </summary>
        public string C4332 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4332"]);
               
            }
        }
        /// <summary>
        ///  Si utiliza el estandar GS1 debe especificar el tipo de estructura GTIN
        /// </summary>
        public string C4333 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4333"]);
               
            }
        }
        /// <summary>
        ///  El código de producto GS1 no cumple el estandar
        /// </summary>
        public string C4334 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4334"]);
               
            }
        }
        /// <summary>
        ///  El tipo de estructura GS1 no tiene un valor permitido
        /// </summary>
        public string C4335 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4335"]);
               
            }
        }
        /// <summary>
        ///  A partir del 1 de julio de 2019 se encuentra obligado a emitir a traves de SEE-OSE y/o SEE-SOL
        /// </summary>
        public string C4336 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4336"]);
               
            }
        }
        /// <summary>
        ///  El Codigo de producto SUNAT debe especificarse como minimo al tercer nivel jerarquico (a nivel de clase del codigo UNSPSC)
        /// </summary>
        public string C4337 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4337"]);
               
            }
        }
        /// <summary>
        ///  RegistrationName - El nombre o razon social del emisor no cumple con el estandar
        /// </summary>
        public string C4338 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4338"]);
               
            }
        }
        /// <summary>
        ///  El codigo de ubigeo del domicilio del vendedor no es válido
        /// </summary>
        public string C4339 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4339"]);
               
            }
        }
        /// <summary>
        ///  La dirección completa y detallada del domicilio del vendedor no cumple con el formato establecido
        /// </summary>
        public string C4340 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4340"]);
               
            }
        }
        /// <summary>
        ///  La urbanización del domicilio del vendedor no cumple con el formato establecido
        /// </summary>
        public string C4341 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4341"]);
               
            }
        }
        /// <summary>
        ///  La provincia del domicilio del vendedor no cumple con el formato establecido
        /// </summary>
        public string C4342 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4342"]);
               
            }
        }
        /// <summary>
        ///  El departamento del domicilio del vendedor no cumple con el formato establecido
        /// </summary>
        public string C4343 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4343"]);
               
            }
        }
        /// <summary>
        ///  El distrito del domicilio del vendedor no cumple con el formato establecido
        /// </summary>
        public string C4344 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4344"]);
               
            }
        }
        /// <summary>
        ///  El monto base global de la retencion de renta no coincide con el valor calculado
        /// </summary>
        public string C4345 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4345"]);
               
            }
        }
        /// <summary>
        ///  El importe de la retencion de renta no coincide con el valor calculado
        /// </summary>
        public string C4346 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4346"]);
               
            }
        }
        /// <summary>
        ///  El comprobante fue enviado fuera del plazo permitido.
        /// </summary>
        public string C4347 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4347"]);
               
            }
        }
        /// <summary>
        ///  El importe del campo /cac:InvoiceLine/cac:ItemPriceExtension/cbc:Amount no coincide con el valor calculado
        /// </summary>
        public string C4348 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4348"]);
               
            }
        }
        /// <summary>
        ///  El importe del campo /cac:InvoiceLine/cac:SubInvoiceLine/cac:ItemPriceExtension/cbc:Amount no coincide con el valor calculado
        /// </summary>
        public string C4349 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4349"]);
               
            }
        }
        /// <summary>
        ///  El nombre o razon social registrado no cumple con el estandar
        /// </summary>
        public string C4350 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4350"]);
               
            }
        }
        /// <summary>
        ///  El Numero de RUC no esta activo
        /// </summary>
        public string C4351 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4351"]);
               
            }
        }
        /// <summary>
        ///  El Numero de RUC es no habido
        /// </summary>
        public string C4352 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4352"]);
               
            }
        }
        /// <summary>
        ///  Si "Tipo de documento de identidad" es "6", el formato del Tag UBL es diferente a numérico de 11 dígitos
        /// </summary>
        public string C4353 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4353"]);
               
            }
        }
        /// <summary>
        ///  El importe del campo /cac:InvoiceLine/cbc:LineExtensionAmount no coincide con el valor calculado
        /// </summary>
        public string C4354 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4354"]);
               
            }
        }
        /// <summary>
        ///  El importe del campo /cac:InvoiceLine/cac:SubInvoiceLine/cbc:LineExtensionAmount no coincide con el valor calculado
        /// </summary>
        public string C4355 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4355"]);
               
            }
        }
        /// <summary>
        ///  El importe del campo /cac:SubInvoiceLine/cac:TaxTotal/cbc:TaxAmount no coincide con el valor calculado
        /// </summary>
        public string C4356 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4356"]);
               
            }
        }
        /// <summary>
        ///  El dato ingresado como cargo/descuento no es valido a nivel de /cac:SubInvoiceLine
        /// </summary>
        public string C4357 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4357"]);
               
            }
        }
        /// <summary>
        ///  El valor de cargo/descuento a nivel de /cac:SubInvoiceLine difiere de los importes consignados.
        /// </summary>
        public string C4358 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4358"]);
               
            }
        }
        /// <summary>
        ///  El monto de ISC de la línea no coincide con el valor calculado
        /// </summary>
        public string C4359 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4359"]);
               
            }
        }
        /// <summary>
        ///  El monto de IGV de la línea no coincide con el valor calculado
        /// </summary>
        public string C4360 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4360"]);
               
            }
        }
        /// <summary>
        ///  El codigo de leyenda no existe
        /// </summary>
        public string C4361 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4361"]);
               
            }
        }
        /// <summary>
        ///  El codigo de leyenda no debe repetirse en el comprobante
        /// </summary>
        public string C4362 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4362"]);
               
            }
        }
        /// <summary>
        ///  El importe del campo /cac:LegalMonetaryTotal/cbc:PayableAmount no coincide con el valor calculado
        /// </summary>
        public string C4363 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4363"]);
               
            }
        }
        /// <summary>
        ///  Para entidades emisoras locales debe informar el detalle de las comisiones y cargos
        /// </summary>
        public string C4364 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4364"]);
               
            }
        }
        /// <summary>
        ///  El monto de IGV a nivel de /cac:SubInvoiceLine no coincide con el valor calculado
        /// </summary>
        public string C4365 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4365"]);
               
            }
        }
        /// <summary>
        ///  El XML no contiene tag o no existe información de la fecha del concepto por linea
        /// </summary>
        public string C4366 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4366"]);
               
            }
        }
        /// <summary>
        ///  El tipo de nota de crédito 04, 05 y 08 no debería estar vinculado a una boleta
        /// </summary>
        public string C4367 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4367"]);
               
            }
        }
        /// <summary>
        ///  El tipo de moneda de la nota debe ser el mismo que el declarado en el documento que modifica
        /// </summary>
        public string C4368 {
            get {
                                 return Convert.ToString(parametrosConfiguracion["C4368"]);
               
            }
        }
    

}



/// <summary>
///  Parametros del concar
/// </summary>
public sealed class ConcarSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public ConcarSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",17);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static ConcarSettings defaultInstance = new ConcarSettings();
        
        public static ConcarSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new ConcarSettings();
        }





        /// <summary>
        ///  SubDiarioRegistroVentas
        /// </summary>
        public string SubDiarioRegistroVentas {
            get {
                                 return Convert.ToString(parametrosConfiguracion["SubDiarioRegistroVentas"]);
               
            }
        }
        /// <summary>
        ///  MonedaSoles
        /// </summary>
        public string MonedaSoles {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MonedaSoles"]);
               
            }
        }
        /// <summary>
        ///  TipoDocumentoBoletaVenta
        /// </summary>
        public string TipoDocumentoBoletaVenta {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoDocumentoBoletaVenta"]);
               
            }
        }
        /// <summary>
        ///  TipoDocumentoFactura
        /// </summary>
        public string TipoDocumentoFactura {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoDocumentoFactura"]);
               
            }
        }
        /// <summary>
        ///  TipoDocumentoNotaCredito
        /// </summary>
        public string TipoDocumentoNotaCredito {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoDocumentoNotaCredito"]);
               
            }
        }
        /// <summary>
        ///  TipoDocumentoNotaDebito
        /// </summary>
        public string TipoDocumentoNotaDebito {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoDocumentoNotaDebito"]);
               
            }
        }
        /// <summary>
        ///  TipoConversionVenta
        /// </summary>
        public string TipoConversionVenta {
            get {
                                 return Convert.ToString(parametrosConfiguracion["TipoConversionVenta"]);
               
            }
        }
        /// <summary>
        ///  FlagConversionMonedaSiSeConvierte
        /// </summary>
        public string FlagConversionMonedaSiSeConvierte {
            get {
                                 return Convert.ToString(parametrosConfiguracion["FlagConversionMonedaSiSeConvierte"]);
               
            }
        }
        /// <summary>
        ///  CuentaContableFacturasPorCobrar
        /// </summary>
        public string CuentaContableFacturasPorCobrar {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CuentaContableFacturasPorCobrar"]);
               
            }
        }
        /// <summary>
        ///  CuentaContableVentaMercaderia
        /// </summary>
        public string CuentaContableVentaMercaderia {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CuentaContableVentaMercaderia"]);
               
            }
        }
        /// <summary>
        ///  CuentaContableVentaServicio
        /// </summary>
        public string CuentaContableVentaServicio {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CuentaContableVentaServicio"]);
               
            }
        }
        /// <summary>
        ///  CuentaContableIgv
        /// </summary>
        public string CuentaContableIgv {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CuentaContableIgv"]);
               
            }
        }
        /// <summary>
        ///  Debe
        /// </summary>
        public string Debe {
            get {
                                 return Convert.ToString(parametrosConfiguracion["Debe"]);
               
            }
        }
        /// <summary>
        ///  Haber
        /// </summary>
        public string Haber {
            get {
                                 return Convert.ToString(parametrosConfiguracion["Haber"]);
               
            }
        }
        /// <summary>
        ///  CodigoAreaCobranzaAClientes
        /// </summary>
        public string CodigoAreaCobranzaAClientes {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CodigoAreaCobranzaAClientes"]);
               
            }
        }
        /// <summary>
        ///  MonedaDolarUsa
        /// </summary>
        public string MonedaDolarUsa {
            get {
                                 return Convert.ToString(parametrosConfiguracion["MonedaDolarUsa"]);
               
            }
        }
        /// <summary>
        ///  CuentaContableIcbper
        /// </summary>
        public string CuentaContableIcbper {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CuentaContableIcbper"]);
               
            }
        }
        /// <summary>
        ///  SubDiarioPlanillaDeCobranza
        /// </summary>
        public string SubDiarioPlanillaDeCobranza {
            get {
                                 return Convert.ToString(parametrosConfiguracion["SubDiarioPlanillaDeCobranza"]);
               
            }
        }
        /// <summary>
        ///  SubDiarioProvisionesVarias
        /// </summary>
        public string SubDiarioProvisionesVarias {
            get {
                                 return Convert.ToString(parametrosConfiguracion["SubDiarioProvisionesVarias"]);
               
            }
        }
        /// <summary>
        ///  CuentaContableCaja
        /// </summary>
        public string CuentaContableCaja {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CuentaContableCaja"]);
               
            }
        }
        /// <summary>
        ///  CuentaContableFacturasPorCobrarEnDolares
        /// </summary>
        public string CuentaContableFacturasPorCobrarEnDolares {
            get {
                                 return Convert.ToString(parametrosConfiguracion["CuentaContableFacturasPorCobrarEnDolares"]);
               
            }
        }
        /// <summary>
        ///  ValorIgvPorDefecto
        /// </summary>
        public decimal ValorIgvPorDefecto {
            get {
                                 return Convert.ToDecimal(parametrosConfiguracion["ValorIgvPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  RegistroClientesConcarAvanexoC
        /// </summary>
        public string RegistroClientesConcarAvanexoC {
            get {
                                 return Convert.ToString(parametrosConfiguracion["RegistroClientesConcarAvanexoC"]);
               
            }
        }
        /// <summary>
        ///  RegistorClientesConcarArefaneSinDireccion
        /// </summary>
        public string RegistorClientesConcarArefaneSinDireccion {
            get {
                                 return Convert.ToString(parametrosConfiguracion["RegistorClientesConcarArefaneSinDireccion"]);
               
            }
        }
        /// <summary>
        ///  RegistorClientesConcarAestadoV
        /// </summary>
        public string RegistorClientesConcarAestadoV {
            get {
                                 return Convert.ToString(parametrosConfiguracion["RegistorClientesConcarAestadoV"]);
               
            }
        }
    

}



/// <summary>
///  Pedido
/// </summary>
public sealed class PedidoSettings
{
IDictionary<string, string> parametrosConfiguracion = new Dictionary<string, string>();




public PedidoSettings()
        {
SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["SigescomEntities_"].ConnectionString);
//List<object> parametrosConfiguracion = new List<object>().Select(t => new { Id = default(int), Nombre = default(string), Valor=default(string) , Tipo=default(string), Descripcion=default(string)}).ToList(); 
string configuracionQuery = string.Format("select {0}, {1},{2},{3},{4} from {5} where id_configuracion={6} order by {0}", "id", "nombre", "valor","descripcion","tipo","parametro_de_configuracion",18);
SqlCommand parametroConfiguracionCommand = new SqlCommand(configuracionQuery, conn);
conn.Open();
        SqlDataReader parametroConfiguracionReader = parametroConfiguracionCommand.ExecuteReader();
        bool parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        while(parametroConfiguracionLoop)
        {

            parametrosConfiguracion.Add(parametroConfiguracionReader["nombre"].ToString(),parametroConfiguracionReader["valor"].ToString()); 
            parametroConfiguracionLoop = parametroConfiguracionReader.Read();
        }
conn.Close();





        }

private static PedidoSettings defaultInstance = new PedidoSettings();
        
        public static PedidoSettings Default {
            get {
                return defaultInstance;
            }
        }
public  static void Reset()
        {
            defaultInstance = new PedidoSettings();
        }





        /// <summary>
        ///  IdTipoTransaccionOrdenPedido
        /// </summary>
        public int IdTipoTransaccionOrdenPedido {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionOrdenPedido"]);
               
            }
        }
        /// <summary>
        ///  MostrarSeccionEntregaEnPedido
        /// </summary>
        public bool MostrarSeccionEntregaEnPedido {
            get {
                    
        return parametrosConfiguracion["MostrarSeccionEntregaEnPedido"].ToString()=="1";

               
            }
        }
        /// <summary>
        ///  IdTipoTransaccionPedido
        /// </summary>
        public int IdTipoTransaccionPedido {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoTransaccionPedido"]);
               
            }
        }
        /// <summary>
        ///  IdTipoComprobantePedido
        /// </summary>
        public int IdTipoComprobantePedido {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoComprobantePedido"]);
               
            }
        }
        /// <summary>
        ///  IdTipoComprobanteEmitirPorDefecto
        /// </summary>
        public int IdTipoComprobanteEmitirPorDefecto {
            get {
                                 return Convert.ToInt32(parametrosConfiguracion["IdTipoComprobanteEmitirPorDefecto"]);
               
            }
        }
        /// <summary>
        ///  ImprimirPedido
        /// </summary>
        public bool ImprimirPedido {
            get {
                    
        return parametrosConfiguracion["ImprimirPedido"].ToString()=="1";

               
            }
        }
    

}


public sealed class Configuraciones
{
 public static void Reset()
    {
        TransaccionSettings.Reset();
        OperationResultSettings.Reset();
        MaestroSettings.Reset();
        FacturacionElectronicaSettings.Reset();
        ContabilidadSettings.Reset();
        ConceptoSettings.Reset();
        AplicacionSettings.Reset();
        ActorSettings.Reset();
        ReporteSettings.Reset();
        LibrosElectronicosSettings.Reset();
        HotelSettings.Reset();
        VentasSettings.Reset();
        RestauranteSettings.Reset();
        CocheraSettings.Reset();
        CotizacionSettings.Reset();
        CodigoFESunatSettings.Reset();
        ConcarSettings.Reset();
        PedidoSettings.Reset();
    }
}

}